{
	"#ClipboardTimeout": "#ClipboardTimeout Milliseconds",
	"#DefaultReturn": "#DefaultReturn unset\r\n#DefaultReturn \"\"",
	"#DllLoad": "#DllLoad FileOrDirName",
	"#ErrorStdOut": "#ErrorStdOut Encoding",
	"#HotIf": "#HotIf Expression",
	"#HotIfTimeout": "#HotIfTimeout Timeout",
	"#Hotstring": "#Hotstring NoMouse\r\n#Hotstring EndChars NewChars\r\n#Hotstring NewOptions",
	"#Include": "#Include FileOrDirName\r\n#Include <LibName>\r\n#IncludeAgain FileOrDirName",
	"#InputLevel": "#InputLevel Level",
	"#MaxThreads": "#MaxThreads Value",
	"#MaxThreadsBuffer": "#MaxThreadsBuffer Setting",
	"#MaxThreadsPerHotkey": "#MaxThreadsPerHotkey Value",
	"#NoTrayIcon": "#NoTrayIcon",
	"#Requires": "#Requires Requirement",
	"#SingleInstance": "#SingleInstance ForceIgnorePromptOff",
	"#SuspendExempt": "#SuspendExempt Setting",
	"#UseHook": "#UseHook Setting",
	"#Warn": "#Warn WarningType, WarningMode",
	"#WinActivateForce": "#WinActivateForce",
	"ACos": "Value := ACos(Number)",
	"ASin": "Value := ASin(Number)",
	"ATan": "Value := ATan(Number)",
	"Abs": "Value := Abs(Number)",
	"Add": "ItemID := TV.Add(Name, ParentItemID, Options)",
	"AddListView": "LV := GuiObj.AddListView(Options, [\"ColumnTitle1\",\"ColumnTitle2\",\"...\"])",
	"AddStandard": "MyMenu.AddStandard()",
	"AddTreeView": "TV := GuiObj.AddTreeView(Options)",
	"Array": "ArrayObj := Array(Value, Value2, ..., ValueN)",
	"Bind": "BoundFunc := FuncObj.Bind(Param1, Param2, ...)",
	"BlockInput": "BlockInput OnOff\r\nBlockInput SendMouse\r\nBlockInput MouseMove",
	"Break": "Break LoopLabel",
	"Buffer": "BufferObj := Buffer(ByteCount, FillByte)",
	"Call": "FuncObj(Param1, Param2, ...)\r\nFuncObj.Call(Param1, Param2, ...)",
	"CallbackCreate": "Address := CallbackCreate(Function , Options, ParamCount)",
	"CallbackFree": "CallbackFree(Address)",
	"Capacity": "MaxItems := MapObj.Capacity",
	"CaretGetPos": "CaretFound := CaretGetPos(&OutputVarX, &OutputVarY)",
	"CaseSense": "Setting := MapObj.CaseSense",
	"Catch": "Catch ErrorClass as OutputVar\r\n{\r\n    Statements\r\n}",
	"Ceil": "Value := Ceil(Number)",
	"Change": "Ctrl_Change(GuiCtrlObj, Info)",
	"Check": "MyMenu.Check(MenuItemName)",
	"Choose": "GuiCtrl.Choose(Value)",
	"Chr": "String := Chr(Number)",
	"Class": "ClassObj := Class(Name, BaseClass, Args*)\r\nClassObj := Class(BaseClass, Args*)",
	"Clear": "MapObj.Clear()",
	"Click": "Ctrl_Click(GuiCtrlObj, Info)\r\nLink_Click(GuiCtrlObj, Info, Href)",
	"ClipWait": "ClipWait Timeout, WaitFor",
	"ClipboardAll": "ClipSaved := ClipboardAll(Data, Size)",
	"Clone": "Clone := Obj.Clone()",
	"Close": "Gui_Close(GuiObj)",
	"ColClick": "Ctrl_ColClick(GuiCtrlObj, Info)",
	"ComCall": "Result := ComCall(Index, ComObj , Type1, Arg1, Type2, Arg2, ReturnType)",
	"ComObjActive": "ComObj := ComObjActive(CLSID)",
	"ComObjArray": "ArrayObj := ComObjArray(VarType, Count1 , Count2, ... Count8)",
	"ComObjConnect": "ComObjConnect ComObj , PrefixOrSink",
	"ComObjFlags": "Flags := ComObjFlags(ComObj , NewFlags, Mask)",
	"ComObjFromPtr": "ComObj := ComObjFromPtr(DispPtr)",
	"ComObjGet": "ComObj := ComObjGet(Name)",
	"ComObjQuery": "InterfaceComObj := ComObjQuery(ComObj, SID, IID)\r\nInterfaceComObj := ComObjQuery(ComObj, IID)",
	"ComObjType": "Info := ComObjType(ComObj , InfoType)",
	"ComObjValue": "Value := ComObjValue(ComObj)",
	"ComObject": "ComObj := ComObject(CLSID , IID)",
	"ComValue": "ComObj := ComValue(VarType, Value , Flags)",
	"ContextMenu": "Ctrl_ContextMenu(GuiCtrlObj, Item, IsRightClick, X, Y)",
	"Continue": "Continue LoopLabel",
	"ControlAddItem": "ControlAddItem String, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlChooseIndex": "ControlChooseIndex N, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlChooseString": "ControlChooseString String, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlClick": "ControlClick Control-or-Pos, WinTitle, WinText, WhichButton, ClickCount, Options, ExcludeTitle, ExcludeText",
	"ControlDeleteItem": "ControlDeleteItem N, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlFindItem": "FoundItem := ControlFindItem(String, Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlFocus": "ControlFocus Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlGetChecked": "IsChecked := ControlGetChecked(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetChoice": "Choice := ControlGetChoice(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetClassNN": "ClassNN := ControlGetClassNN(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetEnabled": "IsEnabled := ControlGetEnabled(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetFocus": "HWND := ControlGetFocus(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetHwnd": "Hwnd := ControlGetHwnd(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetIndex": "Index := ControlGetIndex(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetItems": "Items := ControlGetItems(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetPos": "ControlGetPos &OutX, &OutY, &OutWidth, &OutHeight, Control, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlGetStyle": "Style := ControlGetStyle(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)\r\nExStyle := ControlGetExStyle(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetText": "Text := ControlGetText(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlGetVisible": "IsVisible := ControlGetVisible(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"ControlHide": "ControlHide Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlHideDropDown": "ControlHideDropDown Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlMove": "ControlMove X, Y, Width, Height, Control, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlSend": "ControlSend Keys , Control, WinTitle, WinText, ExcludeTitle, ExcludeText\r\nControlSendText Keys , Control, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlSetChecked": "ControlSetChecked NewSetting, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlSetEnabled": "ControlSetEnabled NewSetting, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlSetStyle": "ControlSetStyle Value, Control , WinTitle, WinText, ExcludeTitle, ExcludeText\r\nControlSetExStyle Value, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlSetText": "ControlSetText NewText, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlShow": "ControlShow Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ControlShowDropDown": "ControlShowDropDown Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"CoordMode": "CoordMode TargetType , RelativeTo",
	"Cos": "Value := Cos(Number)",
	"Count": "Count := MapObj.Count",
	"Critical": "Critical OnOffNumeric",
	"DateAdd": "Result := DateAdd(DateTime, Time, TimeUnits)",
	"DateDiff": "Result := DateDiff(DateTime1, DateTime2, TimeUnits)",
	"Default": "MapObj.Default := Value",
	"DefineProp": "Obj.DefineProp(Name, Desc)",
	"Delete": "TV.Delete(ItemID)",
	"DeleteCol": "LV.DeleteCol(ColumnNumber)",
	"DeleteProp": "Obj.DeleteProp(Name)",
	"Destroy": "MyGui.Destroy()",
	"DetectHiddenText": "DetectHiddenText Mode",
	"DetectHiddenWindows": "DetectHiddenWindows Mode",
	"DirCopy": "DirCopy Source, Dest , Overwrite",
	"DirCreate": "DirCreate DirName",
	"DirDelete": "DirDelete DirName , Recurse",
	"DirExist": "AttributeString := DirExist(FilePattern)",
	"DirMove": "DirMove Source, Dest , OverwriteOrRename",
	"DirSelect": "SelectedFolder := DirSelect(StartingFolder, Options, Prompt)",
	"Disable": "MyMenu.Disable(MenuItemName)",
	"DllCall": "Result := DllCall(\"DllFile\\Function\" , Type1, Arg1, Type2, Arg2, \"Cdecl ReturnType\")",
	"DoubleClick": "Ctrl_DoubleClick(GuiCtrlObj, Info)",
	"Download": "Download URL, Filename ",
	"DriveEject": "DriveEject Drive\r\nDriveRetract Drive",
	"DriveGetCapacity": "Capacity := DriveGetCapacity(Path)",
	"DriveGetFileSystem": "FileSystem := DriveGetFileSystem(Drive)",
	"DriveGetLabel": "Label := DriveGetLabel(Drive)",
	"DriveGetList": "List := DriveGetList(Type)",
	"DriveGetSerial": "Serial := DriveGetSerial(Drive)",
	"DriveGetSpaceFree": "FreeSpace := DriveGetSpaceFree(Path)",
	"DriveGetStatus": "Status := DriveGetStatus(Path)",
	"DriveGetStatusCD": "CDStatus := DriveGetStatusCD(Drive)",
	"DriveGetType": "Type := DriveGetType(Path)",
	"DriveLock": "DriveLock Drive",
	"DriveSetLabel": "DriveSetLabel Drive , NewLabel",
	"DriveUnlock": "DriveUnlock Drive",
	"DropFiles": "Gui_DropFiles(GuiObj, GuiCtrlObj, FileArray, X, Y)",
	"Edit": "Edit Filename",
	"EditGetCurrentCol": "CurrentCol := EditGetCurrentCol(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"EditGetCurrentLine": "CurrentLine := EditGetCurrentLine(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"EditGetLine": "Line := EditGetLine(N, Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"EditGetLineCount": "LineCount := EditGetLineCount(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"EditGetSelectedText": "Selected := EditGetSelectedText(Control , WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"EditPaste": "EditPaste String, Control , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"Else": "Else\r\n{\r\n    Statements\r\n}",
	"Enable": "MyMenu.Enable(MenuItemName)",
	"EnvGet": "Value := EnvGet(EnvVarName)",
	"EnvSet": "EnvSet EnvVar , Value",
	"Error": "NewError := Error(Message , What, Extra)",
	"Escape": "Gui_Escape(GuiObj)",
	"Exit": "Exit ExitCode",
	"ExitApp": "ExitApp ExitCode",
	"Exp": "Value := Exp(N)",
	"FileAppend": "FileAppend Text , Filename, Options",
	"FileCopy": "FileCopy SourcePattern, DestPattern , Overwrite",
	"FileCreateShortcut": "FileCreateShortcut Target, LinkFile , WorkingDir, Args, Description, IconFile, ShortcutKey, IconNumber, RunState",
	"FileDelete": "FileDelete FilePattern",
	"FileEncoding": "FileEncoding Encoding",
	"FileExist": "AttributeString := FileExist(FilePattern)",
	"FileGetAttrib": "AttributeString := FileGetAttrib(Filename)",
	"FileGetShortcut": "FileGetShortcut LinkFile , &OutTarget, &OutDir, &OutArgs, &OutDescription, &OutIcon, &OutIconNum, &OutRunState",
	"FileGetSize": "Size := FileGetSize(Filename, Units)",
	"FileGetTime": "Timestamp := FileGetTime(Filename, WhichTime)",
	"FileGetVersion": "Version := FileGetVersion(Filename)",
	"FileInstall": "FileInstall Source, Dest , Overwrite",
	"FileMove": "FileMove SourcePattern, DestPattern , Overwrite",
	"FileOpen": "FileObj := FileOpen(Filename, Flags , Encoding)",
	"FileRead": "Text := FileRead(Filename , Options)",
	"FileRecycle": "FileRecycle FilePattern",
	"FileRecycleEmpty": "FileRecycleEmpty DriveLetter",
	"FileSelect": "SelectedFile := FileSelect(Options, RootDir\\Filename, Title, Filter)",
	"FileSetAttrib": "FileSetAttrib Attributes , FilePattern, Mode",
	"FileSetTime": "FileSetTime YYYYMMDDHH24MISS, FilePattern, WhichTime, Mode",
	"Finally": "Finally\r\n{\r\n    Statements\r\n}",
	"Flash": "MyGui.Flash(Blink)",
	"Float": "FltValue := Float(Value)",
	"Floor": "Value := Floor(Number)",
	"Focus": "Ctrl_Focus(GuiCtrlObj, Info)\r\nCtrl_LoseFocus(GuiCtrlObj, Info)",
	"For": "For Value1 , Value2 in Expression",
	"Format": "String := Format(FormatStr , Values...)",
	"FormatTime": "String := FormatTime(YYYYMMDDHH24MISS, Format)",
	"Get": "ItemID := TV.Get(ItemID, Attribute)",
	"GetChild": "ChildItemID := TV.GetChild(ItemID)",
	"GetClientPos": "MyGui.GetClientPos(&X, &Y, &Width, &Height)",
	"GetCount": "Count := TV.GetCount()",
	"GetKeyName": "Name := GetKeyName(KeyName)",
	"GetKeySC": "SC := GetKeySC(KeyName)",
	"GetKeyState": "IsDown := GetKeyState(KeyName , Mode)",
	"GetKeyVK": "VK := GetKeyVK(KeyName)",
	"GetMethod": "Method := GetMethod(Value , Name, ParamCount)",
	"GetNext": "NextItemID := TV.GetNext(ItemID, ItemType)",
	"GetOwnPropDesc": "Obj.GetOwnPropDesc(Name)",
	"GetParent": "ParentItemID := TV.GetParent(ItemID)",
	"GetPos": "GuiCtrl.GetPos(&X, &Y, &Width, &Height)",
	"GetPrev": "PrevItemID := TV.GetPrev(ItemID)",
	"GetSelection": "ItemID := TV.GetSelection()",
	"GetText": "Text := TV.GetText(ItemID)",
	"Goto": "Goto Label\r\nGoto(\"Label\")",
	"GroupActivate": "HWND := GroupActivate(GroupName , Mode)",
	"GroupAdd": "GroupAdd GroupName , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"GroupClose": "GroupClose GroupName , Mode",
	"GroupDeactivate": "GroupDeactivate GroupName , Mode",
	"Gui": "MyGui := Gui(Options, Title, EventObj)",
	"GuiCtrlFromHwnd": "GuiControlObj := GuiCtrlFromHwnd(Hwnd)",
	"GuiFromHwnd": "GuiObj := GuiFromHwnd(Hwnd , RecurseParent)",
	"Has": "MapObj.Has(Key)",
	"HasBase": "HasBase := HasBase(Value, BaseObj)",
	"HasMethod": "HasMethod := HasMethod(Value , Name, ParamCount)",
	"HasOwnProp": "Obj.HasOwnProp(Name)",
	"HasProp": "HasProp := HasProp(Value, Name)",
	"Hide": "MyGui.Hide()",
	"HotIf": "HotIf \"Expression\"\r\nHotIf Function",
	"HotIfWinActive": "HotIfWinActive WinTitle, WinText\r\nHotIfWinExist WinTitle, WinText\r\nHotIfWinNotActive WinTitle, WinText\r\nHotIfWinNotExist WinTitle, WinText",
	"Hotkey": "Hotkey KeyName , Action, Options",
	"Hotstring": "Hotstring NewOptions",
	"IL_Add": "IconIndex := IL_Add(ImageListID, IconFileName , IconNumber)\r\nIconIndex := IL_Add(ImageListID, PicFileName, MaskColor, Resize)",
	"IL_Create": "ImageListID := IL_Create(InitialCount, GrowCount, LargeIcons)",
	"IL_Destroy": "IsDestroyed := IL_Destroy(ImageListID)",
	"If": "If Expression\r\n{\r\n    Statements\r\n}",
	"ImageSearch": "ImageSearch &OutputVarX, &OutputVarY, X1, Y1, X2, Y2, ImageFile",
	"InStr": "FoundPos := InStr(Haystack, Needle , CaseSense, StartingPos, Occurrence)",
	"IniDelete": "IniDelete Filename, Section , Key",
	"IniRead": "Value := IniRead(Filename, Section, Key , Default)\r\nSection := IniRead(Filename, Section)\r\nSectionNames := IniRead(Filename)",
	"IniWrite": "IniWrite Value, Filename, Section, Key\r\nIniWrite Pairs, Filename, Section",
	"InputBox": "Obj := InputBox(Prompt, Title, Options, Default)",
	"InputHook": "InputHook := InputHook(Options, EndKeys, MatchList)",
	"Insert": "MyMenu.Insert(ItemToInsertBefore, NewItemName, Callback-or-Submenu, Options)",
	"InsertAt": "ArrayObj.InsertAt(Index, Value1 , Value2, ... ValueN)",
	"InsertCol": "ColumnNumber := LV.InsertCol(ColumnNumber , Options, ColumnTitle)",
	"InstallKeybdHook": "InstallKeybdHook Install, Force",
	"InstallMouseHook": "InstallMouseHook Install, Force",
	"Integer": "IntValue := Integer(Value)",
	"IsByRef": "Boolean := FuncObj.IsByRef(ParamIndex)",
	"IsLabel": "Boolean := IsLabel(LabelName)",
	"IsObject": "Boolean := IsObject(Value)",
	"IsOptional": "Boolean := FuncObj.IsOptional(ParamIndex)",
	"IsSet": "Boolean := IsSet(Var)",
	"IsSetRef": "Boolean := IsSetRef(&Ref)",
	"ItemCheck": "Ctrl_ItemCheck(GuiCtrlObj, Item, Checked)",
	"ItemEdit": "Ctrl_ItemEdit(GuiCtrlObj, Item)",
	"ItemExpand": "Ctrl_ItemExpand(GuiCtrlObj, Item, Expanded)",
	"ItemFocus": "Ctrl_ItemFocus(GuiCtrlObj, Item)",
	"ItemSelect": "ListView_ItemSelect(GuiCtrlObj, Item, Selected)\r\nTreeView_ItemSelect(GuiCtrlObj, Item)",
	"KeyHistory": "KeyHistory MaxEvents",
	"KeyOpt": "InputHook.KeyOpt(Keys, KeyOptions)",
	"KeyWait": "KeyWait KeyName , Options",
	"Length": "ArrayObj.Length := Length",
	"ListHotkeys": "ListHotkeys",
	"ListLines": "ListLines Mode",
	"ListVars": "ListVars",
	"ListViewGetContent": "List := ListViewGetContent(Options, Control, WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"Ln": "Value := Ln(Number)",
	"LoadPicture": "Handle := LoadPicture(Filename , Options, &OutImageType)",
	"Log": "Value := Log(Number)",
	"Loop": "Loop {\r\n    ...\r\n} Until Expression",
	"Loop Files": "Loop Files FilePattern , Mode",
	"Loop Parse": "Loop Parse String , DelimiterChars, OmitChars",
	"Loop Read": "Loop Read InputFile , OutputFile",
	"Loop Reg": "Loop Reg KeyName , Mode",
	"Map": "MapObj := Map(Key1, Value1, Key2, Value2, ...)",
	"Max": "Number := Max(Number1 , Number2, ...)",
	"Maximize": "MyGui.Maximize()",
	"Menu": "MyMenu := Menu()\r\nMyMenuBar := MenuBar()",
	"MenuFromHandle": "Menu := MenuFromHandle(Handle)",
	"MenuSelect": "MenuSelect WinTitle, WinText, Menu , SubMenu1, SubMenu2, SubMenu3, SubMenu4, SubMenu5, SubMenu6, ExcludeTitle, ExcludeText",
	"Min": "Number := Min(Number1 , Number2, ...)",
	"Minimize": "MyGui.Minimize()",
	"Mod": "Value := Mod(Dividend, Divisor)",
	"Modify": "ItemID := TV.Modify(ItemID , Options, NewName)",
	"ModifyCol": "LV.ModifyCol(ColumnNumber, Options, ColumnTitle)",
	"MonitorGet": "ActualN := MonitorGet(N, &Left, &Top, &Right, &Bottom)",
	"MonitorGetCount": "Count := MonitorGetCount()",
	"MonitorGetName": "Name := MonitorGetName(N)",
	"MonitorGetPrimary": "Primary := MonitorGetPrimary()",
	"MonitorGetWorkArea": "IsExisting := MonitorGetWorkArea(N, &Left, &Top, &Right, &Bottom)",
	"MouseClick": "MouseClick WhichButton, X, Y, ClickCount, Speed, DownOrUp, Relative",
	"MouseClickDrag": "MouseClickDrag WhichButton, X1, Y1, X2, Y2 , Speed, Relative\r\nMouseClickDrag WhichButton, , , X2, Y2 , Speed, Relative",
	"MouseGetPos": "MouseGetPos &OutputVarX, &OutputVarY, &OutputVarWin, &OutputVarControl, Flag",
	"MouseMove": "MouseMove X, Y , Speed, Relative",
	"Move": "GuiCtrl.Move(X, Y, Width, Height)",
	"MsgBox": "MsgBox Text, Title, Options\r\nResult := MsgBox(Text, Title, Options)",
	"NumGet": "Number := NumGet(Source, Offset, Type)\r\nNumber := NumGet(Source, Type)",
	"NumPut": "NumPut Type, Number, Type2, Number2, ... Target , Offset",
	"Number": "NumValue := Number(Value)",
	"ObjAddRef": "NewRefCount := ObjAddRef(Ptr)\r\nNewRefCount := ObjRelease(Ptr)",
	"ObjBindMethod": "BoundFunc := ObjBindMethod(Obj , Method, Params)",
	"ObjGetBase": "BaseObj := ObjGetBase(Value)",
	"ObjGetCapacity": "MaxItems := ObjGetCapacity(Obj)",
	"ObjGetDataPtr": "Ptr := ObjGetDataPtr(Obj)",
	"ObjGetDataSize": "Size := ObjGetDataSize(Obj)",
	"ObjOwnPropCount": "Count := ObjOwnPropCount(Obj)",
	"ObjSetBase": "ObjSetBase(Obj, BaseObj)",
	"ObjSetCapacity": "ObjSetCapacity(Obj, MaxProps)",
	"ObjSetDataPtr": "ObjSetDataPtr(Obj, Ptr)",
	"Object": "Obj := Object()",
	"OnClipboardChange": "OnClipboardChange Callback , AddRemove",
	"OnCommand": "GuiCtrl.OnCommand(NotifyCode, Callback , AddRemove)",
	"OnError": "OnError Callback , AddRemove",
	"OnEvent": "Gui.OnEvent(EventName, Callback , AddRemove)\r\nGuiCtrl.OnEvent(EventName, Callback , AddRemove)",
	"OnExit": "OnExit Callback , AddRemove",
	"OnMessage": "OnMessage MsgNumber, Callback , MaxThreads",
	"OnNotify": "GuiCtrl.OnNotify(NotifyCode, Callback , AddRemove)",
	"Opt": "GuiCtrl.Opt(Options)",
	"Ord": "Number := Ord(String)",
	"OutputDebug": "OutputDebug Text",
	"OwnProps": "For Name , Value in Obj.OwnProps()",
	"Pause": "Pause NewState",
	"Persistent": "Persistent Persist",
	"PixelGetColor": "Color := PixelGetColor(X, Y , Mode)",
	"PixelSearch": "PixelSearch &OutputVarX, &OutputVarY, X1, Y1, X2, Y2, ColorID , Variation",
	"Pop": "Value := ArrayObj.Pop()",
	"PostMessage": "PostMessage MsgNumber , wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"ProcessClose": "ProcessClose PIDOrName",
	"ProcessExist": "PID := ProcessExist(PIDOrName)",
	"ProcessGetName": "Name := ProcessGetName(PIDOrName)\r\nPath := ProcessGetPath(PIDOrName)",
	"ProcessGetParent": "PID := ProcessGetParent(PIDOrName)",
	"ProcessSetPriority": "ProcessSetPriority Level , PIDOrName",
	"ProcessWait": "PID := ProcessWait(PIDOrName , Timeout)",
	"ProcessWaitClose": "PID := ProcessWaitClose(PIDOrName , Timeout)",
	"Prototype": "ClassObj.Prototype := Proto",
	"Push": "ArrayObj.Push(Value, Value2, ..., ValueN)",
	"Random": "N := Random(A, B)",
	"RawRead": "FileObj.RawRead(Buffer , Bytes)",
	"RawWrite": "FileObj.RawWrite(Data , Bytes)",
	"Read": "String := FileObj.Read(Characters)",
	"ReadLine": "TextLine := FileObj.ReadLine()",
	"ReadNumType": "Num := FileObj.ReadNumType()",
	"Redraw": "GuiCtrl.Redraw()",
	"RegCreateKey": "RegCreateKey KeyName",
	"RegDelete": "RegDelete KeyName, ValueName",
	"RegDeleteKey": "RegDeleteKey KeyName",
	"RegExMatch": "FoundPos := RegExMatch(Haystack, NeedleRegEx , &OutputVar, StartingPos)",
	"RegExReplace": "NewStr := RegExReplace(Haystack, NeedleRegEx , Replacement, &OutputVarCount, Limit, StartingPos)",
	"RegRead": "Value := RegRead(KeyName, ValueName, Default)",
	"RegWrite": "RegWrite Value, ValueType, KeyName , ValueName\r\nRegWrite Value , ValueType, , ValueName",
	"Reload": "Reload",
	"RemoveAt": "ArrayObj.RemoveAt(Index , Length)",
	"Rename": "MyMenu.Rename(MenuItemName , NewName)",
	"Restore": "MyGui.Restore()",
	"Return": "Return Expression",
	"Round": "Value := Round(Number , N)",
	"Run": "Run Target , WorkingDir, Options, &OutputVarPID\r\nExitCode := RunWait(Target , WorkingDir, Options, &OutputVarPID)",
	"RunAs": "RunAs User, Password, Domain",
	"Seek": "FileObj.Seek(Distance , Origin)",
	"Send": "Send Keys\r\nSendText Keys\r\nSendInput Keys\r\nSendPlay Keys\r\nSendEvent Keys",
	"SendLevel": "SendLevel Level",
	"SendMessage": "Result := SendMessage(MsgNumber , wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText, Timeout)",
	"SendMode": "SendMode Mode",
	"Set": "MapObj.Set(Key, Value, Key2, Value2, ...)",
	"SetCapsLockState": "SetCapsLockState State\r\nSetNumLockState State\r\nSetScrollLockState State",
	"SetColor": "MyMenu.SetColor(ColorValue, ApplyToSubmenus)",
	"SetControlDelay": "SetControlDelay Delay",
	"SetCue": "ComboBoxCtrl.SetCue(NewText)\r\nEditCtrl.SetCue(NewText , ShowWhenFocused)",
	"SetDefaultMouseSpeed": "SetDefaultMouseSpeed Speed",
	"SetFont": "GuiCtrl.SetFont(Options, FontName)",
	"SetFormat": "DateTime.SetFormat(Format)",
	"SetIcon": "MyMenu.SetIcon(MenuItemName, FileName , IconNumber, IconWidth)",
	"SetImageList": "PrevImageListID := TV.SetImageList(ImageListID , IconType)",
	"SetKeyDelay": "SetKeyDelay Delay, PressDuration, \"Play\"",
	"SetMouseDelay": "SetMouseDelay Delay , \"Play\"",
	"SetParts": "Hwnd := SB.SetParts(Width1, Width2, ... Width255)",
	"SetRegView": "SetRegView RegView",
	"SetStoreCapsLockMode": "SetStoreCapsLockMode Mode",
	"SetText": "Success := SB.SetText(NewText , PartNumber, Style)",
	"SetTimer": "SetTimer Function, Period, Priority",
	"SetTitleMatchMode": "SetTitleMatchMode MatchMode\r\nSetTitleMatchMode Speed",
	"SetWinDelay": "SetWinDelay Delay",
	"SetWorkingDir": "SetWorkingDir DirName",
	"Show": "MyMenu.Show(X, Y, Wait)",
	"Shutdown": "Shutdown Flag",
	"Sin": "Value := Sin(Number)",
	"Size": "Gui_Size(GuiObj, MinMax, Width, Height)",
	"Sleep": "Sleep Delay",
	"Sort": "SortedString := Sort(String , Options, Callback)",
	"SoundBeep": "SoundBeep Frequency, Duration",
	"SoundGetInterface": "InterfacePtr := SoundGetInterface(IID, Component, Device)",
	"SoundGetMute": "Setting := SoundGetMute(Component, Device)",
	"SoundGetName": "Name := SoundGetName(Component, Device)",
	"SoundGetVolume": "Setting := SoundGetVolume(Component, Device)",
	"SoundPlay": "SoundPlay Filename , Wait",
	"SoundSetMute": "SoundSetMute NewSetting , Component, Device",
	"SoundSetVolume": "SoundSetVolume NewSetting , Component, Device",
	"SplitPath": "SplitPath Path , &OutFileName, &OutDir, &OutExtension, &OutNameNoExt, &OutDrive",
	"Sqrt": "Value := Sqrt(Number)",
	"Start": "InputHook.Start()",
	"StatusBarGetText": "Text := StatusBarGetText(Part#, WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"StatusBarWait": "StatusBarWait BarText, Timeout, Part#, WinTitle, WinText, Interval, ExcludeTitle, ExcludeText",
	"Stop": "InputHook.Stop()",
	"StrCompare": "Result := StrCompare(String1, String2 , CaseSense)",
	"StrGet": "String := StrGet(Source , Length, Encoding)\r\nString := StrGet(Source , Encoding)",
	"StrLen": "Length := StrLen(String)",
	"StrLower": "NewString := StrLower(String)\r\nNewString := StrUpper(String)\r\nNewString := StrTitle(String)",
	"StrPtr": "Address := StrPtr(Value)",
	"StrPut": "BytesWritten := StrPut(String, Target , Length, Encoding)\r\nBytesWritten := StrPut(String, Target , Encoding)\r\nReqBufSize   := StrPut(String , Encoding)",
	"StrReplace": "ReplacedStr := StrReplace(Haystack, Needle , ReplaceText, CaseSense, &OutputVarCount, Limit)",
	"StrSplit": "Array := StrSplit(String , Delimiters, OmitChars, MaxParts)",
	"String": "StrValue := String(Value)",
	"SubStr": "NewStr := SubStr(String, StartingPos , Length)",
	"Submit": "NamedCtrlContents := MyGui.Submit(Hide)",
	"Suspend": "Suspend NewState",
	"Switch": "Switch SwitchValue, CaseSense\r\n{\r\nCase CaseValue1:\r\n    Statements1\r\nCase CaseValue2a, CaseValue2b:\r\n    Statements2\r\nDefault:\r\n    Statements3\r\n}",
	"SysGet": "Value := SysGet(Property)",
	"SysGetIPAddresses": "Addresses := SysGetIPAddresses()",
	"Tan": "Value := Tan(Number)",
	"Thread": "Thread \"Interrupt\" , Duration, LineCount",
	"Throw": "Throw Value",
	"ToggleCheck": "MyMenu.ToggleCheck(MenuItemName)",
	"ToggleEnable": "MyMenu.ToggleEnable(MenuItemName)",
	"ToolTip": "ToolTip Text, X, Y, WhichToolTip",
	"TraySetIcon": "TraySetIcon FileName, IconNumber, Freeze",
	"TrayTip": "TrayTip Text, Title, Options",
	"Trim": "NewString :=  Trim(String , OmitChars)\r\nNewString := LTrim(String , OmitChars)\r\nNewString := RTrim(String , OmitChars)",
	"Try": "Try\r\n{\r\n    Statements\r\n}",
	"Type": "ClassName := Type(Value)",
	"Uncheck": "MyMenu.Uncheck(MenuItemName)",
	"UseTab": "GuiCtrl.UseTab(Value, ExactMatch)",
	"VarSetStrCapacity": "GrantedCapacity := VarSetStrCapacity(&TargetVar , RequestedCapacity)",
	"VerCompare": "Result := VerCompare(VersionA, VersionB)",
	"Wait": "InputHook.Wait(MaxTime)",
	"While": "While Expression",
	"WinActivate": "WinActivate WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinActivateBottom": "WinActivateBottom WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinActive": "UniqueID := WinActive(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinClose": "WinClose WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText",
	"WinExist": "UniqueID := WinExist(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetAlwaysOnTop": "Topmost := WinGetAlwaysOnTop(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetClass": "Class := WinGetClass(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetClientPos": "WinGetClientPos &X, &Y, &Width, &Height, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinGetControls": "Controls := WinGetControls(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetControlsHwnd": "Controls := WinGetControlsHwnd(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetCount": "Count := WinGetCount(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetEnabled": "Enabled := WinGetEnabled(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetID": "ID := WinGetID(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetIDLast": "IDLast := WinGetIDLast(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetList": "List := WinGetList(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetMinMax": "MinMax := WinGetMinMax(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetPID": "PID := WinGetPID(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetPos": "WinGetPos &OutX, &OutY, &OutWidth, &OutHeight, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinGetProcessName": "ProcessName := WinGetProcessName(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetProcessPath": "ProcessPath := WinGetProcessPath(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetStyle": "Style := WinGetStyle(WinTitle, WinText, ExcludeTitle, ExcludeText)\r\nExStyle := WinGetExStyle(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetText": "Text := WinGetText(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetTitle": "Title := WinGetTitle(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetTransColor": "TransColor := WinGetTransColor(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinGetTransparent": "Transparent := WinGetTransparent(WinTitle, WinText, ExcludeTitle, ExcludeText)",
	"WinHide": "WinHide WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinKill": "WinKill WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText",
	"WinMaximize": "WinMaximize WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinMinimize": "WinMinimize WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinMinimizeAll": "WinMinimizeAll\r\nWinMinimizeAllUndo",
	"WinMove": "WinMove X, Y, Width, Height, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinMoveBottom": "WinMoveBottom WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinMoveTop": "WinMoveTop WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinRedraw": "WinRedraw WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinRestore": "WinRestore WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetAlwaysOnTop": "WinSetAlwaysOnTop NewSetting, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetEnabled": "WinSetEnabled NewSetting , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetRegion": "WinSetRegion Options, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetStyle": "WinSetStyle Value , WinTitle, WinText, ExcludeTitle, ExcludeText\r\nWinSetExStyle Value , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetTitle": "WinSetTitle NewTitle , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetTransColor": "WinSetTransColor Color , WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinSetTransparent": "WinSetTransparent N, WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinShow": "WinShow WinTitle, WinText, ExcludeTitle, ExcludeText",
	"WinWait": "WinWait WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText",
	"WinWaitActive": "WinWaitActive WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText\r\nWinWaitNotActive WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText",
	"WinWaitClose": "WinWaitClose WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText",
	"Write": "FileObj.Write(String)",
	"WriteLine": "FileObj.WriteLine(String)",
	"WriteNumType": "FileObj.WriteNumType(Num)",
	"__New": "MapObj.__New(Key, Value, Key2, Value2, ...)"
}