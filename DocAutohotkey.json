{
	"#ClipboardTimeout": {
		"desc": "Changes how long the script keeps trying to access the clipboard when the first attempt fails.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe length of the interval in milliseconds. Specify -1 to have it keep trying indefinitely. Specify 0 to have it try only once.\n",
					"nome": "Milliseconds"
				}
			]
		]
	},
	"#DefaultReturn [v2.1-alpha.2+]": {
		"desc": "Sets the default return to either \"\" or unset.",
		"params": [

		]
	},
	"#DllLoad": {
		"desc": "Loads a DLL or EXE file before the script starts executing.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path of a file or directory as explained below. This must not contain double quotes (except for an optional pair of double quotes surrounding the parameter), wildcards or escape sequences other than semicolon (`;).\nBuilt-in variables may be used by enclosing them in percent signs (for example, #DllLoad \"%A_ScriptDir%\"). Percent signs which are not part of a valid variable reference are interpreted literally. All built-in variables are valid, except for A_Args and built-in classes.\nKnown limitation: When compiling a script, variables are evaluated by the compiler and may differ from what the script would return when it is finally executed. The following variables are supported: A_AhkPath, A_AppData, A_AppDataCommon, A_ComputerName, A_ComSpec, A_Desktop, A_DesktopCommon, A_IsCompiled, A_LineFile, A_MyDocuments, A_ProgramFiles, A_Programs, A_ProgramsCommon, A_ScriptDir, A_ScriptFullPath, A_ScriptName, A_Space, A_StartMenu, A_StartMenuCommon, A_Startup, A_StartupCommon, A_Tab, A_Temp, A_UserName, A_WinDir.\nFile: The absolute or relative path to the DLL or EXE file to be loaded. If a relative path is specified, the directive searches for the file using the same search strategy as the system's function LoadLibraryW. Note: SetWorkingDir has no effect on #DllLoad because #DllLoad is processed before the script begins executing.\nDirectory: Specify a directory instead of a file to alter the search strategy by all subsequent occurrences of #DllLoad which do not specify an absolute path to a DLL or EXE. The new search strategy is the same as if Directory was passed to the system's function SetDllDirectoryW. If this parameter is omitted, the default search strategy is restored.\nNote: This parameter is not an expression, but can be enclosed in quote marks (either 'single' or \"double\").\n",
					"nome": "FileOrDirName"
				}
			]
		]
	},
	"#ErrorStdOut": {
		"desc": "Sends any syntax error that prevents a script from launching to the standard error stream (stderr) rather than displaying a dialog.",
		"params": [
			[
				{
					"desc": "If omitted, it defaults to CP0 (the system default ANSI code page). Otherwise, specify an encoding string indicating how to encode the output. For example, #ErrorStdOut \"UTF-8\" encodes error messages as UTF-8 before sending them to stderr. Whatever program is capturing the output must support UTF-8, and in some cases may need to be configured to expect it.\nNote: This parameter is not an expression, but can be enclosed in quote marks (either 'single' or \"double\").\n",
					"nome": "Encoding"
				}
			]
		]
	},
	"#HotIf": {
		"desc": "Creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on any condition (an expression).",
		"params": [
			[
				{
					"desc": "Type: Boolean\nIf omitted, subsequently-created hotkeys and hotstrings are not context-sensitive. Otherwise, specify any valid expression. This becomes the return value of an implicit function which has one parameter (ThisHotkey). The function cannot modify global variables directly (as it is assume-local as usual, and cannot contain declarations), but can call other functions which do.\n",
					"nome": "Expression"
				}
			]
		]
	},
	"#HotIfTimeout": {
		"desc": "Sets the maximum time that may be spent evaluating a single #HotIf expression.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe timeout value to apply globally, in milliseconds.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"#Hotstring": {
		"desc": "Changes hotstring options or ending characters.",
		"params": [
			[
				{
					"desc": "Type: String\nPrevents mouse clicks from resetting the hotstring recognizer as described here. As a side-effect, this also prevents the mouse hook from being required by hotstrings (though it will still be installed if the script requires it for other purposes, such as mouse hotkeys). The presence of #Hotstring NoMouse anywhere in the script affects all hotstrings, not just those physically beneath it.\n",
					"nome": "NoMouse"
				}
			],
			[
				{
					"desc": "Type: String\nSpecify the word EndChars followed by a single space and then the new ending characters. For example:\nSince the new ending characters are in effect globally for the entire script -- regardless of where the EndChars directive appears -- there is no need to specify EndChars more than once.\nThe maximum number of ending characters is 100. Characters beyond this length are ignored.\nTo make tab or space an ending character, include `t or `s in the list.\n",
					"nome": "EndChars NewChars"
				}
			],
			[
				{
					"desc": "Type: String\nSpecify new options as described in Hotstring Options. For example: #Hotstring r s k0 c0.\nUnlike EndChars above, the #Hotstring directive is positional when used this way. In other words, entire sections of hotstrings can have different default options as in this example:\n",
					"nome": "NewOptions"
				}
			]
		]
	},
	"#Include / #IncludeAgain": {
		"desc": "Causes the script to behave as though the specified file's contents are present at this exact position.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path of a file or directory as explained below. This must not contain double quotes (except for an optional pair of double quotes surrounding the parameter), wildcards or escape sequences other than semicolon (`;).\nBuilt-in variables may be used by enclosing them in percent signs (for example, #Include \"%A_ScriptDir%\"). Percent signs which are not part of a valid variable reference are interpreted literally. All built-in variables are valid, except for A_Args and built-in classes.\nKnown limitation: When compiling a script, variables are evaluated by the compiler and may differ from what the script would return when it is finally executed. The following variables are supported: A_AhkPath, A_AppData, A_AppDataCommon, A_ComputerName, A_ComSpec, A_Desktop, A_DesktopCommon, A_IsCompiled, A_LineFile, A_MyDocuments, A_ProgramFiles, A_Programs, A_ProgramsCommon, A_ScriptDir, A_ScriptFullPath, A_ScriptName, A_Space, A_StartMenu, A_StartMenuCommon, A_Startup, A_StartupCommon, A_Tab, A_Temp, A_UserName, A_WinDir.\nFile: The name of the file to be included. By default, relative paths are relative to the directory of the file which contains the #Include directive. This default can be overridden by using #Include Dir as described below. Note: SetWorkingDir has no effect on #Include because #Include is processed before the script begins executing.\nDirectory: Specify a directory instead of a file to change the working directory used by all subsequent occurrences of #Include and FileInstall in the current file. Note: Changing the working directory in this way does not affect the script's initial working directory when it starts running (A_WorkingDir). To change that, use SetWorkingDir at the top of the script.\nNote: This parameter is not an expression, but can be enclosed in quote marks (either 'single' or \"double\").\n",
					"nome": "FileOrDirName"
				}
			],
			[
				{
					"desc": "Type: String\nA library file or function name. For example, #Include <lib> and #Include <lib_func> would both include lib.ahk from one of the Lib folders. Variable references are not allowed.\n",
					"nome": "<LibName>"
				}
			]
		]
	},
	"#InputLevel": {
		"desc": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify an integer between 0 and 100.\n",
					"nome": "Level"
				}
			]
		]
	},
	"#MaxThreads": {
		"desc": "Sets the maximum number of simultaneous threads.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe maximum total number of threads that can exist simultaneously. Specifying a number higher than 255 is the same as specifying 255.\n",
					"nome": "Value"
				}
			]
		]
	},
	"#MaxThreadsBuffer": {
		"desc": "Causes some or all hotkeys to buffer rather than ignore keypresses when their #MaxThreadsPerHotkey limit has been reached.",
		"params": [
			[
				{
					"desc": "If omitted, it defaults to True. Otherwise, specify one of the following literal values:\nTrue or 1: All hotkey subroutines between here and the next #MaxThreadsBuffer False directive will buffer rather than ignore presses of their hotkeys whenever their subroutines are at their #MaxThreadsPerHotkey limit.\nFalse or 0: A hotkey press will be ignored whenever that hotkey is already running its maximum number of threads (usually 1, but this can be changed with #MaxThreadsPerHotkey).\n",
					"nome": "Setting"
				}
			]
		]
	},
	"#MaxThreadsPerHotkey": {
		"desc": "Sets the maximum number of simultaneous threads per hotkey or hotstring.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe maximum number of threads that can be launched for a given hotkey/hotstring subroutine (limit 255).\n",
					"nome": "Value"
				}
			]
		]
	},
	"#NoTrayIcon": {
		"desc": "Disables the showing of a tray icon.",
		"params": [

		]
	},
	"#Requires": {
		"desc": "Displays an error and quits if a version requirement is not met.",
		"params": [
			[
				{
					"desc": "If this does not begin with the word \"AutoHotkey\", an error message is shown and the program exits. This encourages clarity and reserves the directive for future uses. Other forks of AutoHotkey may support other names.\nOtherwise, the word \"AutoHotkey\" should be followed by any combination of the following, separated by spaces or tabs:\n",
					"nome": "Requirement"
				}
			]
		]
	},
	"#SingleInstance": {
		"desc": "Determines whether a script is allowed to run again when it is already running.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to Force. Otherwise, specify one of the following words:\nForce: Skips the dialog box and replaces the old instance automatically, which is similar in effect to the Reload function.\nIgnore: Skips the dialog box and leaves the old instance running. In other words, attempts to launch an already-running script are ignored.\nPrompt: Displays a dialog box asking whether to keep the old instance or replace it with the new one.\nOff: Allows multiple instances of the script to run concurrently.\n",
					"nome": "ForceIgnorePromptOff"
				}
			]
		]
	},
	"#SuspendExempt": {
		"desc": "Exempts subsequent hotkeys and hotstrings from suspension.",
		"params": [
			[
				{
					"desc": "If omitted, it defaults to True. Otherwise, specify one of the following literal values:\nTrue or 1: Enables exemption for subsequent hotkeys and hotstrings.\nFalse or 0: Disables exemption.\n",
					"nome": "Setting"
				}
			]
		]
	},
	"#UseHook": {
		"desc": "Forces the use of the hook to implement all or some keyboard hotkeys.",
		"params": [
			[
				{
					"desc": "If omitted, it defaults to True. Otherwise, specify one of the following literal values:\nTrue or 1: The keyboard hook will be used to implement all keyboard hotkeys between here and the next #UseHook False (if any).\nFalse or 0: Hotkeys will be implemented using the default method (RegisterHotkey() if possible; otherwise, the keyboard hook).\n",
					"nome": "Setting"
				}
			]
		]
	},
	"#Warn": {
		"desc": "Enables or disables warnings for specific conditions which may indicate an error, such as a typo or missing \"global\" declaration.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to All. Otherwise, specify the type of warning to enable or disable.\nVarUnset: Before the script starts to run, display a warning for the first reference to each variable which is never used in any of the following ways:\nLocalSameAsGlobal: Before the script starts to run, display a warning for each undeclared local variable which has the same name as a global variable. This is intended to prevent errors caused by forgetting to declare a global variable inside a function before attempting to assign to it. If the variable really was intended to be local, a declaration such as local x or static y can be used to suppress the warning.\nThis warning is disabled by default.\nUnreachable: Before the script starts to run, show a warning for each line that immediately follows a Return, Break, Continue, Throw or Goto at the same nesting level, unless that line is the target of a label. Any such line would never be executed.\nIf the code is intended to be unreachable - such as if a return has been used to temporarily disable a block of code, or a hotkey or hotstring has been temporarily disabled by commenting it out - consider commenting out the unreachable code as well. Alternatively, the warning can be suppressed by defining a label above the first unreachable line.\nAll: Apply the given WarningMode to all supported warning types.\n",
					"nome": "WarningType"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to MsgBox. Otherwise, specify a value indicating how warnings should be delivered.\nMsgBox: Show a message box describing the warning. Note that once the message box is dismissed, the script will continue as usual.\nStdOut: Send a description of the warning to stdout (the program's standard output stream), along with the filename and line number. This allows fancy editors such as SciTE to capture warnings without disrupting the script - the user can later jump to each offending line via the editor's output pane.\nOutputDebug: Send a description of the warning to the debugger for display. If a debugger is not active, this will have no effect. For more details, see OutputDebug.\nOff: Disable warnings of the given WarningType.\n",
					"nome": "WarningMode"
				}
			]
		]
	},
	"#WinActivateForce": {
		"desc": "Skips the gentle method of activating a window and goes straight to the forceful method.",
		"params": [

		]
	},
	"A_Clipboard": {
		"desc": "A_Clipboard is a built-in variable that reflects the current contents of the Windows clipboard if those contents can be expressed as text.",
		"params": [

		]
	},
	"A_HotkeyModifierTimeout": {
		"desc": "A_HotkeyModifierTimeout is a built-in variable that affects the behavior of Send with hotkey modifiers Ctrl, Alt, Win, and Shift. Specifically, it defines how long after a hotkey is pressed that its modifier keys are assumed to still be held down. This is used by Send to determine whether to push the modifier keys back down after having temporarily released them.",
		"params": [

		]
	},
	"A_MaxHotkeysPerInterval / A_HotkeyInterval": {
		"desc": "A_MaxHotkeysPerInterval and A_HotkeyInterval are built-in variables that control the rate of hotkey activations beyond which a warning dialog will be displayed.",
		"params": [

		]
	},
	"A_MenuMaskKey": {
		"desc": "A_MenuMaskKey is a built-in variable that controls which key is used to mask Win or Alt keyup events.",
		"params": [

		]
	},
	"Alphabetical Function Index": {
		"desc": "Click on a function name for details. Entries in large font are the most commonly used.",
		"params": [

		]
	},
	"Any": {
		"desc": "Any is the class at the root of AutoHotkey's type hierarchy. All other types are a sub-type of Any.",
		"params": [

		]
	},
	"Array Object": {
		"desc": "An Array object contains a list or sequence of values.",
		"params": [
			[
				{
					"desc": "Type: Integer\nA valid array index.\n",
					"nome": "Index"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe position to insert Value1 at. Subsequent values are inserted at Index+1, Index+2, etc. Specifying an index of 0 is the same as specifying Length + 1.\n",
					"nome": "Index"
				}
			],
			[
				{
					"desc": "One or more values to insert. To insert an array of values, pass theArray* as the last parameter.\n",
					"nome": "Value1 ..."
				}
			],
			[
				{
					"desc": "One or more values to insert. To insert an array of values, pass theArray* as the last parameter.\n",
					"nome": "Value ..."
				}
			],
			[
				{
					"desc": "Type: Integer\nThe index of the value or values to remove.\n",
					"nome": "Index"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe length of the range of values to remove. If omitted, one item is removed.\n",
					"nome": "Length"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe array index, typically the same as A_Index. This is present only in the two-parameter mode.\n",
					"nome": "Index"
				}
			],
			[
				{
					"desc": "The value (if there is no value, Value becomes unset).\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe maximum number of elements the array should be able to contain before it must be automatically expanded. If setting a value less than Length, elements are removed.\n",
					"nome": "MaxItems"
				}
			],
			[
				{
					"desc": "Type: Integer\nA valid array index; that is, an integer with absolute value between 1 and Length (inclusive).\nA negative index can be used to address elements in reverse, so that -1 is the last element, -2 is the second last element, and so on.\nAttempting to use an index which is out of bounds (such as zero, or if its absolute value is greater than the Length of the array) is considered an error and will cause an IndexError to be thrown.\n",
					"nome": "Index"
				}
			]
		]
	},
	"BlockInput": {
		"desc": "Disables or enables the user's ability to interact with the computer via keyboard and mouse.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nThis mode blocks all user inputs unconditionally. Specify one of the following values:\nOn or 1 (true): The user is prevented from interacting with the computer (mouse and keyboard input has no effect).\nOff or 0 (false): Input is re-enabled.\n",
					"nome": "OnOff"
				}
			],
			[
				{
					"desc": "Type: String\nThis mode only blocks user inputs while specific send and/or mouse functions are in progress. Specify one of the following words:\nSend: The user's keyboard and mouse input is ignored while a SendEvent is in progress (including Send and SendText if SendMode \"Event\" has been used). This prevents the user's keystrokes from disrupting the flow of simulated keystrokes. When the Send finishes, input is re-enabled (unless still blocked by a previous use of BlockInput \"On\").\nMouse: The user's keyboard and mouse input is ignored while a Click, MouseMove, MouseClick, or MouseClickDrag is in progress (the traditional SendEvent mode only). This prevents the user's mouse movements and clicks from disrupting the simulated mouse events. When the mouse action finishes, input is re-enabled (unless still blocked by a previous use of BlockInput \"On\").\nSendAndMouse: A combination of the above two modes.\nDefault: Turns off both the Send and the Mouse modes, but does not change the current state of input blocking. For example, if BlockInput \"On\" is currently in effect, using BlockInput \"Default\" will not turn it off.\n",
					"nome": "SendMouse"
				}
			],
			[
				{
					"desc": "Type: String\nThis mode only blocks the mouse cursor movement. Specify one of the following words:\nMouseMove: The mouse cursor will not move in response to the user's physical movement of the mouse (DirectInput applications are a possible exception). When a script first uses this function, the mouse hook is installed (if it is not already). The mouse hook will stay installed until the next use of the Suspend or Hotkey function, at which time it is removed if not required by any hotkeys or hotstrings (see #Hotstring NoMouse).\nMouseMoveOff: Allows the user to move the mouse cursor.\n",
					"nome": "MouseMove"
				}
			]
		]
	},
	"Break": {
		"desc": "Exits (terminates) any type of loop statement.",
		"params": [
			[
				{
					"desc": "If omitted or 1, this statement applies to the innermost loop in which it is enclosed. Otherwise, specify which loop this statement should apply to; either by label name or numeric nesting level. If a label is specified, it must point directly at a loop statement.\nLoopLabel must be a constant value - variables and expressions are not supported, with the exception of a single literal number or quoted string enclosed in parentheses. For example: break(\"outer\")\n",
					"nome": "LoopLabel"
				}
			]
		]
	},
	"Buffer Object": {
		"desc": "Encapsulates a block of memory for use with advanced techniques such as DllCall, structures, StrPut and raw file I/O.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe number of bytes to allocate. Corresponds to Buffer.Size.\nIf omitted, the Buffer is created with a null (zero) Ptr and zero Size.\n",
					"nome": "ByteCount"
				}
			],
			[
				{
					"desc": "Type: Integer\nSpecify a number between 0 and 255 to set each byte in the buffer to that number.\nThis should generally be omitted in cases where the buffer will be written into without first being read, as it has a time-cost proportionate to the number of bytes. If omitted, the memory of the buffer is not initialized; the value of each byte is arbitrary.\n",
					"nome": "FillByte"
				}
			]
		]
	},
	"CallbackCreate": {
		"desc": "Creates a machine-code address that when called, redirects the call to a function in the script.",
		"params": [
			[
				{
					"desc": "Type: Function Object\nA function object to call automatically whenever Address is called. The function also receives the parameters that were passed to Address.\nA closure or bound function can be used to differentiate between multiple callbacks which all call the same script function.\nThe callback retains a reference to the function object, and releases it when the script calls CallbackFree.\n",
					"nome": "Function"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, a new thread will be started each time Function is called, the standard calling convention will be used, and the parameters will be passed individually to Function. Otherwise, specify one or more of the following options. Separate each option from the next with a space (e.g. \"C Fast\").\nFast or F: Avoids starting a new thread each time Function is called. Although this performs better, it must be avoided whenever the thread from which Address is called varies (e.g. when the callback is triggered by an incoming message). This is because Function will be able to change global settings such as A_LastError and the last-found window for whichever thread happens to be running at the time it is called. For more information, see Remarks.\nCDecl or C: Makes Address conform to the \"C\" calling convention. This is typically omitted because the standard calling convention is much more common for callbacks. This option is ignored by 64-bit versions of AutoHotkey, which use the x64 calling convention.\n&: Causes the address of the parameter list (a single integer) to be passed to Function instead of the individual parameters. Parameter values can be retrieved by using NumGet. When using the standard 32-bit calling convention, ParamCount must specify the size of the parameter list in DWORDs (the number of bytes divided by 4).\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to Function.MinParams, which is usually the number of mandatory parameters in the definition of Function. Otherwise, specify the number of parameters that Address's caller will pass to it. In either case, ensure that the caller passes exactly this number of parameters.\n",
					"nome": "ParamCount"
				}
			]
		]
	},
	"CaretGetPos": {
		"desc": "Retrieves the current position of the caret (text insertion point).",
		"params": [
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates. The retrieved coordinates are relative to the active window's client area unless overridden by using CoordMode or A_CoordModeCaret.\n",
					"nome": "&OutputVarX, &OutputVarY"
				}
			]
		]
	},
	"Catch": {
		"desc": "Specifies one or more statements to execute if a value or error is thrown during execution of a Try statement.",
		"params": [
			[
				{
					"desc": "Type: Class\nThe class of value that should be caught, such as Error, TimeoutError or MyCustomError. This can also be a comma-delimited list of classes. Classes must be specified by their exact full name and not an arbitrary expression, as the Prototype of each class is resolved at load time. Any built-in or user-defined class can be used, even if it does not derive from Error.\nIf no classes are specified, the default is Error.\nTo catch anything at all, use catch Any.\nA load-time error is displayed if an invalid class name is used, or if a class is inaccessible due to the presence of a local variable with the same name.\n",
					"nome": "ErrorClass"
				}
			],
			[
				{
					"desc": "Type: Variable\nThe output variable in which to store the thrown value, which is typically an Error object. This cannot be a dynamic variable.\nIf omitted, the thrown value cannot be accessed directly, but can still be re-thrown by using Throw with no parameter.\n",
					"nome": "OutputVar"
				}
			],
			[
				{
					"desc": "The statements to execute if a value or error is thrown.\nBraces are generally not required if only a single statement is used. For details, see {...} (block).\n",
					"nome": "Statements"
				}
			]
		]
	},
	"Chr": {
		"desc": "Returns the string (usually a single character) corresponding to the character code indicated by the specified number.",
		"params": [
			[
				{
					"desc": "Type: Integer\nA Unicode character code between 0 and 0x10FFFF.\n",
					"nome": "Number"
				}
			]
		]
	},
	"Class Object": {
		"desc": "A Class object represents a class definition; it contains static methods and properties.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to \"\". Otherwise, specify the class name to assign to ClassObj.Prototype.__Class.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "Type: Class\nIf omitted, it defaults to Object. Otherwise, specify the base class. ClassObj.Base is set to this, while ClassObj.Prototype.Base is set to BaseClass.Prototype.\n",
					"nome": "BaseClass"
				}
			],
			[
				{
					"desc": "If specified, any other parameters are passed to static __New, as in ClassObj.__New(Args*).\n",
					"nome": "Args*"
				}
			]
		]
	},
	"Click": {
		"desc": "Clicks a mouse button at the specified coordinates. It can also hold down a mouse button, turn the mouse wheel, or move the mouse.",
		"params": [
			[
				{
					"desc": "Specify one or more of the following components: Coords, WhichButton, ClickCount, DownOrUp and/or Relative. If all components are omitted, a single left click is performed at the mouse cursor's current position.\nThe components may be spread across multiple parameters or combined into one or more strings. Each parameter may be either a single numeric component or a string containing zero or more components, where each component is separated from the next with at least one space, tab and/or comma (all within the string). For example, Click 100, 200, \"R D\" is equivalent to Click \"100 200 R D\" and both are valid. Parameters that are blank or omitted are ignored, as are extra commas.\nWarning: Click 100 200 would be equivalent to Click \"100200\", as the two numbers would be concatenated before the function is called.\nThe components can appear in any order except ClickCount, which must occur somewhere to the right of Coords, if present.\nCoords: If omitted, the cursor's current position is used. Otherwise, specify the X and Y coordinates to which the mouse cursor is moved prior to clicking. For example, Click \"100 200\" clicks the left mouse button at a specific position. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\nWhichButton: If omitted, it defaults to Left (the left mouse button). Otherwise, specify Left, Right, Middle (or just the first letter of each of these); or X1 (fourth button) or X2 (fifth button). For example, Click \"Right\" clicks the right mouse button at the mouse cursor's current position. Left and Right correspond to the primary button and secondary button. If the user swaps the buttons via system settings, the physical positions of the buttons are swapped but the effect stays the same.\nWhichButton can also be WheelUp or WU to turn the wheel upward (away from you), or WheelDown or WD to turn the wheel downward (toward you). WheelLeft (or WL) or WheelRight (or WR) may also be specified. ClickCount is the number of notches to turn the wheel. However, some applications do not obey a ClickCount value higher than 1 for the mouse wheel. For them, use the Click function multiple times by means such as Loop.\nClickCount: If omitted, it defaults to 1. Otherwise, specify the number of times to click the mouse button or turn the mouse wheel. For example, Click 2 performs a double-click at the mouse cursor's current position. If Coords is specified, ClickCount must appear after it. Specify zero (0) to move the mouse without clicking; for example, Click \"100 200 0\".\nDownOrUp: If omitted, each click consists of a down-event followed by an up-event. Otherwise, specify the word Down (or the letter D) to press the mouse button down without releasing it. Later, use the word Up (or the letter U) to release the mouse button. For example, Click \"Down\" presses down the left mouse button and holds it.\nRelative: If omitted, the X and Y coordinates will be used for absolute positioning. Otherwise, specify the word Rel or Relative to treat the coordinates as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X pixels to the right (left if negative) and Y pixels down (up if negative).\n",
					"nome": "Options"
				}
			]
		]
	},
	"ClipWait": {
		"desc": "Waits until the clipboard contains data.",
		"params": [
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, it will wait no longer than this many seconds. To wait for a fraction of a second, specify a floating-point number, for example, 0.25 to wait for a maximum of 250 milliseconds.\n",
					"nome": "Timeout"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0 (wait only for text or files). Otherwise, specify one of the following numbers to indicate what to wait for:\n0: The function is more selective, waiting specifically for text or files to appear (\"text\" includes anything that would produce text when you paste into Notepad).\n1: The function waits for data of any kind to appear on the clipboard.\nOther values are reserved for future use.\n",
					"nome": "WaitFor"
				}
			]
		]
	},
	"ClipboardAll": {
		"desc": "Creates an object containing everything on the clipboard (such as pictures and formatting).",
		"params": [
			[
				{
					"desc": "Type: Object or Integer\nA Buffer-like object or a pure integer which is the address of the binary data. The data must be in a specific format, so typically originates from a previous call to ClipboardAll. See example #2 below.\n",
					"nome": "Data"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number of bytes of data to use. This is optional when Data is an object.\n",
					"nome": "Size"
				}
			]
		]
	},
	"ComCall": {
		"desc": "Calls a native COM interface method by index.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe zero-based index of the method within the virtual function table.\nIndex corresponds to the position of the method within the original interface definition. Microsoft documentation usually lists methods in alphabetical order, which is not relevant. In order to determine the correct index, locate the original interface definition. This may be in a header file or type library.\nIt is important to take into account methods which are inherited from parent interfaces. Since all COM interfaces ultimately derive from IUnknown, the first three methods are always QueryInterface (0), AddRef (1) and Release (2). For example, IShellItem2 is an extension of IShellItem, which starts at index 3 and contains 5 methods, so IShellItem2's first method (GetPropertyStore) is at index 8.\nTip: For COM interfaces defined by Microsoft, try searching the Internet or Windows SDK for \"IInterfaceNameVtbl\" - for example, \"IUnknownVtbl\". Microsoft's own interface definitions are accompanied by this plain-C definition of the interface's virtual function table, which lists all methods explicitly, in the correct order.\nPassing an invalid index may cause undefined behaviour, including (but not limited to) program termination.\n",
					"nome": "Index"
				}
			],
			[
				{
					"desc": "Type: Integer, ComValue or Object\nThe target COM object; that is, a COM interface pointer. The pointer value can be passed directly or encapsulated within an object with the Ptr property, such as a ComValue with variant type VT_UNKNOWN.\nThe interface pointer is used to locate the address of the virtual function which implements the interface method, and is also passed as a parameter. This parameter is generally not explicitly present in languages which natively support interfaces, but is shown in the C style \"Vtbl\" definition.\nPassing an invalid pointer may cause undefined behaviour, including (but not limited to) program termination.\n",
					"nome": "ComObj"
				}
			],
			[
				{
					"desc": "Type: String\nEach of these pairs represents a single parameter to be passed to the method. The number of pairs is unlimited. For Type, see the DllCall types table. For Arg, specify the value to be passed to the method.\n",
					"nome": "Type1, Arg1"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the return type defaults to HRESULT, which is most the common return type for COM interface methods. Any result indicating failure causes an OSError to be thrown; therefore, the return type must not be omitted unless the actual return type is HRESULT.\nIf the method is of a type that does not return a value (the void return type in C), specify \"Int\" or any other numeric type without any suffix (except HRESULT), and ignore the return value. As the content of the return value register is arbitrary in such cases, an exception may or may not be thrown if ReturnType is omitted.\nOtherwise, specify one of the argument types from the DllCall types table. The asterisk suffix is also supported.\nAlthough ComCall supports the Cdecl keyword as per DllCall, it is generally not used by COM interface methods.\n",
					"nome": "ReturnType"
				}
			]
		]
	},
	"ComObjActive": {
		"desc": "Retrieves a registered COM object.",
		"params": [
			[
				{
					"desc": "Type: String\nCLSID or human-readable Prog ID of the COM object to retrieve.\n",
					"nome": "CLSID"
				}
			]
		]
	},
	"ComObjArray": {
		"desc": "Creates a SafeArray for use with COM.",
		"params": [
			[
				{
					"desc": "Type: Integer\nSee ComObjType for a list of possible values.\n",
					"nome": "VarType"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe size of each dimension. Arrays containing up to 8 dimensions are supported.\n",
					"nome": "CountN"
				}
			]
		]
	},
	"ComObjConnect": {
		"desc": "Connects a COM object's event source to the script, enabling events to be handled.",
		"params": [
			[
				{
					"desc": "Type: ComObject\nAn object which raises events.\nIf the object does not support the IConnectionPointContainer interface or type information about the object's class cannot be retrieved, an error message is shown. This can be suppressed or handled with try/catch.\nThe IProvideClassInfo interface is used to retrieve type information about the object's class if the object supports it. Otherwise, ComObjConnect attempts to retrieve type information via the object's IDispatch interface, which may be unreliable.\n",
					"nome": "ComObj"
				}
			],
			[
				{
					"desc": "Type: String or Object\nIf omitted, the object is \"disconnected\"; that is, the script will no longer receive notification of its events. Otherwise, specify a string to prefix to the event name to determine which global function to call when an event occurs, or an event sink object defining a static method for each event to be handled.\nNote: Nested functions are not supported in this mode, as names may be resolved after the current function returns. To use nested functions or closures, attach them to an object and pass the object as described below.\n",
					"nome": "PrefixOrSink"
				}
			]
		]
	},
	"ComObjFlags": {
		"desc": "Retrieves or changes flags which control a COM wrapper object's behaviour.",
		"params": [
			[
				{
					"desc": "Type: ComValue\nA COM wrapper object.\n",
					"nome": "ComObj"
				}
			],
			[
				{
					"desc": "Type: Integer\nNew values for the flags identified by Mask, or flags to add or remove.\n",
					"nome": "NewFlags"
				}
			],
			[
				{
					"desc": "Type: Integer\nA bitmask of flags to change.\n",
					"nome": "Mask"
				}
			]
		]
	},
	"ComObjFromPtr": {
		"desc": "Wraps a raw IDispatch pointer (COM object) for use by the script.",
		"params": [
			[
				{
					"desc": "Type: Integer\nA non-null interface pointer for IDispatch or a derived interface.\n",
					"nome": "DispPtr"
				}
			]
		]
	},
	"ComObjGet": {
		"desc": "Returns a reference to an object provided by a COM component.",
		"params": [
			[
				{
					"desc": "Type: String\nThe display name of the object to be retrieved. See MkParseDisplayName (Microsoft Docs) for more information.\n",
					"nome": "Name"
				}
			]
		]
	},
	"ComObjQuery": {
		"desc": "Queries a COM object for an interface or service.",
		"params": [
			[
				{
					"desc": "Type: ComValue, Object or Integer\nA COM wrapper object, an interface pointer, or an object with a Ptr property which returns an interface pointer.\n",
					"nome": "ComObj"
				}
			],
			[
				{
					"desc": "Type: String\nAn interface identifier (GUID) in the form \"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\".\n",
					"nome": "IID"
				}
			],
			[
				{
					"desc": "Type: String\nA service identifier in the same form as IID.\n",
					"nome": "SID"
				}
			]
		]
	},
	"ComObjType": {
		"desc": "Retrieves type information from a COM object.",
		"params": [
			[
				{
					"desc": "Type: ComValue\nA wrapper object containing a COM object or typed value.\n",
					"nome": "ComObj"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, an integer variant type code indicating the type of value contained by the COM wrapper object will be retrieved. Otherwise, specify one of the following strings indicating the type information to retrieve:\nName: The name of the object's default interface.\nIID: The globally unique identifier (GUID) of the object's default interface.\nClass: The object's class name. Note that this is not the same as a Prog ID (a Prog ID is a name used to identify the class in the system registry, or for ComObject).\nCLSID: The globally unique identifier (GUID) of the object's class. Classes are often registered by CLSID under the HKCR\\CLSID registry key.\n",
					"nome": "InfoType"
				}
			]
		]
	},
	"ComObjValue": {
		"desc": "Retrieves the value or pointer stored in a COM wrapper object.",
		"params": [
			[
				{
					"desc": "Type: ComValue\nA wrapper object containing a COM object or typed value.\n",
					"nome": "ComObj"
				}
			]
		]
	},
	"ComObject": {
		"desc": "Creates a COM object.",
		"params": [
			[
				{
					"desc": "Type: String\nCLSID or human-readable Prog ID of the COM object to create.\n",
					"nome": "CLSID"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to \"{00020400-0000-0000-C000-000000000046}\" (IID_IDispatch). Otherwise, specify the identifier of the interface to return. In most cases this is omitted.\n",
					"nome": "IID"
				}
			]
		]
	},
	"ComValue": {
		"desc": "Wraps a value, SafeArray or COM object for use by the script or for passing to a COM method.",
		"params": [
			[
				{
					"desc": "Type: Integer\nAn integer indicating the type of value. See ComObjType for a list of types.\n",
					"nome": "VarType"
				}
			],
			[
				{
					"desc": "The value to wrap.\nIf this is a pure integer and VarType is not VT_R4, VT_R8, VT_DATE or VT_CY, its value is used directly; in particular, VT_BSTR, VT_DISPATCH and VT_UNKNOWN can be initialized with a pointer value.\nIn any other case, the value is copied into a temporary VARIANT using the same rules as normal COM methods calls. If the source variant type is not equal to VarType, conversion is attempted by calling VariantChangeType with a wFlags value of 0. An exception is thrown if conversion fails.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nFlags affecting the behaviour of the wrapper object; see ComObjFlags for details.\n",
					"nome": "Flags"
				}
			]
		]
	},
	"Continue": {
		"desc": "Skips the rest of a loop statement's current iteration and begins a new one.",
		"params": [
			[
				{
					"desc": "If omitted or 1, this statement applies to the innermost loop in which it is enclosed. Otherwise, specify which loop this statement should apply to; either by label name or numeric nesting level. If a label is specified, it must point directly at a loop statement.\nLoopLabel must be a constant value - variables and expressions are not supported, with the exception of a single literal number or quoted string enclosed in parentheses. For example: continue(\"outer\")\n",
					"nome": "LoopLabel"
				}
			]
		]
	},
	"Control Functions": {
		"desc": "Functions to retrieve information about a control, or make a variety of changes to a control. Click on a function name for details.",
		"params": [

		]
	},
	"ControlAddItem": {
		"desc": "Adds the specified string as a new entry at the bottom of a ListBox or ComboBox.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to add.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlChooseIndex": {
		"desc": "Sets the selection in a ListBox, ComboBox or Tab control to be the Nth item.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe index of the item, where 1 is the first item, 2 is the second, etc. To deselect all entries in a ListBox or ComboBox, specify 0.\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlChooseString": {
		"desc": "Sets the selection in a ListBox or ComboBox to be the first entry whose leading part matches the specified string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to choose. The search is not case-sensitive. For example, if a ListBox/ComboBox contains the item \"UNIX Text\", specifying the word \"unix\" (lowercase) would be enough to select it.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlClick": {
		"desc": "Sends a mouse button or mouse wheel event to a control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf omitted, the target window itself will be clicked. Otherwise, use one of the following modes.\nMode 1 (Position): Specify the X and Y coordinates relative to the upper left corner of the target window's client area. The X coordinate must precede the Y coordinate and there must be at least one space or tab between them. For example: \"X55 Y33\". If there is a control at the specified coordinates, it will be sent the click-event at those exact coordinates. If there is no control, the target window itself will be sent the event (which might have no effect depending on the nature of the window).\nNote: In mode 1, the X and Y option letters of the Options parameter are ignored.\nMode 2 (Control): Specify the control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\nBy default, mode 2 takes precedence over mode 1. For example, in the unlikely event that there is a control whose text or ClassNN has the format \"Xnnn Ynnn\", it would be acted upon by mode 2. To override this and use mode 1 unconditionally, specify the word Pos in Options as in the following example: ControlClick \"x255 y152\", WinTitle,,,, \"Pos\".\n",
					"nome": "Control-or-Pos"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to Left (the left mouse button). Otherwise, specify the button to click or the rotate/push direction of the mouse wheel.\nButton: Left, Right, Middle (or just the first letter of each of these); or X1 (fourth button) or X2 (fifth button).\nMouse wheel: Specify WheelUp or WU to turn the wheel upward (away from you); specify WheelDown or WD to turn the wheel downward (toward you). Specify WheelLeft (or WL) or WheelRight (or WR) to push the wheel left or right, respectively. ClickCount is the number of notches to turn the wheel.\n",
					"nome": "WhichButton"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify the number of times to click the mouse button or turn the mouse wheel.\n",
					"nome": "ClickCount"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, each click consists of a down-event followed by an up-event, and occurs at the center of the control when mode 2 is in effect. Otherwise, specify a series of one or more of the following options. For example: \"d x50 y25\".\nNA: May improve reliability. See reliability below.\nD: Press the mouse button down but do not release it (i.e. generate a down-event). If both the D and U options are absent, a complete click (down and up) will be sent.\nU: Release the mouse button (i.e. generate an up-event). This option should not be present if the D option is already present (and vice versa).\nPos: Specify the word Pos anywhere in Options to unconditionally use the X/Y positioning mode as described in the Control-or-Pos parameter above.\nXn: Specify for n the X position to click at, relative to the control's upper left corner. If unspecified, the click will occur at the horizontal-center of the control.\nYn: Specify for n the Y position to click at, relative to the control's upper left corner. If unspecified, the click will occur at the vertical-center of the control.\nUse decimal (not hexadecimal) numbers for the X and Y options.\n",
					"nome": "Options"
				}
			]
		]
	},
	"ControlDeleteItem": {
		"desc": "Deletes the specified entry number from a ListBox or ComboBox.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe index of the item, where 1 is the first entry, 2 is the second, etc.\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlFindItem": {
		"desc": "Returns the entry number of a ListBox or ComboBox that is a complete match for the specified string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to find. The search is case-insensitive. Unlike ControlChooseString, the entry's entire text must match, not just the leading part.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlFocus": {
		"desc": "Sets input focus to a given control on a window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetChecked": {
		"desc": "Returns a non-zero value if the checkbox or radio button is checked.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetChoice": {
		"desc": "Returns the name of the currently selected entry in a ListBox or ComboBox.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetClassNN": {
		"desc": "Returns the ClassNN (class name and sequence number) of the specified control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetEnabled": {
		"desc": "Returns a non-zero value if the specified control is enabled.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetFocus": {
		"desc": "Retrieves which control of the target window has keyboard focus, if any.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetHwnd": {
		"desc": "Returns the unique ID number of the specified control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetIndex": {
		"desc": "Returns the index of the currently selected entry or tab in a ListBox, ComboBox or Tab control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetItems": {
		"desc": "Returns an array of items/rows from a ListBox, ComboBox, or DropDownList.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetPos": {
		"desc": "Retrieves the position and size of a control.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates (in pixels) of the control's upper left corner. These coordinates are relative to the upper-left corner of the target window's client area and thus are the same as those used by ControlMove.\n",
					"nome": "&OutX, &OutY"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the control's width and height (in pixels).\n",
					"nome": "&OutWidth, &OutHeight"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetStyle / ControlGetExStyle": {
		"desc": "Returns an integer representing the style or extended style of the specified control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetText": {
		"desc": "Retrieves text from a control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlGetVisible": {
		"desc": "Returns a non-zero value if the specified control is visible.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlHide": {
		"desc": "Hides the specified control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlHideDropDown": {
		"desc": "Hides the drop-down list of a ComboBox control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlMove": {
		"desc": "Moves or resizes a control.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf either is omitted, the control's position in that dimension will not be changed. Otherwise, specify the X and Y coordinates (in pixels) of the upper left corner of the control's new location. The coordinates are relative to the upper-left corner of the target window's client area; ControlGetPos can be used to determine them.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf either is omitted, the control's size in that dimension will not be changed. Otherwise, specify the new width and height of the control (in pixels).\n",
					"nome": "Width, Height"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlSend / ControlSendText": {
		"desc": "Sends simulated keystrokes or text to a window or control.",
		"params": [
			[
				{
					"desc": "Type: String\nThe sequence of keys to send (see the Send function for details). The rate at which characters are sent is determined by SetKeyDelay.\nUnlike the Send function, mouse clicks cannot be sent by ControlSend. Use ControlClick for that.\n",
					"nome": "Keys"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf omitted, the keystrokes will be sent directly to the target window instead of one of its controls (see Automating Winamp for an example). Otherwise, specify the control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlSetChecked": {
		"desc": "Turns on (checks) or turns off (unchecks) a checkbox or radio button.",
		"params": [
			[
				{
					"desc": "Type: Integer\nOne of the following values:\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlSetEnabled": {
		"desc": "Enables or disables the specified control.",
		"params": [
			[
				{
					"desc": "Type: Integer\nOne of the following values:\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlSetStyle / ControlSetExStyle": {
		"desc": "Changes the style or extended style of the specified control, respectively.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nPass a positive integer to completely overwrite the window's style; that is, to set it to Value.\nTo easily add, remove or toggle styles, pass a numeric string prefixed with a plus sign (+), minus sign (-) or caret (^), respectively. The new style value is calculated as shown below (where CurrentStyle could be retrieved with ControlGetStyle, ControlGetExStyle, WinGetStyle or WinGetExStyle):\nIf Value is a negative integer, it is treated the same as the corresponding numeric string.\nTo use the + or ^ prefix literally in an expression, the prefix or value must be enclosed in quote marks. For example: WinSetStyle(\"+0x80\") or WinSetStyle(\"^\" StylesToToggle). This is because the expression +123 produces 123 (without a prefix) and ^123 is a syntax error.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlSetText": {
		"desc": "Changes the text of a control.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the control is made blank. Otherwise, specify the new text to set into the control.\n",
					"nome": "NewText"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlShow": {
		"desc": "Shows the specified control if it was previously hidden.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"ControlShowDropDown": {
		"desc": "Shows the drop-down list of a ComboBox control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"CoordMode": {
		"desc": "Sets coordinate mode for various built-in functions to be relative to either the active window or the screen.",
		"params": [
			[
				{
					"desc": "Type: String\nSpecify one of the following words to indicate the type of target to affect:\nToolTip: Affects ToolTip.\nPixel: Affects PixelGetColor, PixelSearch, and ImageSearch.\nMouse: Affects MouseGetPos, Click, MouseMove, MouseClick, and MouseClickDrag.\nCaret: Affects CaretGetPos.\nMenu: Affects the Menu.Show method when coordinates are specified for it.\n",
					"nome": "TargetType"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to Screen. Otherwise, specify one of the following words to indicate the area to which TargetType should be relative:\nScreen: Coordinates are relative to the desktop (entire screen).\nWindow: Coordinates are relative to the active window.\nClient: Coordinates are relative to the active window's client area, which excludes the window's title bar, menu (if it has a standard one) and borders. Client coordinates are less dependent on OS version and theme.\n",
					"nome": "RelativeTo"
				}
			]
		]
	},
	"Critical": {
		"desc": "Prevents the current thread from being interrupted by other threads, or enables it to be interrupted.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to On. Otherwise, specify one of the following:\nOn: The current thread is made critical, meaning that it cannot be interrupted by another thread.\nOff: The current thread immediately becomes interruptible, regardless of the settings of Thread Interrupt. See Critical Off for details.\n(Numeric): Specify a positive number to turn on Critical but also change the number of milliseconds between checks of the internal message queue. See Message Check Interval for details. Specifying 0 turns off Critical. Specifying -1 turns on Critical but disables message checks.\n",
					"nome": "OnOffNumeric"
				}
			]
		]
	},
	"DateAdd": {
		"desc": "Adds or subtracts time from a date-time value.",
		"params": [
			[
				{
					"desc": "Type: String\nA date-time stamp in the YYYYMMDDHH24MISS format.\n",
					"nome": "DateTime"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nThe amount of time to add, as an integer or floating-point number. Specify a negative number to perform subtraction.\n",
					"nome": "Time"
				}
			],
			[
				{
					"desc": "Type: String\nThe meaning of the Time parameter. TimeUnits may be one of the following strings (or just the first letter): Seconds, Minutes, Hours or Days.\n",
					"nome": "TimeUnits"
				}
			]
		]
	},
	"DateDiff": {
		"desc": "Compares two date-time values and returns the difference.",
		"params": [
			[
				{
					"desc": "Type: String\nDate-time stamps in the YYYYMMDDHH24MISS format.\nIf DateTime1 is earlier than DateTime2, the result is a negative number.\nIf either parameter is an empty string, the current local date and time (A_Now) is used.\n",
					"nome": "DateTime1"
				}
			],
			[
				{
					"desc": "Type: String\nUnits to measure the difference in. TimeUnits may be one of the following strings (or just the first letter): Seconds, Minutes, Hours or Days.\n",
					"nome": "DateTime2"
				}
			]
		]
	},
	"DetectHiddenText": {
		"desc": "Determines whether invisible text in a window is \"seen\" for the purpose of finding the window. This affects windowing functions such as WinExist and WinActivate.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nSpecify one of the following values:\n1 or True: Hidden text is detected.\n0 or False: Hidden text is not detected.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"DetectHiddenWindows": {
		"desc": "Determines whether invisible windows are \"seen\" by the script.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nSpecify one of the following values:\n1 or True: Hidden windows are detected.\n0 or False: Hidden windows are not detected, except by the WinShow function.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"DirCopy": {
		"desc": "Copies a folder along with all its sub-folders and files (similar to xcopy).",
		"params": [
			[
				{
					"desc": "Type: String\nName of the source directory (with no trailing backslash), which is assumed to be in A_WorkingDir if an absolute path isn't specified. For example: C:\\My Folder\nIf supported by the OS, Source can also be the path of a zip file, in which case its content will be copied to the destination directory. This has been confirmed to work on Windows 7 and Windows 11.\n",
					"nome": "Source"
				}
			],
			[
				{
					"desc": "Type: String\nName of the destination directory (with no trailing baskslash), which is assumed to be in A_WorkingDir if an absolute path isn't specified. For example: C:\\Copy of My Folder\n",
					"nome": "Dest"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify one of the following numbers to indicate whether to overwrite files if they already exist:\n0: Do not overwrite existing files. The operation will fail and have no effect if Dest already exists as a file or directory.\n1: Overwrite existing files. However, any files or subfolders inside Dest that do not have a counterpart in Source will not be deleted.\nOther values are reserved for future use.\n",
					"nome": "Overwrite"
				}
			]
		]
	},
	"DirCreate": {
		"desc": "Creates a folder.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the directory to create, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "DirName"
				}
			]
		]
	},
	"DirDelete": {
		"desc": "Deletes a folder.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the directory to delete, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "DirName"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf blank or omitted, it defaults to 0 (false). Otherwise, specify one of the following values to indicate whether to recurse into subdirectories:\n0 or False: Do not remove files and sub-directories contained in DirName. In this case, if DirName is not empty, no action is taken and an exception is thrown.\n1 or True: Remove all files and subdirectories (like the Windows command \"rmdir /S\").\n",
					"nome": "Recurse"
				}
			]
		]
	},
	"DirExist": {
		"desc": "Checks for the existence of a folder and returns its attributes.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path, folder name, or file pattern to check. FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "FilePattern"
				}
			]
		]
	},
	"DirMove": {
		"desc": "Moves a folder along with all its sub-folders and files. It can also rename a folder.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the source directory (with no trailing backslash), which is assumed to be in A_WorkingDir if an absolute path isn't specified. For example: C:\\My Folder\n",
					"nome": "Source"
				}
			],
			[
				{
					"desc": "Type: String\nThe new path and name of the directory (with no trailing baskslash), which is assumed to be in A_WorkingDir if an absolute path isn't specified. For example: D:\\My Folder.\nNote: Dest is the actual path and name that the directory will have after it is moved; it is not the directory into which Source is moved (except for the known limitation mentioned below).\n",
					"nome": "Dest"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to 0. Otherwise, specify one of the following values to indicate whether to overwrite or rename existing files:\n0: Do not overwrite existing files. The operation will fail if Dest already exists as a file or directory.\n1: Overwrite existing files. However, any files or subfolders inside Dest that do not have a counterpart in Source will not be deleted. Known limitation: If Dest already exists as a folder and it is on the same volume as Source, Source will be moved into it rather than overwriting it. To avoid this, see the next option.\n2: The same as mode 1 above except that the limitation is absent.\nR: Rename the directory rather than moving it. Although renaming normally has the same effect as moving, it is helpful in cases where you want \"all or none\" behavior; that is, when you don't want the operation to be only partially successful when Source or one of its files is locked (in use). Although this method cannot move Source onto a different volume, it can move it to any other directory on its own volume. The operation will fail if Dest already exists as a file or directory.\n",
					"nome": "OverwriteOrRename"
				}
			]
		]
	},
	"DirSelect": {
		"desc": "Displays a standard dialog that allows the user to select a folder.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the dialog's initial selection will be the user's My Documents folder (or possibly My Computer). A CLSID folder such as \"::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\" (i.e. My Computer) may be specified start navigation at a specific special folder.\nOtherwise, the most common usage of this parameter is an asterisk followed immediately by the absolute path of the drive or folder to be initially selected. For example, \"*C:\\\" would initially select the C drive. Similarly, \"*C:\\My Folder\" would initially select that particular folder.\nThe asterisk indicates that the user is permitted to navigate upward (closer to the root) from the starting folder. Without the asterisk, the user would be forced to select a folder inside StartingFolder (or StartingFolder itself). One benefit of omitting the asterisk is that StartingFolder is initially shown in a tree-expanded state, which may save the user from having to click the first plus sign.\nIf the asterisk is present, upward navigation may optionally be restricted to a folder other than Desktop. This is done by preceding the asterisk with the absolute path of the uppermost folder followed by exactly one space or tab. For example, \"C:\\My Folder *C:\\My Folder\\Projects\" would not allow the user to navigate any higher than C:\\My Folder (but the initial selection would be C:\\My Folder\\Projects).\n",
					"nome": "StartingFolder"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following numbers:\n0: The options below are all disabled (except on Windows 2000, where the \"make new folder\" button might appear anyway).\n1: A button is provided that allows the user to create new folders.\nAdd 2 to the above number to provide an edit field that allows the user to type the name of a folder. For example, a value of 3 for this parameter provides both an edit field and a \"make new folder\" button.\nAdd 4 to the above number to omit the BIF_NEWDIALOGSTYLE property. Adding 4 ensures that DirSelect will work properly even in a Preinstallation Environment like WinPE or BartPE. However, this prevents the appearance of a \"make new folder\" button.\nIf the user types an invalid folder name in the edit field, SelectedFolder will be set to the folder selected in the navigation tree rather than what the user entered.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to \"Select Folder - \" A_ScriptName (i.e. the name of the current script). Otherwise, specify the text displayed in the window to instruct the user what to do. \n",
					"nome": "Prompt"
				}
			]
		]
	},
	"DllCall": {
		"desc": "Calls a function inside a DLL, such as a standard Windows API function.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nThe DLL or EXE file name followed by a backslash and the name of the function. For example: \"MyDLL\\MyFunction\" (the file extension \".dll\" is the default when omitted). If an absolute path isn't specified, DllFile is assumed to be in the system's PATH or A_WorkingDir. Note that DllCall expects a path with backslashes (\\). Forward slashes (/) are not supported.\nDllFile may be omitted when calling a function that resides in User32.dll, Kernel32.dll, ComCtl32.dll, or Gdi32.dll. For example, \"User32\\IsWindowVisible\" produces the same result as \"IsWindowVisible\".\nIf no function can be found by the given name, a \"W\" (Unicode) suffix is automatically appended. For example, \"MessageBox\" is the same as \"MessageBoxW\".\nPerformance can be dramatically improved when making repeated calls to a DLL by loading it beforehand.\nThis parameter may also consist solely of an integer, which is interpreted as the address of the function to call. Sources of such addresses include COM and CallbackCreate.\nIf this parameter is an object, the value of the object's Ptr property is used. If no such property exists, a PropertyError is thrown.\n",
					"nome": "[DllFile\\]Function"
				}
			],
			[
				{
					"desc": "Type: String\nEach of these pairs represents a single parameter to be passed to the function. The number of pairs is unlimited. For Type, see the types table below. For Arg, specify the value to be passed to the function.\n",
					"nome": "Type1, Arg1"
				}
			],
			[
				{
					"desc": "Type: String\nThe word Cdecl is normally omitted because most functions use the standard calling convention rather than the \"C\" calling convention (functions such as wsprintf that accept a varying number of arguments are one exception to this). Note that most object-oriented C++ functions use the thiscall convention, which is not supported.\nIf present, the word Cdecl should be listed before the return type (if any). Separate each word from the next with a space or tab. For example: \"Cdecl Str\".\nSince a separate \"C\" calling convention does not exist in 64-bit code, Cdecl may be specified but has no effect on 64-bit builds of AutoHotkey.\n[v2.1-alpha.3+]: Specifying Cdecl has no effect even on 32-bit builds, and can always be omitted. Prior versions used the Cdecl option only to determine whether to check the stack pointer (ESP) after the call. This is now done unconditionally, but functions which do not accept parameters are assumed to be Cdecl (as either call would not change ESP).\nReturnType: If the function returns a 32-bit signed integer (Int), BOOL, or nothing at all, ReturnType may be omitted. Otherwise, specify one of the argument types from the types table below. The asterisk suffix is also supported.\n",
					"nome": "Cdecl ReturnType"
				}
			]
		]
	},
	"Download": {
		"desc": "Downloads a file from the Internet.",
		"params": [
			[
				{
					"desc": "Type: String\nURL of the file to download. For example, \"https://someorg.org\" might retrieve the welcome page for that organization.\n",
					"nome": "URL"
				}
			],
			[
				{
					"desc": "Type: String\nSpecify the name of the file to be created locally, which is assumed to be in A_WorkingDir if an absolute path isn't specified. Any existing file will be overwritten by the new file.\nThis function downloads to a file. To download to a variable instead, see the example below.\n",
					"nome": "Filename"
				}
			]
		]
	},
	"Drive Functions": {
		"desc": "Functions for retrieving various types of information about the computer's drive(s), or making a variety of changes to a drive. Click on a function name for details.",
		"params": [

		]
	},
	"DriveEject / DriveRetract": {
		"desc": "Ejects or retracts the tray of the specified CD/DVD drive, or ejects a removable drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter optionally followed by a colon or a colon and backslash. For example, D, D: or D:\\.\nThis can also be a device path in the form \\\\?\\Volume{...}, which can be discovered by running mountvol at the command line. In this case the drive is not required to be assigned a drive letter.\nIf omitted, it defaults to the first CD/DVD drive found by iterating from A to Z. An exception is thrown if no drive is found.\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveGetCapacity": {
		"desc": "Returns the total capacity of the drive which contains the specified path, in megabytes.",
		"params": [
			[
				{
					"desc": "Type: String\nAny path contained by the drive (might also work on UNC paths and mapped drives).\n",
					"nome": "Path"
				}
			]
		]
	},
	"DriveGetFileSystem": {
		"desc": "Returns the type of the specified drive's file system.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\\share1.\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveGetLabel": {
		"desc": "Returns the volume label of the specified drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\\share1.\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveGetList": {
		"desc": "Returns a string of letters, one character for each drive letter in the system.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, all drive types are retrieved. Otherwise, specify one of the following words to retrieve only a specific type of drive: CDROM, REMOVABLE, FIXED, NETWORK, RAMDISK, UNKNOWN.\n",
					"nome": "Type"
				}
			]
		]
	},
	"DriveGetSerial": {
		"desc": "Returns the volume serial number of the specified drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash, or a UNC name such \\server1\\share1.\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveGetSpaceFree": {
		"desc": "Returns the free disk space of the drive which contains the specified path, in megabytes.",
		"params": [
			[
				{
					"desc": "Type: String\nAny path contained by the drive (might also work on UNC paths and mapped drives).\n",
					"nome": "Path"
				}
			]
		]
	},
	"DriveGetStatus": {
		"desc": "Returns the status of the drive which contains the specified path.",
		"params": [
			[
				{
					"desc": "Type: String\nAny path contained by the drive (might also work on UNC paths and mapped drives).\n",
					"nome": "Path"
				}
			]
		]
	},
	"DriveGetStatusCD": {
		"desc": "Returns the media status of the specified CD/DVD drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon. If omitted, the default CD/DVD drive will be used.\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveGetType": {
		"desc": "Returns the type of the drive which contains the specified path.",
		"params": [
			[
				{
					"desc": "Type: String\nAny path contained by the drive (might also work on UNC paths and mapped drives).\n",
					"nome": "Path"
				}
			]
		]
	},
	"DriveLock": {
		"desc": "Prevents the eject feature of the specified drive from working.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash (might also work on UNC paths and mapped drives).\n",
					"nome": "Drive"
				}
			]
		]
	},
	"DriveSetLabel": {
		"desc": "Changes the volume label of the specified drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash (might also work on UNC paths and mapped drives).\n",
					"nome": "Drive"
				}
			],
			[
				{
					"desc": "Type: String\nThe new label to set. If omitted, the drive will have no label.\n",
					"nome": "NewLabel"
				}
			]
		]
	},
	"DriveUnlock": {
		"desc": "Restores the eject feature of the specified drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe drive letter followed by a colon and an optional backslash (might also work on UNC paths and mapped drives).\n",
					"nome": "Drive"
				}
			]
		]
	},
	"Edit": {
		"desc": "Opens the current script (or a specified file) for editing in the default editor.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path and name of the file to open for editing. If omitted, it defaults to the main file of the current script (A_ScriptFullPath). Relative paths are relative to the script directory (A_ScriptDir).\n",
					"nome": "Filename [v2.1-alpha.1+]"
				}
			]
		]
	},
	"EditGetCurrentCol": {
		"desc": "Returns the column number in an Edit control where the caret (text insertion point) resides.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"EditGetCurrentLine": {
		"desc": "Returns the line number in an Edit control where the caret (text insert point) resides.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"EditGetLine": {
		"desc": "Returns the text of the specified line in an Edit control.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe line number. Line 1 is the first line.\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"EditGetLineCount": {
		"desc": "Returns the number of lines in an Edit control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"EditGetSelectedText": {
		"desc": "Returns the selected text in an Edit control.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"EditPaste": {
		"desc": "Pastes the specified string at the caret (text insertion point) in an Edit control.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to paste.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"Else": {
		"desc": "Specifies one or more statements to execute if the associated statement's body did not execute.",
		"params": [

		]
	},
	"Enumerator Object": {
		"desc": "An enumerator is a type of function object which is called repeatedly to enumerate a sequence of values.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nOne or more references to output variables for the enumerator to assign values.\n",
					"nome": "&OutputVar1, &OutputVar2"
				}
			]
		]
	},
	"EnvGet": {
		"desc": "Retrieves an environment variable.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the environment variable to retrieve. For example: Path := EnvGet(\"Path\").\n",
					"nome": "EnvVarName"
				}
			]
		]
	},
	"EnvSet": {
		"desc": "Writes a value to a variable contained in the environment.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the environment variable to use, e.g. \"COMSPEC\" or \"PATH\".\n",
					"nome": "EnvVar"
				}
			],
			[
				{
					"desc": "Type: String\nValue to set the environment variable to. If omitted, the environment variable is deleted.\n",
					"nome": "Value"
				}
			]
		]
	},
	"Error Object": {
		"desc": "Error objects are thrown by built-in code when a runtime error occurs, and may also be thrown explicitly by the script.",
		"params": [
			[
				{
					"desc": "",
					"nome": "File (Line) : [What] SourceCode`r`n"
				}
			],
			[
				{
					"desc": "",
					"nome": "> What`r`n"
				}
			],
			[
				{
					"desc": "",
					"nome": "... N more"
				}
			]
		]
	},
	"Exit": {
		"desc": "Exits the current thread.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0 (zero is traditionally used to indicate success). Otherwise, specify an integer between -2147483648 and 2147483647 that is returned to its caller when the script exits. This code is accessible to any program that spawned the script, such as another script (via RunWait) or a batch (.bat) file.\n",
					"nome": "ExitCode"
				}
			]
		]
	},
	"ExitApp": {
		"desc": "Terminates the script.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0 (zero is traditionally used to indicate success). Otherwise, specify an integer between -2147483648 and 2147483647 that is returned to its caller when the script exits. This code is accessible to any program that spawned the script, such as another script (via RunWait) or a batch (.bat) file.\n",
					"nome": "ExitCode"
				}
			]
		]
	},
	"File Object": {
		"desc": "Provides an interface for file input/output. FileOpen returns an object of this type.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe maximum number of characters to read. If omitted, the rest of the file is read and returned as one string. If the File object was created from a handle to a non-seeking device such as a console buffer or pipe, omitting this parameter may cause the method to fail or return only what data is currently available.\n",
					"nome": "Characters"
				}
			],
			[
				{
					"desc": "Type: String\nA string to write.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String\nAn optional string to write.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nA number to write.\n",
					"nome": "Num"
				}
			],
			[
				{
					"desc": "Type: Object or Integer\nThe Buffer-like object or memory address which will receive the data.\nReading into a Buffer is recommended. If Bytes is omitted, it defaults to the size of the buffer. An exception is thrown if Bytes exceeds the size of the buffer.\nIf a memory address is passed, Bytes must also be specified.\n",
					"nome": "Buffer"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe maximum number of bytes to read. This is optional when Buffer is an object; otherwise, it is required.\n",
					"nome": "Bytes"
				}
			],
			[
				{
					"desc": "Type: Object, String or Integer\nA Buffer-like object or string containing binary data, or a memory address. If an object or string is specified, Bytes is optional and defaults to the size of the buffer or string. Otherwise, Bytes must also be specified.\n",
					"nome": "Data"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number of bytes to write. This is optional when Data is an object or string; otherwise, it is required.\n",
					"nome": "Bytes"
				}
			],
			[
				{
					"desc": "Type: Integer\nDistance to move, in bytes. Lower values are closer to the beginning of the file.\n",
					"nome": "Distance"
				}
			],
			[
				{
					"desc": "Type: Integer\nStarting point for the file pointer move. Must be one of the following:\nIf omitted, Origin defaults to SEEK_END when Distance is negative and SEEK_SET otherwise.\n",
					"nome": "Origin"
				}
			]
		]
	},
	"FileAppend": {
		"desc": "Writes text or binary data to the end of a file (first creating the file, if necessary).",
		"params": [
			[
				{
					"desc": "Type: String or Object\nIf blank or omitted, Filename will be created as an empty file (but if the file already exists, its modification time will be updated). Otherwise, specify the text or raw binary data to append to the file. Text may include linefeed characters (`n) to start new lines. In addition, a single long line can be broken up into several shorter ones by means of a continuation section.\nA Buffer-like object may be passed to append raw binary data. If a file is created, a byte order mark (BOM) is written only if \"UTF-8\" or \"UTF-16\" has been specified within Options. The default encoding is ignored and the data contained by the object is written as-is, regardless of Options. Any object which implements Ptr and Size properties may be used.\n",
					"nome": "Text"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the output file of the innermost enclosing file-reading loop will be used (if available). Otherwise, specify the name of the file to be appended, which is assumed to be in A_WorkingDir if an absolute path isn't specified. The destination directory must already exist.\nStandard Output (stdout): Specifying an asterisk (*) for Filename causes Text to be sent to standard output (stdout). Such text can be redirected to a file, piped to another EXE, or captured by fancy text editors. For example, the following would be valid if typed at a command prompt:\nHowever, text sent to stdout will not appear at the command prompt it was launched from. This can be worked around by 1) compiling the script with the Ahk2Exe ConsoleApp directive, or 2) piping a script's output to another command or program. For example:\nSpecifying two asterisks (**) for Filename causes Text to be sent to the standard error stream (stderr).\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nZero or more of the following strings. Separate each option from the next with a single space or tab. For example: \"`n UTF-8\"\nEncoding: Specify any of the encoding names accepted by FileEncoding (excluding the empty string) to use that encoding if the file lacks a UTF-8 or UTF-16 byte order mark. If omitted, it defaults to A_FileEncoding (unless Text is an object, in which case no byte order mark is written).\nRAW: Specify the word RAW (case-insensitive) to write the exact bytes contained by Text to the file as-is, without any conversion. This option overrides any previously specified encoding and vice versa. If Text is not an object, the data size is always a multiple of 2 bytes due to the use of UTF-16 strings.\n`n (a linefeed character): Inserts a carriage return (`r) before each linefeed (`n) if one is not already present. In other words, it translates from `n to `r`n. This translation typically does not affect performance. If this option is not used, line endings within Text are not changed.\n",
					"nome": "Options"
				}
			]
		]
	},
	"FileCopy": {
		"desc": "Copies one or more files.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file or folder, or a wildcard pattern such as \"C:\\Temp\\*.tmp\". SourcePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "SourcePattern"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or pattern of the destination, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\nIf present, the first asterisk (*) in the filename is replaced with the source filename excluding its extension, while the first asterisk after the last full stop (.) is replaced with the source file's extension. If an asterisk is present but the extension is omitted, the source file's extension is used.\nTo perform a simple copy -- retaining the existing file name(s) -- specify only the folder name as shown in these mostly equivalent examples:\nThe destination directory must already exist. If My Folder does not exist, the first example above will use \"My Folder\" as the target filename, while the second example will copy no files.\n",
					"nome": "DestPattern"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify one of the following numbers to indicate whether to overwrite files if they already exist:\n0: Do not overwrite existing files. The operation will fail and have no effect if DestPattern already exists as a file or directory.\n1: Overwrite existing files. However, any files or subfolders inside DestPattern that do not have a counterpart in SourcePattern will not be deleted.\nOther values are reserved for future use.\n",
					"nome": "Overwrite"
				}
			]
		]
	},
	"FileCreateShortcut": {
		"desc": "Creates a shortcut (.lnk) file.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the file that the shortcut refers to, which should include an absolute path unless the file is integrated with the system (e.g. Notepad.exe). The file does not have to exist at the time the shortcut is created; however, if it does not, some systems might alter the path in unexpected ways.\n",
					"nome": "Target"
				}
			],
			[
				{
					"desc": "Type: String\nName of the shortcut file to be created, which is assumed to be in A_WorkingDir if an absolute path isn't specified. Be sure to include the .lnk extension. The destination directory must already exist. If the file already exists, it will be overwritten.\n",
					"nome": "LinkFile"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, LinkFile will have a blank \"Start in\" field and the system will provide a default working directory when the shortcut is launched. Otherwise, specify the directory that will become Target's current working directory when the shortcut is launched.\n",
					"nome": "WorkingDir"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, Target will be launched without parameters. Otherwise, specify the parameters that will be passed to Target when it is launched. Separate parameters with spaces. If a parameter contains spaces, enclose it in double quotes.\n",
					"nome": "Args"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, LinkFile will have no description. Otherwise, specify comments that describe the shortcut (used by the OS to display a tooltip, etc.)\n",
					"nome": "Description"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, LinkFile will have Target's icon. Otherwise, specify the full path and name of the icon to be displayed for LinkFile. It must either be an .ICO file or the very first icon of an EXE or DLL file.\n",
					"nome": "IconFile"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, LinkFile will have no shortcut key. Otherwise, specify a single letter, number, or the name of a single key from the key list (mouse buttons and other non-standard keys might not be supported). If no modifier symbols are specified, Ctrl+Alt is used by default. For example, if the letter B is specified for this parameter, the hotkey will be Ctrl+Alt+B.\n[v2.1-alpha.7+]: The modifier symbols ^ (Ctrl), ! (Alt) and/or + (Shift) may be used. For example, \"^!B\" is equivalent to \"B\", while \"^+!A\" sets the hotkey to be Ctrl+Shift+Alt+A.\n",
					"nome": "ShortcutKey"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify the number of the icon to be used in IconFile. For example, 2 is the second icon.\n",
					"nome": "IconNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following digits to launch Target minimized or maximized:\n",
					"nome": "RunState"
				}
			]
		]
	},
	"FileDelete": {
		"desc": "Deletes one or more files.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file or a wildcard pattern such as \"C:\\Temp\\*.tmp\". FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\nTo remove an entire folder, along with all its sub-folders and files, use DirDelete.\n",
					"nome": "FilePattern"
				}
			]
		]
	},
	"FileEncoding": {
		"desc": "Sets the default encoding for FileRead, Loop Read, FileAppend, and FileOpen.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nSpecify one of the following values:\nCP0: The system default ANSI code page. See remarks below.\nUTF-8: Unicode UTF-8, equivalent to CP65001.\nUTF-8-RAW: As above, but no byte order mark is written when a new file is created.\nUTF-16: Unicode UTF-16 with little endian byte order, equivalent to CP1200.\nUTF-16-RAW: As above, but no byte order mark is written when a new file is created.\nCPnnn: A code page with numeric identifier nnn. See Code Page Identifiers.\nnnn: A numeric code page identifier.\n",
					"nome": "Encoding"
				}
			]
		]
	},
	"FileExist": {
		"desc": "Checks for the existence of a file or folder and returns its attributes.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path, filename, or file pattern to check. FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "FilePattern"
				}
			]
		]
	},
	"FileGetAttrib": {
		"desc": "Reports whether a file or folder is read-only, hidden, etc.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of the target file, which is assumed to be in A_WorkingDir if an absolute path isn't specified. Unlike FileExist and DirExist, this must be a true filename, not a pattern.\n",
					"nome": "Filename"
				}
			]
		]
	},
	"FileGetShortcut": {
		"desc": "Retrieves information about a shortcut (.lnk) file, such as its target file.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the shortcut file to be analyzed, which is assumed to be in A_WorkingDir if an absolute path isn't specified. Be sure to include the .lnk extension.\n",
					"nome": "LinkFile"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's target (not including any arguments it might have). For example: C:\\WINDOWS\\system32\\notepad.exe\n",
					"nome": "&OutTarget"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's working directory. For example: C:\\My Documents. If environment variables such as %WinDir% are present in the string, one way to resolve them is via StrReplace. For example: OutDir := StrReplace(OutDir, \"%WinDir%\", A_WinDir)\n",
					"nome": "&OutDir"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's parameters (blank if none).\n",
					"nome": "&OutArgs"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's comments (blank if none).\n",
					"nome": "&OutDescription"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the filename of the shortcut's icon (blank if none).\n",
					"nome": "&OutIcon"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's icon number within the icon file (blank if none). This value is most often 1, which means the first icon.\n",
					"nome": "&OutIconNum"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the shortcut's initial launch state, which is one of the following digits:\n",
					"nome": "&OutRunState"
				}
			]
		]
	},
	"FileGetSize": {
		"desc": "Retrieves the size of a file.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of the target file, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to B. Otherwise, specify one of the following letters to cause the result to be returned in specific units:\n",
					"nome": "Units"
				}
			]
		]
	},
	"FileGetTime": {
		"desc": "Retrieves the datetime stamp of a file or folder.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of the target file or folder, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to M. Otherwise, specify one of the following letters to set which timestamp should be retrieved:\n",
					"nome": "WhichTime"
				}
			]
		]
	},
	"FileGetVersion": {
		"desc": "Retrieves the version of a file.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of the target file. If a full path is not specified, this function uses the search sequence specified by the system LoadLibrary function.\n",
					"nome": "Filename"
				}
			]
		]
	},
	"FileInstall": {
		"desc": "Includes the specified file inside the compiled version of the script.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file to be added to the compiled EXE. The file is assumed to be in (or relative to) the script's own directory if an absolute path isn't specified.\nThis parameter must be a quoted literal string (not a variable or any other expression), and must be listed to the right of the function name FileInstall (that is, not on a continuation line beneath it).\n",
					"nome": "Source"
				}
			],
			[
				{
					"desc": "Type: String\nWhen Source is extracted from the EXE, this is the name of the file to be created. It is assumed to be in A_WorkingDir if an absolute path isn't specified. The destination directory must already exist.\n",
					"nome": "Dest"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify one of the following numbers to indicate whether to overwrite files if they already exist:\n0: Do not overwrite existing files. The operation will fail and have no effect if Dest already exists.\n1: Overwrite existing files.\nOther values are reserved for future use.\n",
					"nome": "Overwrite"
				}
			]
		]
	},
	"FileMove": {
		"desc": "Moves or renames one or more files.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file or a wildcard pattern such as \"C:\\Temp\\*.tmp\". SourcePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "SourcePattern"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or pattern of the destination, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\nIf present, the first asterisk (*) in the filename is replaced with the source filename excluding its extension, while the first asterisk after the last full stop (.) is replaced with the source file's extension. If an asterisk is present but the extension is omitted, the source file's extension is used.\nTo perform a simple move -- retaining the existing file name(s) -- specify only the folder name as shown in these mostly equivalent examples:\nThe destination directory must already exist. If My Folder does not exist, the first example above will use \"My Folder\" as the target filename, while the second example will move no files.\n",
					"nome": "DestPattern"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify one of the following numbers to indicate whether to overwrite files if they already exist:\n0: Do not overwrite existing files. The operation will fail and have no effect if DestPattern already exists as a file or directory.\n1: Overwrite existing files. However, any files or subfolders inside DestPattern that do not have a counterpart in SourcePattern will not be deleted.\nOther values are reserved for future use.\n",
					"nome": "Overwrite"
				}
			]
		]
	},
	"FileOpen": {
		"desc": "Opens a file to read specific content from it and/or to write new content into it.",
		"params": [
			[
				{
					"desc": "Type: String\nThe path of the file to open, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\nSpecify an asterisk (or two) as shown below to open the standard input/output/error stream:\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nEither a string of characters indicating the desired access mode followed by other options (with optional spaces or tabs in between); or a combination (sum) of numeric flags. Supported values are described in the tables below.\n",
					"nome": "Flags"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf omitted, the default encoding (as set by FileEncoding or CP0 otherwise) will be used. If blank, it defaults to CP0 (the system default ANSI code page). Otherwise, specify the encoding or code page to use for text I/O, e.g. \"UTF-8\", \"UTF-16\", \"CP936\" or 936.\nIf the file contains a UTF-8 or UTF-16 byte order mark (BOM), or if the h (handle) flag is used, this parameter and the default encoding will be ignored, unless the file is being opened with write-only access (i.e. the previous contents of the file are being discarded).\n",
					"nome": "Encoding"
				}
			]
		]
	},
	"FileRead": {
		"desc": "Retrieves the contents of a file.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the file to read, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nZero or more of the following strings. Separate each option from the next with a single space or tab. For example: \"`n m5000 UTF-8\"\nEncoding: Specify any of the encoding names accepted by FileEncoding (excluding the empty string) to use that encoding if the file lacks a UTF-8 or UTF-16 byte order mark. If omitted, it defaults to A_FileEncoding.\nRAW: Specify the word RAW (case-insensitive) to read the file's content as raw binary data and return a Buffer object instead of a string. This option overrides any previously specified encoding and vice versa.\nm1024: If this option is omitted, the entire file is loaded unless there is insufficient memory, in which case an error message is shown and the thread exits (but Try can be used to avoid this). Otherwise, replace 1024 with a decimal or hexadecimal number of bytes. If the file is larger than this, only its leading part is loaded.\nNote: This might result in the last line ending in a naked carriage return (`r) rather than `r`n.\n`n (a linefeed character): Replaces any/all occurrences of carriage return & linefeed (`r`n) with linefeed (`n). However, this translation reduces performance and is usually not necessary. For example, text containing `r`n is already in the right format to be added to a Gui Edit control. The following parsing loop will work correctly regardless of whether each line ends in `r`n or just `n: Loop Parse, MyFileContents, \"`n\", \"`r\".\n",
					"nome": "Options"
				}
			]
		]
	},
	"FileRecycle": {
		"desc": "Sends a file or directory to the recycle bin if possible, or permanently deletes it.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file or a wildcard pattern such as \"C:\\Temp\\*.tmp\". FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\nTo recycle an entire directory, provide its name without a trailing backslash.\n",
					"nome": "FilePattern"
				}
			]
		]
	},
	"FileRecycleEmpty": {
		"desc": "Empties the recycle bin.",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the recycle bin for all drives is emptied. Otherwise, specify a drive letter such as \"C:\\\".\n",
					"nome": "DriveLetter"
				}
			]
		]
	},
	"FileSelect": {
		"desc": "Displays a standard dialog that allows the user to open or save file(s).",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to zero, which is the same as having none of the options below. Otherwise, specify a number or one of the letters listed below, optionally followed by a number. For example, \"M\", 1 and \"M1\" are all valid (but not equivalent).\nD: Select Folder (Directory). Specify the letter D to allow the user to select a folder rather than a file. The dialog has most of the same features as when selecting a file, but does not support filters (Filter must be blank or omitted).\nM: Multi-select. Specify the letter M to allow the user to select more than one file via shift-click, control-click, or other means. In this case, the return value is an Array instead of a string. To extract the individual files, see the example at the bottom of this page.\nS: Save dialog. Specify the letter S to cause the dialog to always contain a Save button instead of an Open button.\nThe following numbers can be used. To put more than one of them into effect, add them up. For example, to use 1 and 2, specify the number 3.\n1: File Must Exist\r\n2: Path Must Exist\r\n8: Prompt to Create New File\r\n16: Prompt to Overwrite File\r\n32: Shortcuts (.lnk files) are selected as-is rather than being resolved to their targets. This option also prevents navigation into a folder via a folder shortcut.\nAs the \"Prompt to Overwrite\" option is supported only by the Save dialog, specifying that option without the \"Prompt to Create\" option also puts the S option into effect. Similarly, the \"Prompt to Create\" option has no effect when the S option is present. Specifying the number 24 enables whichever type of prompt is supported by the dialog.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the starting directory will be a default that might depend on the OS version (it will likely be the directory most recently selected by the user during a prior use of FileSelect). Otherwise, specify one or both of the following:\nRootDir: The root (starting) directory, which is assumed to be a subfolder in A_WorkingDir if an absolute path is not specified.\nFilename: The default filename to initially show in the dialog's edit field. Only the naked filename (with no path) will be shown. To ensure that the dialog is properly shown, ensure that no illegal characters are present (such as /<|:\").\nExamples:\n",
					"nome": "RootDir\\Filename"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to \"Select File - \" A_ScriptName (i.e. the name of the current script), unless the \"D\" option is present, in which case the word \"File\" is replaced with \"Folder\". Otherwise, specify the title of the file-selection window.\n",
					"nome": "Title"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the dialog will show all type of files and provide the \"All Files (*.*)\" option in the \"Files of type\" drop-down list.\nOtherwise, specify a string to indicate which types of files are shown by the dialog, e.g. \"Documents (*.txt)\". To include more than one file extension in the filter, separate them with semicolons, e.g. \"Audio (*.wav; *.mp2; *.mp3)\". In this case, the \"Files of type\" drop-down list has the specified string and \"All Files (*.*)\" as options.\nThis parameter must be blank or omitted if the \"D\" option is present.\n",
					"nome": "Filter"
				}
			]
		]
	},
	"FileSetAttrib": {
		"desc": "Changes the attributes of one or more files or folders. Wildcards are supported.",
		"params": [
			[
				{
					"desc": "Type: String\nThe attributes to change. For example, +HA-R.\nTo easily turn on, turn off or toggle attributes, prefix one or more of the following attribute letters with a plus sign (+), minus sign (-) or caret (^), respectively:\nNote: Currently, the compression state of files cannot be changed with this function.\n",
					"nome": "Attributes"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of a single file or folder, or a wildcard pattern such as \"C:\\Temp\\*.tmp\". FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "FilePattern"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, only files are operated upon and subdirectories are not recursed into. Otherwise, specify one or more of the following letters:\n",
					"nome": "Mode"
				}
			]
		]
	},
	"FileSetTime": {
		"desc": "Changes the datetime stamp of one or more files or folders. Wildcards are supported.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to the current local date and time. Otherwise, specify the time to use for the operation (see Remarks for the format). Years prior to 1601 are not supported.\n",
					"nome": "YYYYMMDDHH24MISS"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the current file of the innermost enclosing file loop will be used. Otherwise, specify the name of a single file or folder, or a wildcard pattern such as \"C:\\Temp\\*.tmp\". FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "FilePattern"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to M. Otherwise, specify one of the following letters to set which timestamp should be changed:\n",
					"nome": "WhichTime"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, only files are operated upon and subdirectories are not recursed into. Otherwise, specify one or more of the following letters:\nNote: If FilePattern is a single folder rather than a wildcard pattern, it will always be operated upon regardless of this setting.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"Finally": {
		"desc": "Ensures that one or more statements are always executed after a Try statement finishes.",
		"params": [

		]
	},
	"Float": {
		"desc": "Converts a numeric string or integer value to a floating-point number.",
		"params": [

		]
	},
	"For-loop": {
		"desc": "Repeats one or more statements once for each key-value pair in an object.",
		"params": [
			[
				{
					"desc": "Type: Variable\nThe variables in which to store the values returned by the enumerator at the beginning of each iteration. The nature of these values is defined by the enumerator, which is determined by Expression. These variables cannot be dynamic.\nWhen the loop breaks or completes, these variables are restored to their former values. If a loop variable is a ByRef parameter, the target variable is unaffected by the loop. Closures which reference the variable (if local) are also unaffected and will see only the value it had outside the loop.\nNote: Even if defined inside the loop body, a nested function which refers to a loop variable cannot see or change the current iteration's value. Instead, pass the variable explicitly or bind its value to a parameter.\nUp to 19 variables are supported, if supported by the enumerator.\nVariables can be omitted. For example, for , value in myMap calls myMap's enumerator with only its second parameter, omitting its first parameter. If the enumerator is user-defined and the parameter is mandatory, an exception is thrown as usual. The parameter count passed to __Enum is 0 if there are no variables or commas; otherwise it is 1 plus the number of commas present.\n",
					"nome": "Value1"
				}
			],
			[
				{
					"desc": "Type: Object\nAn expression which results in an enumerable object, or a variable which contains an enumerable object.\n",
					"nome": "Value2"
				}
			]
		]
	},
	"Format": {
		"desc": "Formats a variable number of input values according to a format string.",
		"params": [
			[
				{
					"desc": "Type: String\nA format string composed of literal text and placeholders of the form {Index:Format}.\nIndex is an integer indicating which input value to use, where 1 is the first value.\nFormat is an optional format specifier, as described below.\nOmit the index to use the next input value in the sequence (even if it has been used earlier in the string). For example, \"{2:i} {:i}\" formats the second and third input values as decimal integers, separated by a space. If Index is omitted, Format must still be preceded by :. Specify empty braces to use the next input value with default formatting: {}\nUse {{} and {}} to include literal braces in the string. Any other invalid placeholders are included in the result as is.\nWhitespace inside the braces is not permitted (except as a flag).\n",
					"nome": "FormatStr"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Float\nInput values to be formatted and inserted into the final string. Each value is a separate parameter. The first value has an index of 1.\nTo pass an array of values, use a variadic function call:\n",
					"nome": "Values"
				}
			]
		]
	},
	"FormatTime": {
		"desc": "Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to the current local date and time. Otherwise, specify all or the leading part of a timestamp in the YYYYMMDDHH24MISS format.\n",
					"nome": "YYYYMMDDHH24MISS"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to the time followed by the long date, both of which will be formatted according to the current user's locale. For example: 4:55 PM Saturday, November 27, 2004\nOtherwise, specify one or more of the date-time formats from the tables below, along with any literal spaces and punctuation in between (commas do not need to be escaped; they can be used normally). In the following example, note that M must be capitalized: M/d/yyyy h:mm tt\n",
					"nome": "Format"
				}
			]
		]
	},
	"Func Object": {
		"desc": "Represents a user-defined or built-in function.",
		"params": [
			[
				{
					"desc": "",
					"nome": "Param1, Param2, ..."
				}
			],
			[
				{
					"desc": "",
					"nome": "Param1, Param2, ..."
				}
			],
			[
				{
					"desc": "Type: Integer\nOptional: the one-based index of a parameter. If omitted, Boolean indicates whether the function has any ByRef parameters.\n",
					"nome": "ParamIndex"
				}
			],
			[
				{
					"desc": "Type: Integer\nOptional: the one-based index of a parameter. If omitted, Boolean indicates whether the function has any optional parameters.\n",
					"nome": "ParamIndex"
				}
			]
		]
	},
	"GUI Control Types": {
		"desc": "Description: A region containing borderless text that the user cannot edit. Often used to label other controls.",
		"params": [
			[
				{
					"desc": "Type: String\nOne of the following:\nShortDate (or omitted/blank): Uses the locale's short date format. For example, in some locales it would look like: 6/1/2005\nLongDate: Uses the locale's long date format. For example, in some locales it would look like: Wednesday, June 01, 2005\nTime: Shows only the time using the locale's time format. Although the date is not shown, it is still present in the control and will be retrieved along with the time in the YYYYMMDDHH24MISS format. For example, in some locales it would look like: 9:37:45 PM\n(custom format): Specify any combination of date and time formats. For example, \"M/d/yy HH:mm\" would look like 6/1/05 21:37. Similarly, \"dddd MMMM d, yyyy hh:mm:ss tt\" would look like Wednesday June 1, 2005 09:37:45 PM. Letters and numbers to be displayed literally should be enclosed in single quotes as in this example: \"'Date:' MM/dd/yy 'Time:' hh:mm:ss tt\". By contrast, non-alphanumeric characters such as spaces, tabs, slashes, colons, commas, and other punctuation do not need to be enclosed in single quotes. The exception to this is the single quote character itself: to produce it literally, use four consecutive single quotes (''''), or just two if the quote is already inside an outer pair of quotes.\n",
					"nome": "Format"
				}
			],
			[
				{
					"desc": "Type: Integer\nA numeric value from the tables below indicating how the slider was moved. These values and the corresponding names are defined in the Windows SDK.\n",
					"nome": "Info"
				}
			],
			[
				{
					"desc": "Type: String\nUp to two tab characters (`t) may be present anywhere in NewText: anything to the right of the first tab is centered within the part, and anything to the right of the second tab is right-justified.\n",
					"nome": "NewText"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf PartNumber is omitted, it defaults to 1. Otherwise, specify an integer between 1 and 256.\n",
					"nome": "PartNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf Style is omitted, it defaults to 0, which uses a traditional border that makes that part of the bar look sunken. Otherwise, specify 1 to have no border or 2 to have border that makes that part of the bar look raised.\n",
					"nome": "Style"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf all parameters are omitted, the bar is restored to having only a single, long part. Otherwise, specify the width of each part except the last (the last will fill the remaining width of the bar). For example, SB.SetParts(50, 50) would create three parts: the first two of width 50 and the last one of all the remaining width.\n",
					"nome": "Width1 ... Width255"
				}
			],
			[
				{
					"desc": "Type: String\nThe path of an icon or image file. For a list of supported formats, see the Picture control.\nA bitmap or icon handle can be used instead of a filename. For example, SB.SetIcon(\"HICON:\" handle).\n",
					"nome": "FileName"
				}
			],
			[
				{
					"desc": "Type: Integer\nTo use an icon group other than the first one in the file, specify its number for IconNumber. For example, SB.SetIcon(\"Shell32.dll\", 2) would use the default icon from the second icon group. If IconNumber is negative, its absolute value is assumed to be the resource ID of an icon within an executable file.\n",
					"nome": "IconNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf PartNumber is omitted, it defaults to 1. Otherwise, specify an integer between 1 and 256.\n",
					"nome": "PartNumber"
				}
			]
		]
	},
	"GetKeyName": {
		"desc": "Retrieves the name/text of a key.",
		"params": [
			[
				{
					"desc": "Type: String\nThis can be just about any single character from the keyboard or one of the key names from the key list. Examples: B, 5, LWin, RControl, Alt, Enter, Escape.\nAlternatively, this can be an explicit virtual key code such as vkFF, an explicit scan code such as sc01D, or a combination of VK and SC (in that order) such as vk1Bsc001. Note that these codes must be in hexadecimal.\n",
					"nome": "KeyName"
				}
			]
		]
	},
	"GetKeySC": {
		"desc": "Retrieves the scan code of a key.",
		"params": [
			[
				{
					"desc": "Type: String\nAny single character or one of the key names from the key list. Examples: B, 5, LWin, RControl, Alt, Enter, Escape.\nAlternatively, this can be an explicit virtual key code such as vkFF, an explicit scan code such as sc01D, or a combination of VK and SC (in that order) such as vk1Bsc001. Note that these codes must be in hexadecimal.\n",
					"nome": "KeyName"
				}
			]
		]
	},
	"GetKeyState": {
		"desc": "Returns 1 (true) or 0 (false) depending on whether the specified keyboard key or mouse/controller button is down or up. Also retrieves controller status.",
		"params": [
			[
				{
					"desc": "Type: String\nThis can be just about any single character from the keyboard or one of the key names from the key list, such as a mouse/controller button. Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.\nAlternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The code of such a key can be determined by following the steps at the bottom of the key list page. Note that this code must be in hexadecimal.\nKnown limitation: This function cannot differentiate between two keys which share the same virtual key code, such as Left and NumpadLeft.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nThis parameter is ignored when retrieving controller status.\nIf omitted, it defaults to that which retrieves the logical state of the key. This is the state that the OS and the active window believe the key to be in, but is not necessarily the same as the physical state.\nOtherwise, specify one of the following letters:\nP: Retrieve the physical state (i.e. whether the user is physically holding it down). The physical state of a key or mouse button will usually be the same as the logical state unless the keyboard and/or mouse hooks are installed, in which case it will accurately reflect whether or not the user is physically holding down the key or button (as long as it was pressed down while the script was running). You can determine if your script is using the hooks via the KeyHistory function or menu item. You can force the hooks to be installed by calling InstallKeybdHook and/or InstallMouseHook.\nT: Retrieve the toggle state. For keys other than CapsLock, NumLock and ScrollLock, the toggle state is generally 0 when the script starts and is not synchronized between processes.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"GetKeyVK": {
		"desc": "Retrieves the virtual key code of a key.",
		"params": [
			[
				{
					"desc": "Type: String\nAny single character or one of the key names from the key list. Examples: B, 5, LWin, RControl, Alt, Enter, Escape.\nAlternatively, this can be an explicit virtual key code such as vkFF, an explicit scan code such as sc01D, or a combination of VK and SC (in that order) such as vk1Bsc001. Note that these codes must be in hexadecimal.\n",
					"nome": "KeyName"
				}
			]
		]
	},
	"GetMethod": {
		"desc": "Retrieves the implementation function of a method.",
		"params": [
			[
				{
					"desc": "Type: Any\nAny value, of any type except ComObject.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of the method to retrieve.\nOmit this parameter to perform validation on Value itself and return Value if successful.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "The number of parameters that would be passed to the method or function. If specified, the method's MinParams, MaxParams and IsVariadic properties may be queried to verify that it can accept this number of parameters. If those properties are not present, the parameter count is not verified.\nThis count should not include the implicit this parameter.\nIf omitted (or if the parameter count was not verified), a basic check is performed for a Call method to verify that the object is most likely callable.\n",
					"nome": "ParamCount"
				}
			]
		]
	},
	"Goto": {
		"desc": "Jumps to the specified label and continues execution.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the label to which to jump.\n",
					"nome": "Label"
				}
			]
		]
	},
	"GroupActivate": {
		"desc": "Activates the next window in a window group that was defined with GroupAdd.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the group to activate, as originally defined by GroupAdd.\n",
					"nome": "GroupName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the function activates the oldest window in the series. Otherwise, specify the following letter:\nR: The newest window (the one most recently active) is activated, but only if no members of the group are active when the function is given. \"R\" is useful in cases where you temporarily switch to working on an unrelated task. When you return to the group via GroupActivate, GroupDeactivate, or GroupClose, the window you were most recently working with is activated rather than the oldest window.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"GroupAdd": {
		"desc": "Adds a window specification to a window group, creating the group if necessary.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the group to which to add this window specification. If the group doesn't exist, it will be created. Group names are not case-sensitive.\n",
					"nome": "GroupName"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nSpecify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on at the time that GroupActivate, GroupDeactivate, and GroupClose are used. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"GroupClose": {
		"desc": "Closes the active window if it was just activated by GroupActivate or GroupDeactivate. It then activates the next window in the series. It can also close all windows in a group.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the group as originally defined by GroupAdd.\n",
					"nome": "GroupName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the function closes the active window and activates the oldest window in the series. Otherwise, specify one of the following letters:\nR: The newest window (the one most recently active) is activated, but only if no members of the group are active when the function is given. \"R\" is useful in cases where you temporarily switch to working on an unrelated task. When you return to the group via GroupActivate, GroupDeactivate, or GroupClose, the window you were most recently working with is activated rather than the oldest window.\nA: All members of the group will be closed. This is the same effect as WinClose \"ahk_group GroupName\".\n",
					"nome": "Mode"
				}
			]
		]
	},
	"GroupDeactivate": {
		"desc": "Similar to GroupActivate except activates the next window not in the group.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the target group, as originally defined by GroupAdd.\n",
					"nome": "GroupName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the function activates the oldest non-member window. Otherwise, specify the following letter:\nR: The newest non-member window (the one most recently active) is activated, but only if a member of the group is active when the function is given. \"R\" is useful in cases where you temporarily switch to working on an unrelated task. When you return to the group via GroupActivate, GroupDeactivate, or GroupClose, the window you were most recently working with is activated rather than the oldest window.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"Gui Object": {
		"desc": "Provides an interface for creating and managing windows, and creating controls. Such windows can be used as data entry forms or custom user interfaces.",
		"params": [
			[
				{
					"desc": "Type: String\nThis parameter can contain any of the options supported by Gui.Opt.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe window title. If omitted, it defaults to the current value of A_ScriptName.\n",
					"nome": "Title"
				}
			],
			[
				{
					"desc": "Type: Object\nAn \"event sink\", or object to bind events to. If EventObj is specified, OnEvent, OnNotify and OnCommand can be used to register methods of EventObj to be called when an event is raised.\n",
					"nome": "EventObj"
				}
			],
			[
				{
					"desc": "Type: String\nThis is one of the following: Text, Edit, UpDown, Picture (or Pic), Button, Checkbox, Radio, DropDownList (or DDL), ComboBox, ListBox, ListView, TreeView, Link, Hotkey, DateTime, MonthCal, Slider, Progress, GroupBox, Tab, Tab2, Tab3, StatusBar, ActiveX, Custom\nFor example:\n",
					"nome": "ControlType"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the control starts off at its defaults. Otherwise, specify one or more of the following options and styles, each separated from the next with one or more spaces or tabs.\nPositioning and Sizing of Controls\nIf some dimensions and/or coordinates are omitted from Options, the control will be positioned relative to the previous control and/or sized automatically according to its nature and contents.\nThe following options are supported:\nRn: Rows of text (where n is any number, even a floating point number such as r2.5). R is often preferable to specifying H (Height). If both the R and H options are present, R will take precedence. For a GroupBox, this setting is the number of controls for which to reserve space inside the box. For DropDownLists, ComboBoxes, and ListBoxes, it is the number of items visible at one time inside the list portion of the control (but it is often desirable to omit both the R and H options for DropDownList and ComboBox, as the popup list will automatically take advantage of the available height of the user's desktop). For other control types, R is the number of rows of text that can visibly fit inside the control.\nWn: Width (where n is any number in pixels). If omitted, the width is calculated automatically for some control types based on their contents; tab controls default to 30 times the current font size, plus 3 times the X-margin; vertical Progress Bars default to two times the current font size; and horizontal Progress Bars, horizontal Sliders, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits, and Hotkeys default to 15 times the current font size (except GroupBoxes, which multiply by 18 to provide room inside for margins).\nHn: Height (where n is any number in pixels). If both the H and R options are absent, DropDownLists, ComboBoxes, ListBoxes, and empty multi-line Edit controls default to 3 rows; GroupBoxes default to 2 rows; vertical Sliders and Progress Bars default to 5 rows; horizontal Sliders default to 30 pixels (except if a thickness has been specified); horizontal Progress Bars default to 2 times the current font size; Hotkey controls default to 1 row; and Tab controls default to 10 rows. For the other control types, the height is calculated automatically based on their contents. Note that for DropDownLists and ComboBoxes, H is the combined height of the control's always-visible portion and its list portion (but even if the height is set too low, at least one item will always be visible in the list). Also, for all types of controls, specifying the number of rows via the R option is usually preferable to using H because it prevents a control from showing partial/incomplete rows of text.\nWP±n, HP±n (where n is any number in pixels) can be used to set the width and/or height of a control equal to the previously added control's width or height, with an optional plus or minus adjustment. For example, wp would set a control's width to that of the previous control, and wp-50 would set it equal to 50 less than that of the previous control.\nXn, Yn: X-position, Y-position (where n is any number in pixels). For example, specifying x0 y0 would position the control in the upper left corner of the window's client area, which is the area beneath the title bar and menu bar (if any).\nX+n, Y+n (where n is any number in pixels): An optional plus sign can be included to position a control relative to the right or bottom edge (respectively) of the control that was previously added. For example, specifying y+10 would position the control 10 pixels beneath the bottom of the previous control rather than using the standard padding distance. Similarly, specifying x+10 would position the control 10 pixels to the right of the previous control's right edge. Since negative numbers such as x-10 are reserved for absolute positioning, to use a negative offset, include a plus sign in front of it. For example: x+-10.\nFor X+ and Y+, the letter M can be used as a substitute for the window's current margin. For example, x+m uses the right edge of the previous control plus the standard padding distance. xp y+m positions a control below the previous control, whereas specifying a relative X coordinate on its own (with XP or X+) would normally imply yp by default.\nXP±n, YP±n (where n is any number in pixels) can be used to position controls relative to the previous control's upper left corner, which is often useful for enclosing controls in a GroupBox.\nXM±n and YM±n (where n is any number in pixels) can be used to position a control at the leftmost and topmost margins of the window, respectively, with an optional plus or minus adjustment.\nXS±n and YS±n (where n is any number in pixels): These are similar to XM and YM except that they refer to coordinates that were saved by having previously added a control with the word Section in its options (the first control of the window always starts a new section, even if that word isn't specified in its options). For example:\nXS and YS may optionally be followed by a plus/minus sign and a number. Also, it is possible to specify both the word Section and XS/YS in a control's options; this uses the previous section for itself but establishes a new section for subsequent controls.\nOmitting either X, Y or both is useful to make a GUI layout automatically adjust to any future changes you might make to the size of controls or font. By contrast, specifying an absolute position for every control might require you to manually shift the position of all controls that lie beneath and/or to the right of a control that is being enlarged or reduced.\nIf both X and Y are omitted, the control will be positioned beneath the previous control using a standard padding distance (the current margin). Consecutive Text or Link controls are given additional vertical padding, so that they typically align better in cases where a column of Edit, DDL or similar-sized controls are later added to their right. To use only the standard vertical margin, specify y+m or any value for X.\nIf only one component is omitted, its default value depends on which option was used to specify the other component:\nStoring and Responding to User Input\nV: Sets the control's Name. Specify the name immediately after the letter V, which is not included in the name. For example, specifying vMyEdit would name the control \"MyEdit\".\nEvents: Event handlers (such as a function which is called automatically when the user clicks or changes a control) cannot be set within the control's Options. Instead, OnEvent can be used to register a callback function or method for each event of interest.\nCommon Options and Styles for Controls\nNote: In the absence of a preceding sign, a plus sign is assumed; for example, Wrap is the same as +Wrap. By contrast, -Wrap would remove the word-wrapping property.\nAltSubmit: Uses alternate submit method. For DropDownList, ComboBox, ListBox and Tab, this causes Gui.Submit to store the position of the selected item rather than its text. If no item is selected, a ComboBox will still store the text of its edit field.\nC: Color of text (has no effect on buttons and status bars). Specify the letter C followed immediately by a color name (see color chart) or RGB value (the 0x prefix is optional). Examples: cRed, cFF2211, c0xFF2211, cDefault.\nDisabled: Makes an input-capable control appear in a disabled state, which prevents the user from focusing or modifying its contents. Use GuiCtrl.Enabled to enable it later. Note: To make an Edit control read-only, specify the string ReadOnly instead. Also, the word Disabled may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for enabled and 1 for disabled). In other words, Disabled and \"Disabled\" VarContainingOne are the same.\nHidden: The control is initially invisible. Use GuiCtrl.Visible to show it later. The word Hidden may optionally be followed immediately by a 0 or 1 to indicate the starting state (0 for visible and 1 for hidden). In other words, Hidden and \"Hidden\" VarContainingOne are the same.\nLeft: Left-justifies the control's text within its available width. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime.\nRight: Right-justifies the control's text within its available width. For checkboxes and radio buttons, this also puts the box itself on the right side of the control rather than the left. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, UpDown, Slider, Tab, Tab2, GroupBox, DateTime, Link.\nCenter: Centers the control's text within its available width. This option affects the following controls: Text, Edit, Button, Checkbox, Radio, Slider, GroupBox.\nSection: Starts a new section and saves this control's position for later use with the XS and YS positioning options described above.\nTabstop: Use -Tabstop (minus Tabstop) to have an input-capable control skipped over when the user presses Tab to navigate.\nWrap: Enables word-wrapping of the control's contents within its available width. Since nearly all control types start off with word-wrapping enabled, use -Wrap to disable word-wrapping.\nVScroll: Provides a vertical scroll bar if appropriate for this type of control.\nHScroll: Provides a horizontal scroll bar if appropriate for this type of control. The rest of this paragraph applies to ListBox only. The horizontal scrolling width defaults to 3 times the width of the ListBox. To specify a different scrolling width, include a number immediately after the word HScroll. For example, HScroll500 would allow 500 pixels of scrolling inside the ListBox. However, if the specified scrolling width is smaller than the width of the ListBox, no scroll bar will be shown (though the mere presence of HScroll makes it possible for the horizontal scroll bar to be added later via MyScrollBar.Opt(\"+HScroll500\"), which is otherwise impossible).\nUncommon Options and Styles for Controls\nBackgroundTrans: Uses a transparent background, which allows any control that lies behind a Text, Picture, or GroupBox control to show through. For example, a transparent Text control displayed on top of a Picture control would make the text appear to be part of the picture. Use GuiCtrl.Opt(\"+Background\") to remove this option later. See Picture control's AltSubmit section for more information about transparent images. Known limitation: BackgroundTrans might not work properly for controls inside a Tab control that contains a ListView. If a control type does not support this option, an error is thrown.\nBackgroundColor: Changes the background color of the control. Replace Color with a color name (see color chart) or RGB value (the 0x prefix is optional). Examples: BackgroundSilver, BackgroundFFDD99. If this option is not used, or if +Background is used with no suffix, a Text, Picture, GroupBox, CheckBox, Radio, Slider, Tab or Link control uses the background color set by Gui.BackColor (or if none or other control type, the system's default background color). Specifying BackgroundDefault or -Background applies the system's default background color. For example, a control can be restored to the system's default color via LV.Opt(\"+BackgroundDefault\"). If a control type does not support this option, an error is thrown.\nBorder: Provides a thin-line border around the control. Most controls do not need this because they already have a type-specific border. When adding a border to an existing control, it might be necessary to increase the control's width and height by 1 pixel.\nRedraw: When used with Opt, this option enables or disables redraw (visual updates) for a control by sending it a WM_SETREDRAW message. See Redraw for more details.\nTheme: This option can be used to override the window's current theme setting for the newly created control. It has no effect when used on an existing control; however, this may change in a future version. See GUI's +/-Theme option for details.\n(Unnamed Style): Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number. If the sign is omitted, a plus sign is assumed.\n(Unnamed ExStyle): Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. If the sign is omitted, a plus sign is assumed. For example, E0x200 would add the WS_EX_CLIENTEDGE style, which provides a border with a sunken edge that might be appropriate for pictures and other controls. For other extended styles not documented here (since they are rarely used), see Extended Window Styles | Microsoft Docs for a complete list.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "",
					"nome": "Text"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf this parameter is omitted or 1 (true), the window's button in the taskbar will blink. This is done by inverting the color of the window's title bar and/or taskbar button (if it has one). Specify 0 (false) to restore the original colors of the title bar and taskbar button (but the actual behavior might vary depending on OS version).\n",
					"nome": "Blink"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new position, in screen coordinates.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new size.\n",
					"nome": "Width, Height"
				}
			],
			[
				{
					"desc": "Type: String\nZero or more of the following options and styles, each separated from the next with one or more spaces or tabs.\nFor performance reasons, it is better to set all options in a single line, and to do so before creating the window (that is, before any use of other methods such as Gui.Add).\nThe effect of this parameter is cumulative; that is, it alters only those settings that are explicitly specified, leaving all the others unchanged.\nSpecify a plus sign to add the option and a minus sign to remove it. For example: MyGui.Opt(\"+Resize -MaximizeBox\").\nAlwaysOnTop: Makes the window stay on top of all other windows, which is the same effect as WinSetAlwaysOnTop.\nBorder: Provides a thin-line border around the window. This is not common.\nCaption (present by default): Provides a title bar and a thick window border/edge. When removing the caption from a window that will use WinSetTransColor, remove it only after setting the TransColor.\nDisabled: Disables the window, which prevents the user from interacting with its controls. This is often used on a window that owns other windows (see Owner).\nDPIScale: Use MyGui.Opt(\"-DPIScale\") to disable DPI scaling, which is enabled by default. If DPI scaling is enabled, coordinates and sizes passed to or retrieved from the Gui and GuiControl methods/properties are automatically scaled based on screen DPI. For example, with a DPI of 144 (150 %), MyGui.Show(\"w100\") would make the Gui 150 (100 * 1.5) pixels wide, and resizing the window to 200 pixels wide via the mouse or WinMove would cause MyGui.GetClientPos(,,&W) to set W to 133 (200 // 1.5). A_ScreenDPI contains the system's current DPI.\nDPI scaling only applies to the Gui and GuiControl methods/properties, so coordinates coming directly from other sources such as ControlGetPos or WinGetPos will not work. There are a number of ways to deal with this:\nLastFound: Sets the window to be the last found window (though this is unnecessary in a GUI thread because it is done automatically), which allows functions such as WinGetStyle and WinSetTransparent to operate on it even if it is hidden (that is, DetectHiddenWindows is not necessary). This is especially useful for changing the properties of the window before showing it. For example:\nMaximizeBox: Enables the maximize button in the title bar. This is also included as part of Resize below.\nMinimizeBox (present by default): Enables the minimize button in the title bar.\nMinSize and MaxSize: Determines the minimum and/or maximum size of the window, such as when the user drags its edges to resize it. Specify +MinSize and/or +MaxSize (i.e. without suffix) to use the window's current size as the limit (if the window has no current size, it will use the size from the first use of Gui.Show). Alternatively, append the width, followed by an X, followed by the height; for example: MyGui.Opt(\"+Resize +MinSize640x480\"). The dimensions are in pixels, and they specify the size of the window's client area (which excludes borders, title bar, and menu bar). Specify each number as decimal, not hexadecimal.\nEither the width or the height may be omitted to leave it unchanged (e.g. +MinSize640x or +MinSizex480). Furthermore, Min/MaxSize can be specified more than once to use the window's current size for one dimension and an explicit size for the other. For example, +MinSize +MinSize640x would use the window's current size for the height and 640 for the width.\nIf MinSize and MaxSize are never used, the operating system's defaults are used (similarly, MyGui.Opt(\"-MinSize -MaxSize\") can be used to return to the defaults). Note: the window must have +Resize to allow resizing by the user.\nOwnDialogs: MyGui.Opt(\"+OwnDialogs\") should be specified in each thread (such as a event handling function of a Button control) for which subsequently displayed MsgBox, InputBox, FileSelect, and DirSelect dialogs should be owned by the window. Such dialogs are modal, meaning that the user cannot interact with the GUI window until dismissing the dialog. By contrast, ToolTip do not become modal even though they become owned; they will merely stay always on top of their owner. In either case, any owned dialog or window is automatically destroyed when its GUI window is destroyed.\nThere is typically no need to turn this setting back off because it does not affect other threads. However, if a thread needs to display both owned and unowned dialogs, it may turn off this setting via MyGui.Opt(\"-OwnDialogs\").\nOwner: Use +Owner to make the window owned by another. An owned window has no taskbar button by default, and when visible it is always on top of its owner. It is also automatically destroyed when its owner is destroyed. +Owner can be used before or after the owned window is created. There are two ways to use +Owner, as shown below:\n+Owner can be immediately followed by the HWND of any top-level window.\nTo prevent the user from interacting with the owner while one of its owned window is visible, disable the owner via MyGui.Opt(\"+Disabled\"). Later (when the time comes to cancel or destroy the owned window), re-enable the owner via MyGui.Opt(\"-Disabled\"). Do this prior to cancel/destroy so that the owner will be reactivated automatically.\nParent: Use +Parent immediately followed by the HWND of any window or control to use it as the parent of this window. To convert the GUI back into a top-level window, use -Parent. This option works even after the window is created. Known limitations:\nResize: Makes the window resizable and enables its maximize button in the title bar. To avoid enabling the maximize button, specify +Resize -MaximizeBox.\nSysMenu (present by default): Specify -SysMenu (minus SysMenu) to omit the system menu and icon in the window's upper left corner. This will also omit the minimize, maximize, and close buttons in the title bar.\nTheme: By specifying -Theme, all subsequently created controls in the window will have the Classic Theme appearance. To later create additional controls that obey the current theme, turn it back on via +Theme. Note: This option has no effect if the Classic Theme is in effect. Finally, this setting may be changed for an individual control by specifying +Theme or -Theme in its options when it is created.\nToolWindow: Provides a narrower title bar but the window will have no taskbar button. This always hides the maximize and minimize buttons, regardless of whether the WS_MAXIMIZEBOX and WS_MINIMIZEBOX styles are present.\n(Unnamed Style): Specify a plus or minus sign followed immediately by a decimal or hexadecimal style number.\n(Unnamed ExStyle): Specify a plus or minus sign followed immediately by the letter E and a decimal or hexadecimal extended style number. For example, +E0x40000 would add the WS_EX_APPWINDOW style, which provides a taskbar button for a window that would otherwise lack one. For other extended styles not documented here (since they are rarely used), see Extended Window Styles | Microsoft Docs for a complete list.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nZero or more options. Each option is either a single letter immediately followed by a value, or a single word. To specify more than one option, include a space between each. For example: cBlue s12 bold.\nThe following words are supported: bold, italic, strike, underline, and norm. Norm returns the font to normal weight/boldness and turns off italic, strike, and underline (but it retains the existing color and size). It is possible to use norm to turn off all attributes and then selectively turn on others. For example, specifying norm italic would set the font to normal then to italic.\nC: Color name (see color chart) or RGB value -- or specify the word Default to return to the system's default color (black on most systems). Example values: cRed, cFFFFAA, cDefault. Note: Buttons and status bars do not obey custom colors. Also, an individual control can be created with a font color other than the current one by including the C option. For example: MyGui.Add(\"Text\", \"cRed\", \"My Text\").\nS: Size (in points). For example: s12 (specify decimal, not hexadecimal)\nW: Weight (boldness), which is a number between 1 and 1000 (400 is normal and 700 is bold). For example: w600 (specify decimal, not hexadecimal)\nQ: Text rendering quality. For example: q3. Q should be followed by a number from the following table:\nFor more details of what these values mean, see Microsoft Docs: CreateFont.\nSince the highest quality setting is usually the default, this feature is more typically used to disable anti-aliasing in specific cases where doing so makes the text clearer.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nFontName may be the name of any font, such as one from the font table. If FontName is omitted or does not exist on the system, the previous font's typeface will be used (or if none, the system's default GUI typeface). This behavior is useful to make a GUI window have a similar font on multiple systems, even if some of those systems lack the preferred font. For example, by using the following methods in order, Verdana will be given preference over Arial, which in turn is given preference over MS sans serif:\n",
					"nome": "FontName"
				}
			],
			[
				{
					"desc": "Type: String\nOmit the X, Y, W, and H options below to have the window retain its previous size and position. If there is no previous position, the window will be auto-centered in one or both dimensions if the X and/or Y options mentioned below are absent. If there is no previous size, the window will be auto-sized according to the size and positions of the controls it contains.\nZero or more of the following strings may be present in Options (specify each number as decimal, not hexadecimal):\nWn: Specify for n the width (in pixels) of the window's client area (the client area excludes the window's borders, title bar, and menu bar).\nHn: Specify for n the height of the window's client area, in pixels.\nXn: Specify for n the window's X-position on the screen, in pixels. Position 0 is the leftmost column of pixels visible on the screen.\nYn: Specify for n the window's Y-position on the screen, in pixels. Position 0 is the topmost row of pixels visible on the screen.\nCenter: Centers the window horizontally and vertically on the screen.\nxCenter: Centers the window horizontally on the screen. For example: MyGui.Show(\"xCenter y0\").\nyCenter: Centers the window vertically on the screen.\nAutoSize: Resizes the window to accommodate only its currently visible controls. This is useful to resize the window after new controls are added, or existing controls are resized, hidden, or unhidden. For example: MyGui.Show(\"AutoSize Center\").\nOne of the following may also be present:\nMinimize: Minimizes the window and activates the one beneath it.\nMaximize: Maximizes and activates the window.\nRestore: Unminimizes or unmaximizes the window, if necessary. The window is also shown and activated, if necessary.\nNoActivate: Unminimizes or unmaximizes the window, if necessary. The window is also shown without activating it.\nNA: Shows the window without activating it. If the window is minimized, it will stay that way but will probably rise higher in the z-order (which is the order seen in the alt-tab selector). If the window was previously hidden, this will probably cause it to appear on top of the active window even though the active window is not deactivated.\nHide: Hides the window and activates the one beneath it. This is identical in function to Gui.Hide except that it allows a hidden window to be moved or resized without showing it. For example: MyGui.Show(\"Hide x55 y66 w300 h200\").\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf omitted or 1 (true), the window will be hidden. If 0 (false), the window will not be hidden.\n",
					"nome": "Hide"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe control's HWND. This is present only in the two-parameter mode.\n",
					"nome": "Hwnd"
				}
			],
			[
				{
					"desc": "Type: GuiControl\nThe control's object.\n",
					"nome": "Ctrl"
				}
			]
		]
	},
	"GuiControl Object": {
		"desc": "Provides an interface for modifying GUI controls and retrieving information about them. Gui.Add, Gui.__Item and GuiCtrlFromHwnd return an object of this type.",
		"params": [
			[
				{
					"desc": "Type: Array of Strings\nAn array of strings (e.g. [\"Red\",\"Green\",\"Blue\"]) to be inserted at the end of the control's list. To replace (overwrite) the list instead, use GuiCtrl.Delete beforehand.\n",
					"nome": "Items"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nThis parameter should be 1 for the first entry, 2 for the second, etc.\nIf Value is a string (even a numeric string), the entry whose leading part matches Value will be selected. The search is not case-sensitive. For example, if the control contains the item \"UNIX Text\", specifying the word unix (lowercase) would be enough to select it. For a multi-select ListBox, all matching items are selected.\nIf Value is zero or empty, the current selection is removed.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nThis parameter should be 1 for the first entry, 2 for the second, etc. If omitted, all entries are deleted.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new position, relative to the GUI window's client area, which is the area not including title bar, menu bar, and borders.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new size.\n",
					"nome": "Width, Height"
				}
			],
			[
				{
					"desc": "Type: String\nEither control-specific or general options and styles.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe new cue banner text.\n",
					"nome": "NewText"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf omitted or false, the cue banner is not displayed while the control has the keyboard focus. Specify true to display the cue banner even while the control is focused.\n",
					"nome": "ShowWhenFocused"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nThis parameter should be 1 for the first tab, 2 for the second, etc. If Value is not an integer, the tab whose leading part matches Value will be used. The search is not case-sensitive. For example, if a the control contains the tab \"UNIX Text\", specifying the word unix (lowercase) would be enough to use it. If Value is zero, a blank string or omitted, subsequently controls are added outside the Tab control.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf this parameter is true, Value has to be an exact match, but not case-sensitive.\n",
					"nome": "ExactMatch"
				}
			]
		]
	},
	"GuiCtrlFromHwnd": {
		"desc": "Retrieves the GuiControl object of a GUI control associated with the specified HWND.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe window handle (HWND) of a GUI control, or a child window of such a control (e.g. the Edit control of a ComboBox). The control must have been created by the current script, by calling Add or AddControlType.\n",
					"nome": "Hwnd"
				}
			]
		]
	},
	"GuiFromHwnd": {
		"desc": "Retrieves the Gui object of a GUI window associated with the specified HWND.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe window handle (HWND) of a GUI window previously created by the script, or if RecurseParent is true, any child window of a GUI window created by the script.\n",
					"nome": "Hwnd"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf this parameter is true and Hwnd identifies a child window which is not a GUI, the function searches for and retrieves its closest parent window which is a GUI. Otherwise, the function returns an empty string if Hwnd does not directly identify a GUI window.\n",
					"nome": "RecurseParent"
				}
			]
		]
	},
	"HasBase": {
		"desc": "Returns a non-zero number if the specified value is derived from the specified base object.",
		"params": [
			[
				{
					"desc": "Any value, of any type.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Object\nThe potential base object to test.\n",
					"nome": "BaseObj"
				}
			]
		]
	},
	"HasMethod": {
		"desc": "Returns a non-zero number if the specified value has a method by the specified name.",
		"params": [
			[
				{
					"desc": "Type: Any\nAny value, of any type except ComObject.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String\nThe method name to check for.\nOmit this parameter to check whether Value itself is callable.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "The number of parameters that would be passed to the method or function. If specified, the method's MinParams, MaxParams and IsVariadic properties may be queried to verify that it can accept this number of parameters. If those properties are not present, the parameter count is not verified.\nThis count should not include the implicit this parameter.\nIf omitted (or if the parameter count was not verified), a basic check is performed for a Call method to verify that the object is most likely callable.\n",
					"nome": "ParamCount"
				}
			]
		]
	},
	"HasProp": {
		"desc": "Returns a non-zero number if the specified value has a property by the specified name.",
		"params": [
			[
				{
					"desc": "Type: Any\nAny value, of any type except ComObject.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String\nThe property name to check for.\n",
					"nome": "Name"
				}
			]
		]
	},
	"HotIf / HotIfWin": {
		"desc": "Specifies the criteria for subsequently created or modified hotkey variants.",
		"params": [
			[
				{
					"desc": "Sets blank criteria (turns off context-sensitivity).\n",
					"nome": "(parameter omitted)"
				}
			],
			[
				{
					"desc": "Type: String\nSets the criteria to an existing #HotIf expression. Expression is usually written as a quoted string, but can also be a variable or expression which returns text matching a #HotIf expression. Although this function is unable to create new expressions, it can create new hotkeys using an existing expression. See #HotIf example 5.\nNote: The HotIf function uses the string that you pass to it, not the original source code. Escape sequences are resolved when the script loads, so only the resulting characters are considered; for example, HotIf 'x = \"`t\"' and HotIf 'x = \"' A_Tab '\"' both correspond to #HotIf x = \"`t\".\n",
					"nome": "\"Expression\""
				}
			],
			[
				{
					"desc": "Type: Function Object\nSets the criteria to a given function object. Subsequently-created hotkeys will only execute if calling the given function object yields a non-zero number. This is like HotIf \"Expression\", except that each hotkey can have many variants (one per object). Function must be an object with a call method taking one parameter, the name of the hotkey.\nOnce passed to the HotIf function, the object will never be deleted (but memory will be reclaimed by the OS when the process exits).\nThe \"three-key combination\" Hotkey example uses this mode of HotIf.\n",
					"nome": "Function"
				}
			],
			[
				{
					"desc": "Sets blank criteria (turns off context-sensitivity).\n",
					"nome": "(all parameters omitted)"
				}
			],
			[
				{
					"desc": "Type: String\nSpecifies the window title and other criteria that should be used to identify a window. Depending on which function is called, affected hotkeys and hotstrings are active only while a matching window is active, exists, is not active, or does not exist.\nSince the parameters are evaluated before the function is called, any variable reference becomes permanent at that moment. In other words, subsequent changes to the contents of the variable are not seen by existing hotkeys.\nWinTitle and WinText have the same meaning as for WinActive or WinExist, but only strings can be used, and they are evaluated according to the default settings for SetTitleMatchMode and DetectHiddenWindows as set by the auto-execute thread. See WinTitle for details.\n",
					"nome": "WinTitle, WinText"
				}
			]
		]
	},
	"Hotkey": {
		"desc": "Creates, modifies, enables, or disables a hotkey while the script is running.",
		"params": [
			[
				{
					"desc": "Type: String\nName of the hotkey's activation key, including any modifier symbols. For example, specify #c for the Win+C hotkey.\nIf KeyName already exists as a hotkey -- either by the Hotkey function or a double-colon label in the script -- that hotkey will be updated with the values of the function's other parameters.\nWhen specifying an existing hotkey, KeyName is not case-sensitive. However, the names of keys must be spelled the same as in the existing hotkey (e.g. Esc is not the same as Escape for this purpose). Also, the order of modifier symbols such as ^!+# does not matter. GetKeyName can be used to retrieve the standard spelling of a key name.\nWhen a hotkey is first created -- either by the Hotkey function or the double-colon syntax in the script -- its key name and the ordering of its modifier symbols becomes the permanent name of that hotkey as reflected by A_ThisHotkey and Action's parameter. This name is shared by all variants of the hotkey, and does not change even if the Hotkey function later accesses the hotkey with a different symbol ordering.\nIf the hotkey variant already exists, its behavior is updated according to whether KeyName includes or excludes the tilde (~) prefix.\nThe use hook ($) prefix can be added to existing hotkeys. This prefix affects all variants of the hotkey and cannot be removed.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nAn action name or a function to execute (as a new thread) when the hotkey is pressed. This can be a function object, a hotkey name without trailing colons, or one of the special values listed below.\nIf Action is a function, it is called with one parameter, the name of the hotkey. Hotkeys defined with the double-colon syntax automatically use the parameter name ThisHotkey. Hotkeys can also be assigned a function name without the Hotkey function.\nIf Action is a hotkey name, its original function is used; specifically, the original function of the hotkey variant corresponding to the current HotIf criteria. This is usually used to restore a hotkey's original function after having changed it, but can be used to assign the function of a different hotkey, provided that both hotkeys use the same HotIf criteria.\nThis parameter can be left blank if KeyName already exists as a hotkey, in which case its action will not be changed. This is useful to change only the hotkey's Options.\nNote: If the function is specified but the hotkey is disabled from a previous use of the Hotkey function, the hotkey will remain disabled. To prevent this, include the word ON in Options.\nThis parameter can also be one of the following special values:\nOn: The hotkey becomes enabled. No action is taken if the hotkey is already On.\nOff: The hotkey becomes disabled. No action is taken if the hotkey is already Off.\nToggle: The hotkey is set to the opposite state (enabled or disabled).\nAltTab (and others): These are special Alt-Tab hotkey actions that are described here.\n",
					"nome": "Action"
				}
			],
			[
				{
					"desc": "Type: String\nA string of zero or more of the following options with optional spaces in between. For example: \"On B0\".\nOn: Enables the hotkey if it is currently disabled.\nOff: Disables the hotkey if it is currently enabled. This is typically used to create a hotkey in an initially-disabled state.\nB or B0: Specify the letter B to buffer the hotkey as described in #MaxThreadsBuffer. Specify B0 (B with the number 0) to disable this type of buffering.\nPn: Specify the letter P followed by the hotkey's thread priority. If the P option is omitted when creating a hotkey, 0 will be used.\nS or S0: Specify the letter S to make the hotkey exempt from Suspend, which allows the hotkey to be used to turn Suspend off. Specify S0 (S with the number 0) to remove the exemption, allowing the hotkey to be suspended.\nTn: Specify the letter T followed by a the number of threads to allow for this hotkey as described in #MaxThreadsPerHotkey. For example: T5.\nIn (InputLevel): Specify the letter I (or i) followed by the hotkey's input level. For example: I1.\nIf any of the option letters are omitted and the hotkey already exists, those options will not be changed. But if the hotkey does not yet exist -- that is, it is about to be created by this function -- the options will default to those most recently in effect. For example, the instance of #MaxThreadsBuffer that occurs closest to the bottom of the script will be used. If #MaxThreadsBuffer does not appear in the script, its default setting (OFF in this case) will be used.\n",
					"nome": "Options"
				}
			]
		]
	},
	"Hotstring": {
		"desc": "Creates, modifies, enables, or disables a hotstring while the script is running.",
		"params": [
			[
				{
					"desc": "Type: String\nThe hotstring's trigger string, preceded by the usual colons and option characters. For example, \"::btw\" or \":*:]d\".\nString may be matched to an existing hotstring by considering case-sensitivity (C), word-sensitivity (?), activation criteria (as set by #HotIf or HotIf) and the trigger string. For example, \"::btw\" and \"::BTW\" match unless the case-sensitive mode was enabled as a default, while \":C:btw\" and \":C:BTW\" never match. The C and ? options may be included in String or set as defaults by the #Hotstring directive or a previous call to this function.\nIf the hotstring already exists, any options specified in String are put into effect, while all other options are left as is. However, since hotstrings with C or ? are considered distinct from other hotstrings, it is not possible to add or remove these options. Instead, turn off the existing hotstring and create a new one.\nWhen a hotstring is first created -- either by the Hotstring function or the double-colon syntax in the script -- its trigger string and sequence of option characters becomes the permanent name of that hotstring as reflected by ThisHotkey. This name does not change even if the Hotstring function later accesses the hotstring with different option characters.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThe replacement string, or a function or function object to call (as a new thread) when the hotstring triggers.\nIf Replacement is a function, it is called with one parameter, the name of the hotstring. Hotstrings defined with the double-colon syntax automatically use the parameter name ThisHotkey. Hotstrings can also be assigned a function name without the Hotstring function.\nAll strings are treated as replacement text. To make a hotstring call a function when triggered, pass the function by reference. Note that after reassigning the function of a hotstring, its original function can only be restored if it was given a name.\nThis parameter can be omitted if the hotstring already exists, in which case its replacement will not be changed. This is useful to change only the hotstring's options, or to turn it on or off.\nNote: If this parameter is specified but the hotstring is disabled from a previous use of this function, the hotstring will remain disabled. To prevent this, include the word \"On\" in OnOffToggle.\n",
					"nome": "Replacement"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nOne of the following values:\nOn or 1 (true): Enables the hotstring.\nOff or 0 (false): Disables the hotstring.\nToggle or -1: Sets the hotstring to the opposite state (enabled or disabled).\n",
					"nome": "OnOffToggle"
				}
			]
		]
	},
	"If": {
		"desc": "Specifies one or more statements to execute if an expression evaluates to true.",
		"params": [

		]
	},
	"ImageSearch": {
		"desc": "Searches a region of the screen for an image.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nReferences to the output variables in which to store the X and Y coordinates of the upper-left pixel of where the image was found on the screen (if no match is found, the variables are made blank). Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "&OutputVarX, &OutputVarY"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of the upper left corner of the rectangle to search. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X1, Y1"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of the lower right corner of the rectangle to search. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X2, Y2"
				}
			],
			[
				{
					"desc": "Type: String\nThe file name of an image, which is assumed to be in A_WorkingDir if an absolute path isn't specified. Supported image formats include ANI, BMP, CUR, EMF, Exif, GIF, ICO, JPG, PNG, TIF, and WMF (BMP images must be 16-bit or higher). Other sources of icons include the following types of files: EXE, DLL, CPL, SCR, and other types that contain icon resources.\nOptions: Zero or more of the following options may be also be present immediately before the name of the file. Separate each option from the next with a single space or tab. For example: \"*2 *w100 *h-1 C:\\Main Logo.bmp\".\n*IconN: To use an icon group other than the first one in the file, specify *Icon followed immediately by the number of the group. For example, *Icon2 would load the default icon from the second icon group.\n*n (variation): Specify for n a number between 0 and 255 (inclusive) to indicate the allowed number of shades of variation in either direction for the intensity of the red, green, and blue components of each pixel's color. For example, if *2 is specified and the color of a pixel is 0x444444, any color from 0x424242 to 0x464646 will be considered a match. This parameter is helpful if the coloring of the image varies slightly or if ImageFile uses a format such as GIF or JPG that does not accurately represent an image on the screen. If you specify 255 shades of variation, all colors will match. The default is 0 shades.\n*TransN: This option makes it easier to find a match by specifying one color within the image that will match any color on the screen. It is most commonly used to find PNG, GIF, and TIF files that have some transparent areas (however, icons do not need this option because their transparency is automatically supported). For GIF files, *TransWhite might be most likely to work. For PNG and TIF files, *TransBlack might be best. Otherwise, specify for N some other color name or RGB value (see the color chart for guidance, or use PixelGetColor in its RGB mode). Examples: *TransBlack, *TransFFFFAA, *Trans0xFFFFAA.\n*wn and *hn: Width and height to which to scale the image (this width and height also determines which icon to load from a multi-icon .ICO file). If both these options are omitted, icons loaded from ICO, DLL, or EXE files are scaled to the system's default small-icon size, which is usually 16 by 16 (you can force the actual/internal size to be used by specifying *w0 *h0). Images that are not icons are loaded at their actual size. To shrink or enlarge the image while preserving its aspect ratio, specify -1 for one of the dimensions and a positive number for the other. For example, specifying *w200 *h-1 would make the image 200 pixels wide and cause its height to be set automatically.\nA bitmap or icon handle can be used instead of a filename. For example, \"HBITMAP:*\" handle.\n",
					"nome": "ImageFile"
				}
			]
		]
	},
	"InStr": {
		"desc": "Searches for a given occurrence of a string, from the left or the right.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose content is searched.\n",
					"nome": "Haystack"
				}
			],
			[
				{
					"desc": "Type: String\nThe string to search for.\n",
					"nome": "Needle"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nIf omitted, it defaults to 0 (false). Otherwise, specify one of the following values:\n\"On\" or 1 (True): The search is case-sensitive.\n\"Off\" or 0 (False): The letters A-Z are considered identical to their lowercase counterparts.\n\"Locale\": The search is case-insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like Ä and Ü as identical to theirs. Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared.\n",
					"nome": "CaseSense"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the entire string is searched. Otherwise, specify the position at which to start the search, where 1 is the first character, 2 is the second character, and so on. Negative values count from the end of Haystack, so -1 is the last character, -2 is the second-last, and so on.\nIf Occurrence is omitted, a negative StartingPos causes the search to be conducted from right to left. However, StartingPos has no effect on the direction of the search if Occurrence is specified.\nFor a right-to-left search, StartingPos specifies the position of the last character of the first potential occurence of Needle. For example, InStr(\"abc\", \"bc\",, 2, +1) will find a match but InStr(\"abc\", \"bc\",, 2, -1) will not.\nIf the absolute value of StartingPos is greater than the length of Haystack, 0 is returned.\n",
					"nome": "StartingPos"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to the first match in Haystack. The search is conducted from right to left if StartingPos is negative; otherwise it is conducted from left to right.\nIf Occurrence is positive, the search is always conducted from left to right. Specify 2 for Occurrence to return the position of the second match, 3 for the third match, etc.\nIf Occurrence is negative, the search is always conducted from right to left. For example, -2 searches for the second occurrence from the right.\n",
					"nome": "Occurrence"
				}
			]
		]
	},
	"IniDelete": {
		"desc": "Deletes a value from a standard format .ini file.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the .ini file, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nThe section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter).\n",
					"nome": "Section"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the entire section will be deleted. Otherwise, specify the key name in the .ini file.\n",
					"nome": "Key"
				}
			]
		]
	},
	"IniRead": {
		"desc": "Reads a value, section or list of section names from a standard format .ini file.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the .ini file, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nThe section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter).\n",
					"nome": "Section"
				}
			],
			[
				{
					"desc": "Type: String\nThe key name in the .ini file.\n",
					"nome": "Key"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, an OSError is thrown on failure. Otherwise, specify the value to return on failure, such as if the requested key, section or file is not found.\n",
					"nome": "Default"
				}
			]
		]
	},
	"IniWrite": {
		"desc": "Writes a value or section to a standard format .ini file.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string or number that will be written to the right of Key's equal sign (=).\nIf the text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String\nThe complete content of a section to write to the .ini file, excluding the [SectionName] header. Key must be omitted. Pairs must not contain any blank lines. If the section already exists, everything up to the last key=value pair is overwritten. Pairs can contain lines without an equal sign (=), but this may produce inconsistent results. Comments can be written to the file but are stripped out when they are read back by IniRead.\n",
					"nome": "Pairs"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of the .ini file, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nThe section name in the .ini file, which is the heading phrase that appears in square brackets (do not include the brackets in this parameter).\n",
					"nome": "Section"
				}
			],
			[
				{
					"desc": "Type: String\nThe key name in the .ini file.\n",
					"nome": "Key"
				}
			]
		]
	},
	"InputBox": {
		"desc": "Displays an input box to ask the user to enter a string.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no text. Otherwise, specify the text, which is usually a message to the user indicating what kind of input is expected. If Prompt is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Prompt"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to the current value of A_ScriptName. Otherwise, specify the title of the input box.\n",
					"nome": "Title"
				}
			],
			[
				{
					"desc": "Type: String\nA string of case-insensitive options, with each separated from the last by a space or tab.\nXn Yn: The X and Y coordinates of the dialog. For example, X0 Y0 puts the window at the upper left corner of the desktop. If either coordinate is omitted, the dialog will be centered in that dimension. Either coordinate can be negative to position the dialog partially or entirely off the desktop (or on a secondary monitor in a multi-monitor setup).\nWn Hn: The width and height of the dialog's client area, which excludes the title bar and borders. For example, W200 H100.\nT: Specifies the timeout in seconds. For example, T10.0 is ten seconds. If this value exceeds 2147483 (24.8 days), it will be set to 2147483. After the timeout has elapsed, the input box will be automatically closed and Result will be set to word \"Timeout\". Value will still contain what the user entered.\nPassword: Mask the user's input. To specify which character is used, follow this example: Password*\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no string. Otherwise, specify a string that will appear in the input box's edit field when the dialog first appears. The user can change it by backspacing or other means.\n",
					"nome": "Default"
				}
			]
		]
	},
	"InputHook": {
		"desc": "Creates an object which can be used to collect or intercept keyboard input.",
		"params": [
			[
				{
					"desc": "Type: String\nA string of zero or more of the following options (in any order, with optional spaces in between):\nB: Sets BackspaceIsUndo to false, which causes Backspace to be ignored.\nC: Sets CaseSensitive to true, making MatchList case-sensitive.\nI: Sets MinSendLevel to 1 or a given value, causing any input with send level below this value to be ignored. For example, I2 would ignore any input with a level of 0 (the default) or 1, but would capture input at level 2.\nL: Length limit (e.g. L5). The maximum allowed length of the input. When the text reaches this length, the Input is terminated and EndReason is set to the word Max (unless the text matches one of the MatchList phrases, in which case EndReason is set to the word Match). If unspecified, the length limit is 1023.\nSpecifying L0 disables collection of text and the length limit, but does not affect which keys are counted as producing text (see VisibleText). This can be useful in combination with OnChar, OnKeyDown, KeyOpt or EndKeys.\nM: Modified keystrokes such as Ctrl+A through Ctrl+Z are recognized and transcribed if they correspond to real ASCII characters. Consider this example, which recognizes Ctrl+C:\nNote: The characters Ctrl+A through Ctrl+Z correspond to Chr(1) through Chr(26). Also, the M option might cause some keyboard shortcuts such as Ctrl+← to misbehave while an Input is in progress.\nT: Sets Timeout (e.g. T3 or T2.5).\nV: Sets VisibleText and VisibleNonText to true. Normally, the user's input is blocked (hidden from the system). Use this option to have the user's keystrokes sent to the active window.\n*: Wildcard. Sets FindAnywhere to true, allowing matches to be found anywhere within what the user types.\nE: Handle single-character end keys by character code instead of by keycode. This provides more consistent results if the active window's keyboard layout is different to the script's keyboard layout. It also prevents key combinations which don't actually produce the given end characters from ending input; for example, if @ is an end key, on the US layout Shift+2 will trigger it but Ctrl+Shift+2 will not (if the E option is used). If the C option is also used, the end character is case-sensitive.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nA list of zero or more keys, any one of which terminates the Input when pressed (the end key itself is not written to the Input buffer). When an Input is terminated this way, EndReason is set to the word EndKey and the EndKey property is set to the name of the key.\nEndKeys uses a format similar to the Send function. For example, specifying {Enter}.{Esc} would cause either Enter, ., or Esc to terminate the Input. To use the braces themselves as end keys, specify {{} and/or {}}.\nTo use Ctrl, Alt, or Shift as end keys, specify the left and/or right version of the key, not the neutral version. For example, specify {LControl}{RControl} rather than {Control}.\nAlthough modified keys such as Alt+C (!c) are not supported, non-alphanumeric characters such as ?!:@&{} by default require Shift or AltGr to be pressed or not pressed depending on how the character is normally typed. If the E option is present, single character key names are interpreted as characters instead, and in those cases the modifier keys must be in the correct state to produce that character. When the E and M options are both used, Ctrl+A through Ctrl+Z are supported by including the corresponding ASCII control characters in EndKeys.\nAn explicit key code such as {vkFF} or {sc001} may also be specified. This is useful in the rare case where a key has no name and produces no visible character when pressed. Its key code can be determined by following the steps at the bottom of the key list page.\n",
					"nome": "EndKeys"
				}
			],
			[
				{
					"desc": "Type: String\nA comma-separated list of key phrases, any of which will cause the Input to be terminated (in which case EndReason will be set to the word Match). The entirety of what the user types must exactly match one of the phrases for a match to occur (unless the * option is present). In addition, any spaces or tabs around the delimiting commas are significant, meaning that they are part of the match string. For example, if MatchList is ABC , XYZ, the user must type a space after ABC or before XYZ to cause a match.\nTwo consecutive commas results in a single literal comma. For example, the following would produce a single literal comma at the end of string: string1,,,string2. Similarly, the following list contains only a single item with a literal comma inside it: single,,item.\nBecause the items in MatchList are not treated as individual parameters, the list can be contained entirely within a variable. For example, MatchList might consist of List1 \",\" List2 \",\" List3 -- where each of the variables contains a large sub-list of match phrases.\n",
					"nome": "MatchList"
				}
			],
			[
				{
					"desc": "Type: String\nA list of keys. Braces are used to enclose key names, virtual key codes or scan codes, similar to the Send function. For example, {Enter}.{{} would apply to Enter, . and {. Specifying a key by name, by {vkNN} or by {scNNN} may produce three different results; see below for details.\nSpecify the string {All} (case-insensitive) on its own to apply KeyOptions to all VK and all SC. KeyOpt may then be called a second time to remove options from specific keys.\n",
					"nome": "Keys"
				}
			],
			[
				{
					"desc": "Type: String\nOne or more of the following single-character options (spaces and tabs are ignored).\n- (minus): Removes any of the options following the -, up to the next +.\n+ (plus): Cancels any previous -, otherwise has no effect.\nE: End key. If enabled, pressing the key terminates Input, sets EndReason to the word EndKey and the EndKey property to the key's normalized name. Unlike the EndKeys parameter, the state of Shift or AltGr is ignored. For example, @ and 2 are both equivalent to {vk32} on the US keyboard layout.\nI: Ignore text. Any text normally produced by this key is ignored, and the key is treated as a non-text key (see VisibleNonText). Has no effect if the key normally does not produce text.\nN: Notify. Causes the OnKeyDown and OnKeyUp callbacks to be called each time the key is pressed.\nS: Suppresses (blocks) the key after processing it. This overrides VisibleText or VisibleNonText until -S is used. +S implies -V.\nV: Visible. Prevents the key from being suppressed (blocked). This overrides VisibleText or VisibleNonText until -V is used. +V implies -S.\n",
					"nome": "KeyOptions"
				}
			],
			[
				{
					"desc": "Type: Float\nThe maximum number of seconds to wait. If Input is still in progress after MaxTime seconds, the method returns and does not terminate Input.\n",
					"nome": "MaxTime"
				}
			]
		]
	},
	"InstallKeybdHook": {
		"desc": "Installs or uninstalls the keyboard hook.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nOmit this parameter or pass true (any non-zero, non-blank value) to require that the hook be installed. Pass false to remove any requirement previously set by this function and potentially uninstall the hook.\n",
					"nome": "Install"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf Force is true and Install is omitted or true, the hook is uninstalled and reinstalled. This has the effect of giving it precedence over any hooks previously installed by other processes. If the system has stopped calling the hook due to an unresponsive program, reinstalling the hook might get it working again.\nIf Force is true and Install is false, the hook is uninstalled even if needed for some other purpose. If a hotkey, hotstring or InputHook requires the hook, it will stop working until the hook is reinstalled. The hook may be reinstalled explicitly by calling this function, or automatically as a side-effect of enabling or disabling a hotkey or calling some other function which requires the hook.\nIf Force is false, an internal variable is updated to indicate whether the hook is required by the script, but there might be no immediate change if the hook is required for some other purpose.\n",
					"nome": "Force"
				}
			]
		]
	},
	"InstallMouseHook": {
		"desc": "Installs or uninstalls the mouse hook.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nOmit this parameter or pass true (any non-zero, non-blank value) to require that the hook be installed. Pass false to remove any requirement previously set by this function and potentially uninstall the hook.\n",
					"nome": "Install"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf Force is true and Install is omitted or true, the hook is uninstalled and reinstalled. This has the effect of giving it precedence over any hooks previously installed by other processes. If the system has stopped calling the hook due to an unresponsive program, reinstalling the hook might get it working again.\nIf Force is true and Install is false, the hook is uninstalled even if needed for some other purpose. If a hotkey, hotstring or InputHook requires the hook, it will stop working until the hook is reinstalled. The hook may be reinstalled explicitly by calling this function, or automatically as a side-effect of enabling or disabling a hotkey or calling some other function which requires the hook.\nIf Force is false, an internal variable is updated to indicate whether the hook is required by the script, but there might be no immediate change if the hook is required for some other purpose.\n",
					"nome": "Force"
				}
			]
		]
	},
	"Integer": {
		"desc": "Converts a numeric string or floating-point value to an integer.",
		"params": [

		]
	},
	"Is Functions": {
		"desc": "These functions perform various checks. There are three categories:",
		"params": [

		]
	},
	"IsLabel": {
		"desc": "Returns a non-zero number if the specified label exists in the current scope.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a label. The trailing colon should not be included.\n",
					"nome": "LabelName"
				}
			]
		]
	},
	"IsObject": {
		"desc": "Returns a non-zero number if the specified value is an object.",
		"params": [
			[
				{
					"desc": "Type: Any\nThe value to check.\n",
					"nome": "Value"
				}
			]
		]
	},
	"IsSet / IsSetRef": {
		"desc": "Returns a non-zero number if the specified variable has been assigned a value.",
		"params": [
			[
				{
					"desc": "Type: Variable\nA direct variable reference. For example: IsSet(MyVar).\n",
					"nome": "Var"
				}
			],
			[
				{
					"desc": "Type: VarRef\nAn indirect reference to the variable. This would usually not be passed directly, as in IsSetRef(&MyVar), but indirectly, such as to check a parameter containing a VarRef prior to dereferencing it. \n",
					"nome": "&Ref"
				}
			]
		]
	},
	"KeyHistory": {
		"desc": "Displays script info and a history of the most recent keystrokes and mouse clicks.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, the script's main window will be shown, equivalent to selecting the \"View->Key history\" menu item. Otherwise, specify the maximum number of keyboard and mouse events that can be recorded for display in the window (limit 500). The key history is also reset, but the main window is not shown or refreshed. Specify 0 to disable key history entirely.\n",
					"nome": "MaxEvents"
				}
			]
		]
	},
	"KeyWait": {
		"desc": "Waits for a key or mouse/controller button to be released or pressed down.",
		"params": [
			[
				{
					"desc": "Type: String\nThis can be just about any single character from the keyboard or one of the key names from the key list, such as a mouse/controller button. Controller attributes other than buttons are not supported.\nAn explicit virtual key code such as vkFF may also be specified. This is useful in the rare case where a key has no name and produces no visible character when pressed. Its virtual key code can be determined by following the steps at the bottom of the key list page.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the function will wait indefinitely for the specified key or mouse/controller button to be physically released by the user. However, if the keyboard hook is not installed and KeyName is a keyboard key released artificially by means such as the Send function, the key will be seen as having been physically released. The same is true for mouse buttons when the mouse hook is not installed.\nOtherwise, specify a string of one or more of the following options (in any order, with optional spaces in between):\nD: Wait for the key to be pushed down.\nL: Check the logical state of the key, which is the state that the OS and the active window believe the key to be in (not necessarily the same as the physical state). This option is ignored for controller buttons.\nT: Timeout (e.g. T3). The number of seconds to wait before timing out and returning 0. If the key or button achieves the specified state, the function will not wait for the timeout to expire. Instead, it will immediately return 1.\nThe timeout value can be a floating point number such as 2.5, but it should not be a hexadecimal value such as 0x03.\n",
					"nome": "Options"
				}
			]
		]
	},
	"ListHotkeys": {
		"desc": "Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the keyboard or mouse hook.",
		"params": [

		]
	},
	"ListLines": {
		"desc": "Enables or disables line logging or displays the script lines most recently executed.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, the history of lines most recently executed is shown. Otherwise, specify one of the following values, which affects only the behavior of the current thread as follows:\n1 or True: Include subsequently-executed lines in the history. This is the starting default for all scripts.\n0 or False: Omit subsequently-executed lines from the history.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"ListVars": {
		"desc": "Displays the script's variables: their names and current contents.",
		"params": [

		]
	},
	"ListView": {
		"desc": "A ListView is one of the most elaborate controls provided by the operating system. In its most recognizable form, it displays a tabular view of rows and columns, the most common example of which is Explorer's list of files and folders (detail view).",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. To remove an option, precede it with a minus sign. To add an option, a plus sign is permitted but not required.\nCheck: Shows a checkmark in the row (if the ListView has checkboxes). To later uncheck it, use LV.Modify(RowNumber, \"-Check\").\nCol: Specify the word Col followed immediately by the column number at which to begin applying the parameters Col1 and beyond. This is most commonly used with the Modify method to alter individual fields in a row without affecting those that lie to their left.\nFocus: Sets keyboard focus to the row (often used in conjunction with the Select option below). To later de-focus it, use LV.Modify(RowNumber, \"-Focus\").\nIcon: Specify the word Icon followed immediately by the number of this row's icon, which is displayed in the left side of the first column. If this option is absent, the first icon in the ImageList is used. To display a blank icon, specify -1 or a number that is larger than the number of icons in the ImageList. If the control lacks a small-icon ImageList, no icon is displayed nor is any space reserved for one in report view.\nThe Icon option accepts a one-based icon number, but this is internally translated to a zero-based index; therefore, Icon0 corresponds to the constant I_IMAGECALLBACK, which is normally defined as -1, and Icon-1 corresponds to I_IMAGENONE. Other out of range values may also cause a blank space where the icon would be.\nSelect: Selects the row. To later deselect it, use LV.Modify(RowNumber, \"-Select\"). When selecting rows, it is usually best to ensure that at least one row always has the focus property because that allows the Apps key to display its context menu (if any) near the focused row. The word Select may optionally be followed immediately by a 0 or 1 to indicate the starting state. In other words, both \"Select\" and \"Select\" . VarContainingOne are the same (the period used here is the concatenation operator). This technique also works with the Focus and Check options above.\nVis: Ensures that the specified row is completely visible by scrolling the ListView, if necessary. This has an effect only for LV.Modify; for example: LV.Modify(RowNumber, \"Vis\").\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe columns of the new row, which can be text or numeric (including numeric expression results). To make any field blank, specify \"\" or the equivalent. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored.\n",
					"nome": "Col1, Col2, ..."
				}
			],
			[
				{
					"desc": "Type: Integer\nThe row number of the newly inserted row. Any rows at or beneath RowNumber are shifted downward to make room for the new row. If RowNumber is greater than the number of rows in the list (even as high as 2147483647), the new row is added to the end of the list.\n",
					"nome": "RowNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list above.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe columns of the new row, which can be text or numeric (including numeric expression results). To make any field blank, specify \"\" or the equivalent. If there are too few fields to fill all the columns, the columns at the end are left blank. If there are too many fields, the fields at the end are completely ignored.\n",
					"nome": "Col1, Col2, ..."
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number of the row to modify. If 0, all rows in the control are modified.\n",
					"nome": "RowNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list above. The Col option may be used to update specific columns without affecting the others.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe new columns of the specified row, which can be text or numeric (including numeric expression results). To make any field blank, specify \"\" or the equivalent. If there are too few parameters to cover all the columns, the columns at the end are not changed. If there are too many fields, the fields at the end are completely ignored.\n",
					"nome": "NewCol1, NewCol2, ..."
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, all rows in the ListView are deleted. Otherwise, specify the number of the row to delete.\n",
					"nome": "RowNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf this and the other parameters are all omitted, the width of every column is adjusted to fit the contents of the rows. This has no effect when not in Report (Details) view.\nOtherwise, specify the number of the column to modify. The first column is 1 (not 0).\n",
					"nome": "ColumnNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to Auto (adjusts the column's width to fit its contents). Otherwise, specify one or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. To remove an option, precede it with a minus sign. To add an option, a plus sign is permitted but not required.\nGeneral options:\nN: Specify for N the new width of the column, in pixels. This number can be unquoted if is the only option. For example, the following are both valid: LV.ModifyCol(1, 50) and LV.ModifyCol(1, \"50 Integer\").\nAuto: Adjusts the column's width to fit its contents. This has no effect when not in Report (Details) view.\nAutoHdr: Adjusts the column's width to fit its contents and the column's header text, whichever is wider. If applied to the last column, it will be made at least as wide as all the remaining space in the ListView. It is usually best to apply this setting only after the rows have been added because that allows any newly-arrived vertical scroll bar to be taken into account when sizing the last column. This has no effect when not in Report (Details) view.\nIcon: Specify the word Icon followed immediately by the number of the ImageList's icon to display next to the column header's text. Specify -Icon (minus icon) to remove any existing icon.\nIconRight: Puts the icon on the right side of the column rather than the left.\nData type options:\nFloat: For sorting purposes, indicates that this column contains floating point numbers (hexadecimal format is not supported). Sorting performance for Float and Text columns is up to 25 times slower than it is for integers.\nInteger: For sorting purposes, indicates that this column contains integers. To be sorted properly, each integer must be 32-bit; that is, within the range -2147483648 to 2147483647. If any of the values are not integers, they will be considered zero when sorting (unless they start with a number, in which case that number is used). Numbers may appear in either decimal or hexadecimal format (e.g. 0xF9E0).\nText: Changes the column back to text-mode sorting, which is the initial default for every column. Only the first 8190 characters of text are significant for sorting purposes (except for the Logical option, in which case the limit is 4094).\nAlignment options:\nCenter: Centers the text in the column. To center an Integer or Float column, specify the word Center after the word Integer or Float.\nLeft: Left-aligns the column's text, which is the initial default for every column. On older operating systems, the first column might have a forced left-alignment.\nRight: Right-aligns the column's text. This attribute need not be specified for Integer and Float columns because they are right-aligned by default. That default can be overridden by specifying something such as \"Integer Left\" or \"Float Center\".\nSorting options:\nCase: The sorting of the column is case-sensitive (affects only text columns). If the options Case, CaseLocale, and Logical are all omitted, the uppercase letters A-Z are considered identical to their lowercase counterparts for the purpose of the sort.\nCaseLocale: The sorting of the column is case-insensitive based on the current user's locale (affects only text columns). For example, most English and Western European locales treat the letters A-Z and ANSI letters like Ä and Ü as identical to their lowercase counterparts. This method also uses a \"word sort\", which treats hyphens and apostrophes in such a way that words like \"coop\" and \"co-op\" stay together.\nDesc: Descending order. The column starts off in descending order the first time the user sorts it.\nLogical: Same as CaseLocale except that any sequences of digits in the text are treated as true numbers rather than mere characters. For example, the string \"T33\" would be considered greater than \"T4\". Logical and Case are currently mutually exclusive: only the one most recently specified will be in effect.\nNoSort: Prevents a user's click on this column from having any automatic sorting effect. However, the ColClick event is still raised, so the script can respond with a custom sort or other action. To disable sorting for all columns rather than only a subset, include NoSort in the ListView's options.\nSort: Immediately sorts the column in ascending order (even if it has the Desc option).\nSortDesc: Immediately sorts the column in descending order.\nUni: Unidirectional sort. This prevents a second click on the same column from reversing the sort direction.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the current header is left unchanged. Otherwise, specify the new header of the column.\n",
					"nome": "ColumnTitle"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe column number of the newly inserted column. Any column at or on the right side of ColumnNumber are shifted to the right to make room for the new column. The first column is 1 (not 0). If ColumnNumber is larger than the number of columns currently in the control, the new column is added next to the last column on the right side.\n",
					"nome": "ColumnNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the column always starts off at its defaults, such as whether or not it uses integer sorting. Otherwise, specify one or more options from the list above.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to an empty header. Otherwise, specify the header of the column.\n",
					"nome": "ColumnTitle"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number of the column to delete. Once a column is deleted, the column numbers of any that lie to its right are reduced by 1. Consequently, calling LV.DeleteCol(2) twice would delete the second and third columns.\n",
					"nome": "ColumnNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the method returns the total number of rows in the control. Otherwise, specify one of the following strings:\nS or Selected: The count includes only the selected/highlighted rows.\nCol or Column: The method returns the number of columns in the control.\n",
					"nome": "Mode"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted or less than 1, the search begins at the top of the list. Otherwise, specify the number of the row at which to begin the search.\n",
					"nome": "StartingRowNumber"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the method searches for the next selected/highlighted row (see the example below). Otherwise, specify one of the following strings:\nC or Checked: Find the next checked row.\nF or Focused: Find the focused row. There is never more than one focused row in the entire list, and sometimes there is none at all.\n",
					"nome": "RowType"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number of the row whose text to be retrieved. If 0, the column header text is retrieved.\n",
					"nome": "RowNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the text in the first column). Otherwise, specify the number of the column where RowNumber is located.\n",
					"nome": "ColumnNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number returned from a previous call to IL_Create.\n",
					"nome": "ImageListID"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the type of icons in the ImageList is detected automatically as large or small. Otherwise, specify 0 for large icons, 1 for small icons, and 2 for state icons (state icons are not yet directly supported, but they could be used via SendMessage).\n",
					"nome": "IconType"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 2. Otherwise, specify the number of icons you expect to put into the list immediately.\n",
					"nome": "InitialCount"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 5. Otherwise, specify the number of icons by which the list will grow each time it exceeds the current list capacity.\n",
					"nome": "GrowCount"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf omitted, it defaults to 0, meaning the ImageList will contain small icons. Otherwise, specify a non-zero value to make the ImageList contain large icons. Icons added to the list are scaled automatically to conform to the system's dimensions for small and large icons.\n",
					"nome": "LargeIcons"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number returned from a previous call to IL_Create.\n",
					"nome": "ImageListID"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of an icon (.ICO), cursor (.CUR), animated cursor (.ANI) file (animated cursors will not actually be animated when displayed in a ListView), or an icon handle such as \"HICON:\" handle. Other sources of icons include the following types of files: EXE, DLL, CPL, SCR, and other types that contain icon resources.\n",
					"nome": "IconFileName"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the first icon group). Otherwise, specify the number of the icon group to be used in the file. If the number is negative, its absolute value is assumed to be the resource ID of an icon within an executable file. In the following example, the default icon from the second icon group would be used: IL_Add(ImageListID, \"C:\\My Application.exe\", 2).\n",
					"nome": "IconNumber"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of a non-icon image such as BMP, GIF, JPG, PNG, TIF, Exif, WMF, and EMF, or a bitmap handle such as \"HBITMAP:\" handle.\n",
					"nome": "PicFileName"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe mask/transparency color number. 0xFFFFFF (the color white) might be best for most pictures.\n",
					"nome": "MaskColor"
				}
			],
			[
				{
					"desc": "Type: Boolean\nSpecify a non-zero value to cause the picture to be scaled to become a single icon, or zero to divide up the image into however many icons can fit into its actual width.\n",
					"nome": "Resize"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number returned from a previous call to IL_Create.\n",
					"nome": "ImageListID"
				}
			]
		]
	},
	"ListViewGetContent": {
		"desc": "Returns a list of items/rows from a ListView.",
		"params": [
			[
				{
					"desc": "Type: String\nSpecifices what to retrieve. If blank or omitted, all the text in the ListView is retrieved. Otherwise, specify zero or more of the following words, each separated from the next with a space or tab:\nSelected: Returns only the selected (highlighted) rows rather than all rows. If none, the return value is blank.\nFocused: Returns only the focused row. If none, the return value is blank.\nCol4: Returns only the fourth column (field) rather than all columns (replace 4 with a number of your choice).\nCount: Returns a single number that is the total number of rows in the ListView.\nCount Selected: Returns the number of selected (highlighted) rows.\nCount Focused: Returns the row number (position) of the focused row (0 if none).\nCount Col: Returns the number of columns in the control (or -1 if the count cannot be determined).\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nThe control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"LoadPicture": {
		"desc": "Loads a picture from file and returns a bitmap or icon handle.",
		"params": [
			[
				{
					"desc": "Type: String\nThe filename of the picture, which is usually assumed to be in A_WorkingDir if an absolute path isn't specified. If the name of a DLL or EXE file is given without a path, it may be loaded from the directory of the current executable (AutoHotkey.exe or a compiled script) or a system directory.\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no options. Otherwise, specify a string of one or more of the following options, each separated from the next with a space or tab:\nWn and Hn: The width and height to load the image at, where n is an integer. If one dimension is omitted or -1, it is calculated automatically based on the other dimension, preserving aspect ratio. If both are omitted, the image's original size is used. If either dimension is 0, the original size is used for that dimension. For example: \"w80 h50\", \"w48 h-1\" or \"w48\" (preserve aspect ratio), \"h0 w100\" (use original height but override width).\nIconn: Indicates which icon to load from a file with multiple icons (generally an EXE or DLL file). For example, \"Icon2\" loads the file's second icon. Any supported image format can be converted to an icon by specifying \"Icon1\". However, the icon is converted back to a bitmap if the OutImageType parameter is omitted.\nGDI+: Use GDI+ to load the image, if available. For example, \"GDI+ w100\".\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored, and the return value will always be a bitmap handle (icons/cursors are converted if necessary) because reliably using or deleting an icon/cursor/bitmap handle requires knowing which type it is. Otherwise, specify a reference to the output variable in which to store a number indicating the type of handle being returned: 0 (IMAGE_BITMAP), 1 (IMAGE_ICON) or 2 (IMAGE_CURSOR).\n",
					"nome": "&OutImageType"
				}
			]
		]
	},
	"Loop (normal)": {
		"desc": "Performs one or more statements repeatedly: either the specified number of times or until Break is encountered.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, the loop continues indefinitely until a Break or Return is encountered. Otherwise, specify how many times (iterations) to perform the loop. However, an explicit blank value or number less than 1 causes the loop to be skipped entirely.\nCount is evaluated only once, right before the loop begins. For instance, if Count is an expression with side-effects such as function calls or assignments, the side-effects occur only once.\nIf Count is enclosed in parentheses, a space or tab is not required. For example: Loop(2)\n",
					"nome": "Count"
				}
			]
		]
	},
	"Loop Files": {
		"desc": "Retrieves the specified files or folders, one at a time.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of a single file or folder, or a wildcard pattern such as \"C:\\Temp\\*.tmp\". FilePattern is assumed to be in A_WorkingDir if an absolute path isn't specified.\nBoth asterisks and question marks are supported as wildcards. A match occurs when the pattern appears in either the file's long/normal name or its 8.3 short name.\nIf this parameter is a single file or folder (i.e. no wildcards) and Mode includes R, more than one match will be found if the specified file name appears in more than one of the folders being searched.\nPatterns longer than 259 characters may fail to find any files due to system limitations (MAX_PATH). This limit can be bypassed by using the \\\\?\\ long path prefix, with some stipulations.\n",
					"nome": "FilePattern"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, only files are included and subdirectories are not recursed into. Otherwise, specify one or more of the following letters:\n",
					"nome": "Mode"
				}
			]
		]
	},
	"Loop Parse": {
		"desc": "Retrieves substrings (fields) from a string, one at a time.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to analyze.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, each character of the input string will be treated as a separate substring.\nIf this parameter is \"CSV\", the string will be parsed in standard comma separated value format. Here is an example of a CSV line produced by MS Excel:\nOtherwise, specify one or more characters (case-sensitive), each of which is used to determine where the boundaries between substrings occur.\nDelimiter characters are not considered to be part of the substrings themselves. In addition, if there is nothing between a pair of delimiter characters within the input string, the corresponding substring will be empty.\nFor example: ',' (a comma) would divide the string based on every occurrence of a comma. Similarly, A_Space A_Tab would start a new substring every time a space or tab is encountered in the input string.\nTo use a string as a delimiter rather than a character, first use StrReplace to replace all occurrences of the string with a single character that is never used literally in the text, e.g. one of these special characters: ¢¤¥¦§©ª«®µ¶. Consider this example, which uses the string <br> as a delimiter:\n",
					"nome": "DelimiterChars"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, no characters will be excluded. Otherwise, specify a list of characters (case-sensitive) to exclude from the beginning and end of each substring. For example, if OmitChars is A_Space A_Tab, spaces and tabs will be removed from the beginning and end (but not the middle) of every retrieved substring.\nIf DelimiterChars is blank, OmitChars indicates which characters should be excluded from consideration (the loop will not see them).\n",
					"nome": "OmitChars"
				}
			]
		]
	},
	"Loop Read": {
		"desc": "Retrieves the lines in a text file, one at a time.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the text file whose contents will be read by the loop, which is assumed to be in A_WorkingDir if an absolute path isn't specified. The file's lines may end in carriage return and linefeed (`r`n), just linefeed (`n), or just carriage return (`r).\n",
					"nome": "InputFile"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of the file to be kept open for the duration of the loop, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\nWithin the loop's body, use the FileAppend function without the Filename parameter (i.e. omit it) to append to this special file. Appending to a file in this manner performs better than using FileAppend in its 2-parameter mode because the file does not need to be closed and re-opened for each operation. Remember to include a linefeed (`n) or carriage return and linefeed (`r`n) after the text, if desired.\nThe file is not opened if nothing is ever written to it. This happens if the loop performs zero iterations or if it never calls FileAppend.\nOptions: The end of line (EOL) translation mode and output file encoding depend on which options are passed in the opening call to FileAppend (i.e. the first call which omits Filename). Subsequent calls ignore the Options parameter. EOL translation is not performed by default; that is, linefeed (`n) characters are written as-is unless the \"`n\" option is present.\nStandard Output (stdout): Specifying an asterisk (*) for OutputFile sends any text written by FileAppend to standard output (stdout). Such text can be redirected to a file, piped to another EXE, or captured by fancy text editors. However, text sent to stdout will not appear at the command prompt it was launched from. This can be worked around by 1) compiling the script with the Ahk2Exe ConsoleApp directive, or 2) piping a script's output to another command or program. See FileAppend for more details.\n",
					"nome": "OutputFile"
				}
			]
		]
	},
	"Loop Reg": {
		"desc": "Retrieves the contents of the specified registry subkey, one item at a time.",
		"params": [
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, only values are included and subkeys are not recursed into. Otherwise, specify one or more of the following letters:\n",
					"nome": "Mode"
				}
			]
		]
	},
	"Map Object": {
		"desc": "A Map object associates or maps one set of values, called keys, to another set of values. A key and the value it is mapped to are known as a key-value pair. A map can contain any number of key-value pairs, but each key must be unique.",
		"params": [
			[
				{
					"desc": "Type: Integer, object or String\nAny single key. If the map does not contain this key, an UnsetItemError is thrown.\n",
					"nome": "Key"
				}
			],
			[
				{
					"desc": "Type: Integer, object or String\nThe key.\n",
					"nome": "Key"
				}
			],
			[
				{
					"desc": "The value.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe maximum number of key-value pairs the map should be able to contain before it must be automatically expanded. If setting a value less than the current number of key-value pairs, that number is used instead, and any unused space is freed.\n",
					"nome": "MaxItems"
				}
			],
			[
				{
					"desc": "Type: String\nOne of the following values:\n\"On\": Key lookups are case-sensitive. This is the default setting.\n\"Off\": The letters A-Z are considered identical to their lowercase counterparts.\n\"Locale\": Key lookups are case-insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like Ä and Ü as identical to theirs. Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared.\nWhen assigning a value, the strings \"1\" and \"0\" can also be used.\n",
					"nome": "Setting"
				}
			],
			[
				{
					"desc": "Type: Integer, object or String\nWhen retrieving a value, Key must be a unique value previously associated with another value. An UnsetItemError is thrown if Key has no associated value within the map, unless a Default property is defined, in which case its value is returned.\nWhen assigning a value, Key can be any value to associate with Value; in other words, the key used to later access Value. Float keys are automatically converted to String.\n",
					"nome": "Key"
				}
			]
		]
	},
	"Math Functions": {
		"desc": "Functions for performing various mathematical operations such as rounding, exponentiation, squaring, etc.",
		"params": [

		]
	},
	"Menu/MenuBar Object": {
		"desc": "Used to modify and display menus or menu bars.",
		"params": [
			[
				{
					"desc": "Type: String\nThe text to display on the menu item, or the position& of an existing item to modify. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: Function Object or Menu\nA function object to call as a new thread when the menu item is selected, or a reference to a Menu object to use as a submenu.\nThis parameter is required when creating a new item, but optional when updating the Options of an existing item.\nThe function should accept the following parameters:\n",
					"nome": "Function-or-Submenu"
				}
			],
			[
				{
					"desc": "Type: String\nIf not omitted, Options must be a space- or tab-delimited list of one or more of the following options:\nThe plus sign (+) is optional and can be replaced with minus (-) to remove the option, as in -Radio. Options are not case-sensitive.\nTo change an existing item's options without affecting its callback or submenu, simply omit the Callback-or-Submenu parameter.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of an existing item or a position& between 1 and the current number of items plus 1 (following the same rules as MenuItemName). Items can also be appended by omitting ItemToInsertBefore.\n",
					"nome": "ItemToInsertBefore"
				}
			],
			[
				{
					"desc": "Type: String\nThe text to display on the menu item. Unlike Add, this cannot be a position.\n",
					"nome": "NewItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe new name. If empty or omitted, MenuItemName will be converted into a separator line.\n",
					"nome": "NewName"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nOne of the 16 primary HTML color names, a hexadecimal RGB color string (the 0x prefix is optional), or a pure numeric RGB color value. Omit ColorValue (or specify an empty string or the word \"Default\") to restore the menu to its default color. Example values: \"Silver\", \"FFFFAA\", 0xFFFFAA, \"Default\".\n",
					"nome": "ColorValue"
				}
			],
			[
				{
					"desc": "Type: Boolean\n1 (true) if the color should be applied to all of this menu's submenus, otherwise 0 (false). Defaults to 1 (true).\n",
					"nome": "ApplyToSubmenus"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe path of an icon or image file. For a list of supported formats, see the Picture control.\nA bitmap or icon handle can be used instead of a filename. For example, \"HICON:\" handle.\nOmit FileName or specify an empty string or \"*\" to remove the item's current icon.\n",
					"nome": "FileName"
				}
			],
			[
				{
					"desc": "Type: Integer\nTo use an icon group other than the first one in the file, specify its number for IconNumber (if omitted, it defaults to 1). If IconNumber is negative, its absolute value is assumed to be the resource ID of an icon within an executable file.\n",
					"nome": "IconNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe desired width of the icon. If the icon group indicated by IconNumber contains multiple icon sizes, the closest match is used and the icon is scaled to the specified size. See the Examples section for usage examples.\n",
					"nome": "IconWidth"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe coordinates at which to display the menu. If both X and Y are omitted, the menu is displayed at the current position of the mouse cursor. If only one of them is omitted, the mouse cursor's position will be used for it. X and Y are relative to the active window's client area by default. To override this default, use CoordMode \"Menu\", Mode or A_CoordModeMenu := Mode.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf this parameter is 1 (true), the method will not return until after the menu is closed. Specify 0 (false) to return immediately, allowing the script to continue execution while the menu is being displayed.\nThe default value of this parameter depends on the menu style. If the script has applied the MNS_MODELESS style (typically via DllCall), the default is 0 (no wait); otherwise, the default is 1 (wait).\n",
					"nome": "Wait [v2.1-alpha.1+]"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\n",
					"nome": "MenuItemName"
				}
			],
			[
				{
					"desc": "Type: Integer\nSpecify 1 to allow a single-click to select the tray menu's default menu item. Specify 2 to return to the default behavior (double-click).\n",
					"nome": "Count"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of the default menu item, or an empty string if there is no default.\n",
					"nome": "CurrentDefault"
				}
			],
			[
				{
					"desc": "Type: String\nThe name or position of a menu item. See MenuItemName.\nIf MenuItemName is an empty string, there will be no default.\n",
					"nome": "MenuItemName"
				}
			]
		]
	},
	"MenuFromHandle": {
		"desc": "Retrieves the Menu or MenuBar object corresponding to a Win32 menu handle.",
		"params": [
			[
				{
					"desc": "Type: Integer\nA handle to a Win32 menu (of type HMENU).\n",
					"nome": "Handle"
				}
			]
		]
	},
	"MenuSelect": {
		"desc": "Invokes a menu item from the menu bar of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: String\nThe name (or a prefix of the name) of the top-level menu item, e.g. \"File\", \"Edit\", \"View\". It can also be the position of the desired menu item by using \"1&\" to represent the first menu, \"2&\" the second, and so on.\nThe search is case-insensitive according to the rules of the current user's locale, and stops at the first matching item. The use of ampersand (&) to indicate the underlined letter in a menu item is usually not necessary (i.e. \"&File\" is the same as \"File\").\nKnown limitation: If the parameter contains an ampersand, it must match the item name exactly, including all non-literal ampersands (which are hidden or displayed as an underline). If the parameter does not contain an ampersand, all ampersands are ignored, including literal ones. For example, an item displayed as \"a & b\" may match a parameter value of a && b or a b.\nSpecify \"0&\" to use the window's system menu.\n",
					"nome": "Menu"
				}
			],
			[
				{
					"desc": "Type: String\nThe name of the menu item to select or its position. This can be omitted if the top-level item does not contain a menu (rare).\n",
					"nome": "SubMenu1"
				}
			],
			[
				{
					"desc": "Type: String\nIf the previous submenu itself contains a menu, this is the name of the menu item inside, or its position.\n",
					"nome": "SubMenu2, SubMenu3, SubMenu4, SubMenu5, SubMenu6"
				}
			]
		]
	},
	"Monitor Functions": {
		"desc": "Functions for retrieving screen resolution and multi-monitor info. Click on a function name for details.",
		"params": [

		]
	},
	"MonitorGet": {
		"desc": "Checks if the specified monitor exists and optionally retrieves its bounding coordinates.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe monitor number, between 1 and the number returned by MonitorGetCount. If omitted, the primary monitor is used.\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: VarRef\nReferences to the output variables in which to store the bounding coordinates, in pixels.\n",
					"nome": "&Left"
				}
			]
		]
	},
	"MonitorGetCount": {
		"desc": "Returns the total number of monitors.",
		"params": [

		]
	},
	"MonitorGetName": {
		"desc": "Returns the operating system's name of the specified monitor.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe monitor number, between 1 and the number returned by MonitorGetCount. If omitted, the primary monitor is used.\n",
					"nome": "N"
				}
			]
		]
	},
	"MonitorGetPrimary": {
		"desc": "Returns the number of the primary monitor.",
		"params": [

		]
	},
	"MonitorGetWorkArea": {
		"desc": "Checks if the specified monitor exists and optionally retrieves the bounding coordinates of its working area.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe monitor number, between 1 and the number returned by MonitorGetCount. If omitted, the primary monitor is used.\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: VarRef\nReferences to the output variables in which to store the bounding coordinates of the working area, in pixels.\n",
					"nome": "&Left"
				}
			]
		]
	},
	"MouseClick": {
		"desc": "Clicks or holds down a mouse button, or turns the mouse wheel. Note: The Click function is generally more flexible and easier to use.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to Left (the left mouse button). Otherwise, specify the button to click or the rotate/push direction of the mouse wheel.\nButton: Left, Right, Middle (or just the first letter of each of these); or X1 (fourth button) or X2 (fifth button). For example: MouseClick \"X1\".\nLeft and Right correspond to the primary button and secondary button. If the user swaps the buttons via system settings, the physical positions of the buttons are swapped but the effect stays the same.\nMouse wheel: Specify WheelUp or WU to turn the wheel upward (away from you); specify WheelDown or WD to turn the wheel downward (toward you). Specify WheelLeft (or WL) or WheelRight (or WR) to push the wheel left or right, respectively. ClickCount is the number of notches to turn the wheel.\n",
					"nome": "WhichButton"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the cursor's current position is used. Otherwise, specify the X and Y coordinates to which the mouse cursor is moved prior to clicking. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify the number of times to click the mouse button or turn the mouse wheel.\n",
					"nome": "ClickCount"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used. Otherwise, specify the speed to move the mouse in the range 0 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly.\nSpeed is ignored for SendInput/Play modes; they move the mouse instantaneously (though SetMouseDelay has a mode that applies to SendPlay). To visually move the mouse more slowly -- such as a script that performs a demonstration for an audience -- use SendEvent \"{Click 100 200}\" or SendMode \"Event\" (optionally in conjuction with BlockInput).\n",
					"nome": "Speed"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, each click consists of a down-event followed by an up-event. Otherwise, specify one of the following letters:\nD: Press the mouse button down but do not release it (i.e. generate a down-event).\nU: Release the mouse button (i.e. generate an up-event).\n",
					"nome": "DownOrUp"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the X and Y coordinates will be used for absolute positioning. Otherwise, specify the following letter:\nR: The X and Y coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X pixels to the right (left if negative) and Y pixels down (up if negative).\n",
					"nome": "Relative"
				}
			]
		]
	},
	"MouseClickDrag": {
		"desc": "Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to Left (the left mouse button). Otherwise, specify Left, Right, Middle (or just the first letter of each of these); or X1 (fourth button) or X2 (fifth button). For example: MouseClickDrag \"X1\", 0, 0, 10, 10.\nLeft and Right correspond to the primary button and secondary button. If the user swaps the buttons via system settings, the physical positions of the buttons are swapped but the effect stays the same.\n",
					"nome": "WhichButton"
				}
			],
			[
				{
					"desc": "Type: Integer\nSpecify the X and Y coordinates of the drag's starting position (the mouse will be moved to these coordinates right before the drag is started). Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n[v2.0.7+]: If both X1 and Y1 are omitted, the mouse cursor's current position is used. Due to a bug, X1 and Y1 were mandatory in previous versions.\n",
					"nome": "X1, Y1"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates to drag the mouse to (that is, while the button is held down). Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X2, Y2"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used. Otherwise, specify the speed to move the mouse in the range 0 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly.\nSpeed is ignored for SendInput/Play modes; they move the mouse instantaneously (though SetMouseDelay has a mode that applies to SendPlay). To visually move the mouse more slowly -- such as a script that performs a demonstration for an audience -- use SendEvent \"{Click 100 200}\" or SendMode \"Event\" (optionally in conjuction with BlockInput).\n",
					"nome": "Speed"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the X and Y coordinates will be used for absolute positioning. Otherwise, specify the following letter:\nR: The X1 and Y1 coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X1 pixels to the right (left if negative) and Y1 pixels down (up if negative). Similarly, the X2 and Y2 coordinates will be treated as offsets from the X1 and Y1 coordinates. For example, the following would first move the cursor down and to the right by 5 pixels from its starting position, and then drag it from that position down and to the right by 10 pixels: MouseClickDrag \"Left\", 5, 5, 10, 10, , \"R\".\n",
					"nome": "Relative"
				}
			]
		]
	},
	"MouseGetPos": {
		"desc": "Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates. The retrieved coordinates are relative to the active window's client area unless CoordMode was used to change to screen coordinates.\n",
					"nome": "&OutputVarX, &OutputVarY"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the unique ID number of the window under the mouse cursor. If the window cannot be determined, this variable will be made blank.\nThe window does not have to be active to be detected. Hidden windows cannot be detected.\n",
					"nome": "&OutputVarWin"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the name (ClassNN) of the control under the mouse cursor. If the control cannot be determined, this variable will be made blank.\nThe names of controls should always match those shown by the Window Spy. The window under the mouse cursor does not have to be active for a control to be detected.\n",
					"nome": "&OutputVarControl"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0, meaning the function uses the default method to determine OutputVarControl and stores the control's ClassNN. Otherwise, specify a combination (sum) of the following numbers:\n1: Uses a simpler method to determine OutputVarControl. This method correctly retrieves the active/topmost child window of an Multiple Document Interface (MDI) application such as SysEdit or TextPad. However, it is less accurate for other purposes such as detecting controls inside a GroupBox control.\n2: Stores the control's HWND in OutputVarControl rather than the control's ClassNN.\nFor example, to put both options into effect, the Flag parameter must be set to 3.\n",
					"nome": "Flag"
				}
			]
		]
	},
	"MouseMove": {
		"desc": "Moves the mouse cursor.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates to move the mouse to. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the default speed (as set by SetDefaultMouseSpeed or 2 otherwise) will be used. Otherwise, specify the speed to move the mouse in the range 0 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly.\nSpeed is ignored for SendInput/Play modes; they move the mouse instantaneously (though SetMouseDelay has a mode that applies to SendPlay). To visually move the mouse more slowly -- such as a script that performs a demonstration for an audience -- use SendEvent \"{Click 100 200}\" or SendMode \"Event\" (optionally in conjuction with BlockInput).\n",
					"nome": "Speed"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the X and Y coordinates will be used for absolute positioning. Otherwise, specify the following letter:\nR: The X and Y coordinates will be treated as offsets from the current mouse position. In other words, the cursor will be moved from its current position by X pixels to the right (left if negative) and Y pixels down (up if negative).\n",
					"nome": "Relative"
				}
			]
		]
	},
	"MsgBox": {
		"desc": "Displays the specified text in a small window containing one or more buttons (such as Yes and No).",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted and \"OK\" is the only button present, it defaults to the string \"Press OK to continue.\". If omitted in any other case, it defaults to an empty string. Otherwise, specify the text to display inside the message box.\nEscape sequences can be used to denote special characters. For example, `n indicates a linefeed character, which ends the current line and begins a new one. Thus, using text1`n`ntext2 would create a blank line between text1 and text2.\nIf Text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Text"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, it defaults to the current value of A_ScriptName. Otherwise, specify the title of the message box.\n",
					"nome": "Title"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to 0 (only an OK button is displayed). Otherwise, specify a combination (sum) of values or a string of one or more options from the tables below to indicate the type of message box and the possible button combinations.\nIn addition, zero or more of the following options can be specified:\nOwner: To specify an owner window for the message box, use the word Owner followed immediately by a HWND (window ID).\nT: Timeout. To have the message box close automatically if the user has not closed it within a specified time, use the letter T followed by the timeout in seconds, which can contain a decimal point. If this value exceeds 2147483 (24.8 days), it will be set to 2147483. If the message box times out, the return value is the word Timeout.\n",
					"nome": "Options"
				}
			]
		]
	},
	"NumGet": {
		"desc": "Returns the binary number stored at the specified address+offset.",
		"params": [
			[
				{
					"desc": "Type: Object or Integer\nA Buffer-like object or memory address.\nAny object which implements Ptr and Size properties may be used, but this function is optimized for the native Buffer object. Passing an object with these properties ensures that the function does not read memory from an invalid location; doing so could cause crashes or other unpredictable behaviour.\n",
					"nome": "Source"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf blank or omitted (or when using 2-parameter mode), it defaults to 0. Otherwise, specify an offset in bytes which is added to Source to determine the source address.\n",
					"nome": "Offset"
				}
			],
			[
				{
					"desc": "Type: String\nOne of the following strings: UInt, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr\nUnsigned 64-bit integers are not supported, as AutoHotkey's native integer type is Int64. Therefore, to work with numbers greater than or equal to 0x8000000000000000, omit the U prefix and interpret any negative values as large integers. For example, a value of -1 as an Int64 is really 0xFFFFFFFFFFFFFFFF if it is intended to be a UInt64. On 64-bit builds, UPtr is equivalent to Int64.\nThese type names must be enclosed in quotes when used as literal strings.\nFor details see DllCall Types.\n",
					"nome": "Type"
				}
			]
		]
	},
	"NumPut": {
		"desc": "Stores one or more numbers in binary format at the specified address+offset.",
		"params": [
			[
				{
					"desc": "Type: String\nOne of the following strings: UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr\nFor all integer types, or when passing pure integers, signed vs. unsigned does not affect the result due to the use of two's complement to represent signed integers.\nThese type names must be enclosed in quotes when used as literal strings.\nFor details see DllCall Types.\n",
					"nome": "Type"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe number to store.\n",
					"nome": "Number"
				}
			],
			[
				{
					"desc": "Type: Object or Integer\nA Buffer-like object or memory address.\nAny object which implements Ptr and Size properties may be used, but this function is optimized for the native Buffer object. Passing an object with these properties ensures that the function does not write to an invalid memory location; doing so could cause crashes or other unpredictable behaviour.\n",
					"nome": "Target"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify an offset in bytes which is added to Target to determine the target address.\n",
					"nome": "Offset"
				}
			]
		]
	},
	"Number": {
		"desc": "Converts a numeric string to a pure integer or floating-point number.",
		"params": [

		]
	},
	"ObjAddRef / ObjRelease": {
		"desc": "Increments or decrements an object's reference count.",
		"params": [
			[
				{
					"desc": "Type: Integer\nAn unmanaged object pointer or COM interface pointer.\n",
					"nome": "Ptr"
				}
			]
		]
	},
	"ObjBindMethod": {
		"desc": "Creates a BoundFunc object which calls a method of a given object.",
		"params": [
			[
				{
					"desc": "Type: Object\nAny object.\n",
					"nome": "Obj"
				}
			],
			[
				{
					"desc": "Type: String\nA method name. If omitted, the bound function calls Obj itself.\n",
					"nome": "Method"
				}
			],
			[
				{
					"desc": "Any number of parameters.\n",
					"nome": "Params"
				}
			]
		]
	},
	"Object": {
		"desc": "Object is the basic class from which other AutoHotkey object classes derive. Each instance of Object consists of a set of \"own properties\" and a base object, from which more properties are inherited. Objects also have methods, but these are just properties which can be called.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the property.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "Type: Object\nAn object with one of the following own properties, or both Get and Set:\nGet: The function object to call when the property's value is retrieved.\nSet: The function object to call when the property is assigned a value. Its second parameter is the value being assigned.\nCall: The function object to call when the property is called. \nValue: Any value to assign to the property.\n[v2.1-alpha.3+] Type: A reserved type name (string) or class object to specify the type of the property (struct field) for objects derived from Obj, which should be a Prototype object. This and the other properties are mutually-exclusive. See Structures for general information and Using DefineProp for an example.\n",
					"nome": "Desc"
				}
			],
			[
				{
					"desc": "Type: String\nA property name.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "Type: String\nA property name.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "Type: String\nThe property's name.\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "The property's value.\nIf the property has a getter method, it is called to obtain the value (unless Value is omitted).\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new capacity. If less than the current number of own properties, that number is used instead, and any unused space is freed.\n",
					"nome": "MaxProps"
				}
			],
			[
				{
					"desc": "Type: Integer\nSpecify the address of a valid struct as defined by typed properties in Obj.base, or any integer if there are no typed properties.\n",
					"nome": "Ptr"
				}
			]
		]
	},
	"OnClipboardChange": {
		"desc": "Registers a function to be called automatically whenever the clipboard's content changes.",
		"params": [
			[
				{
					"desc": "Type: Function Object\nThe function to call.\nThe callback accepts one parameter and can be defined as follows:\nAlthough the name you give the parameter does not matter, it is assigned one of the following numbers:\nYou can omit the callback's parameter if the corresponding information is not needed, but in this case an asterisk must be specified, e.g. MyCallback(*).\nIf this is the last or only callback, the return value is ignored. Otherwise, it can return a non-zero integer to prevent subsequent callbacks from being called.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"OnCommand": {
		"desc": "Registers a function or method to be called when a control notification is received via the WM_COMMAND message.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe control-defined notification code to monitor.\n",
					"nome": "NotifyCode"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThe function, method or object to call when the event is raised.\nIf the GUI has an event sink (that is, if Gui()'s EventObj parameter was specified), this parameter may be the name of a method belonging to the event sink.\nOtherwise, this parameter must be a function object.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (call the callback after any previously registered callbacks). Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"OnError": {
		"desc": "Registers a function to be called automatically whenever an unhandled error occurs.",
		"params": [
			[
				{
					"desc": "Type: Function Object\nThe function to call.\nThe callback accepts two parameters and can be defined as follows:\nAlthough the names you give the parameters do not matter, the following values are sequentially assigned to them:\nYou can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. MyCallback(Param1, *).\nThe callback can return one of the following values (other values are reserved for future use and should be avoided):\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"OnEvent": {
		"desc": "Registers a function or method to be called when the given event is raised by a GUI window or control.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the event. See Events further below.\n",
					"nome": "EventName"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThe function, method or object to call when the event is raised.\nIf the GUI has an event sink (that is, if Gui()'s EventObj parameter was specified), this parameter may be the name of a method belonging to the event sink.\nOtherwise, this parameter must be a function object.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (call the callback after any previously registered callbacks). Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			],
			[
				{
					"desc": "Type: GuiControl or String (empty)\nThe object of the control that received the event (blank if none).\n",
					"nome": "GuiCtrlObj"
				}
			],
			[
				{
					"desc": "Type: Integer\nWhen a ListBox, ListView, or TreeView is the target of the context menu (as determined by GuiCtrlObj), Item specifies which of the control's items is the target.\nListBox: The number of the currently focused row. Note that a standard ListBox does not focus an item when it is right-clicked, so this might not be the clicked item.\nListView and TreeView: For right-clicks, Item contains the clicked item's ID or row number (or 0 if the user clicked somewhere other than an item). For the AppsKey and Shift-F10, Item contains the selected item's ID or row number.\n",
					"nome": "Item"
				}
			],
			[
				{
					"desc": "Type: Integer (boolean)\nTrue if the user clicked the right mouse button.\r\nFalse if the user pressed Menu or Shift+F10.\n",
					"nome": "IsRightClick"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of where the script should display the menu (e.g. MyContextMenu.Show X, Y). Coordinates are relative to the upper-left corner of the window's client area.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: GuiControl or String (empty)\nThe object of the control upon which the files were dropped (blank if none).\n",
					"nome": "GuiCtrlObj"
				}
			],
			[
				{
					"desc": "Type: Array of Strings\nAn array of filenames, where FileArray[1] is the first file and FileArray.Length returns the number of files. A for-loop can be used to iterate through the files:\n",
					"nome": "FileArray"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of where the files were dropped, relative to the upper-left corner of the window's client area.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nOne of the following values:\nNote that a maximized window can be resized without restoring/un-maximizing it, so a value of 1 does not necessarily mean that this event was raised in response to the user maximizing the window.\n",
					"nome": "MinMax"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe new width and height of the window's client area, which is the area excluding title bar, menu bar, and borders.\n",
					"nome": "Width, Height"
				}
			],
			[
				{
					"desc": "Type: Integer\nFor Slider controls, Info is a numeric value indicating how the slider moved. For details, see Detecting Changes (Slider).\nFor all other controls, Info currently has no meaning.\n",
					"nome": "Info"
				}
			],
			[
				{
					"desc": "Type: Integer\nListView: The row number of the clicked item, or 0 if the mouse was not over an item.\nTreeView: The ID of the clicked item, or 0 if the mouse was not over an item.\nLink: The link's ID attribute (a string) if it has one, otherwise the link's index (an integer).\nStatusBar: The part number of the clicked section (however, the part number might be a very large integer if the user clicks near the sizing grip at the right side of the bar).\nFor all other controls, Info currently has no meaning.\n",
					"nome": "Info"
				}
			],
			[
				{
					"desc": "Type: String\nLink: The link's HREF attribute. Note that if a Click event callback is registered, the HREF attribute is not automatically executed.\n",
					"nome": "Href"
				}
			],
			[
				{
					"desc": "Type: Integer\nListView, TreeView and StatusBar: Same as for the Click event.\nListBox: The position of the focused item. Double-clicking empty space below the last item usually focuses the last item and leaves the selection as it was.\n",
					"nome": "Info"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe one-based column number that was clicked. This is the original number assigned when the column was created; that is, it does not reflect any dragging and dropping of columns done by the user.\n",
					"nome": "Info"
				}
			],
			[
				{
					"desc": "Reserved.\n",
					"nome": "Info"
				}
			]
		]
	},
	"OnExit": {
		"desc": "Registers a function to be called automatically whenever the script exits.",
		"params": [
			[
				{
					"desc": "Type: Function Object\nThe function to call.\nThe callback accepts two parameters and can be defined as follows:\nAlthough the names you give the parameters do not matter, the following values are sequentially assigned to them:\nYou can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. MyCallback(Param1, *).\nThe callback can return a non-zero integer to prevent the script from exiting (with some rare exceptions) and calling more callbacks. Otherwise, the script exits after all registered callbacks are called.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"OnMessage": {
		"desc": "Registers a function to be called automatically whenever the script receives the specified message.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe number of the message to monitor or query, which should be between 0 and 4294967295 (0xFFFFFFFF). If you do not wish to monitor a system message (that is, one below 0x0400), it is best to choose a number greater than 4096 (0x1000) to the extent you have a choice. This reduces the chance of interfering with messages used internally by current and future versions of AutoHotkey.\n",
					"nome": "MsgNumber"
				}
			],
			[
				{
					"desc": "Type: Function Object\nThe function to call.\nThe callback accepts four parameters and can be defined as follows:\nAlthough the names you give the parameters do not matter, the following values are sequentially assigned to them:\nYou can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. MyCallback(Param1, *).\nWPARAM and LPARAM are unsigned 32-bit integers (from 0 to 232-1) or signed 64-bit integers (from -263 to 263-1) depending on whether the exe running the script is 32-bit or 64-bit. For 32-bit scripts, if an incoming parameter is intended to be a signed integer, any negative numbers can be revealed by following this example:\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1, meaning the callback is limited to one thread at a time. This is usually best because otherwise, the script would process messages out of chronological order whenever the callback interrupts itself. Therefore, as an alternative to MaxThreads, consider using Critical as described below.\nIf the callback directly or indirectly causes the message to be sent again while the callback is still running, it is necessary to specify a MaxThreads value greater than 1 or less than -1 to allow the callback to be called for the new message (if desired). Messages sent (not posted) by the script's own process to itself cannot be delayed or buffered.\nSpecify 0 to unregister the previously registered callback identified by Callback.\nBy default, when multiple callbacks are registered for a single MsgNumber, they are called in the order that they were registered. To register a callback to be called before any previously registered callbacks, specify a negative value for MaxThreads. For example, OnMessage Msg, Fn, -2 registers Fn to be called before any other callbacks previously registered for Msg, and allows Fn a maximum of 2 threads. However, if the callback is already registered, the order will not change unless it is unregistered and then re-registered.\n",
					"nome": "MaxThreads"
				}
			]
		]
	},
	"OnMessage (GUI) [v2.1-alpha.7+]": {
		"desc": "Registers a function or method to be called whenever the Gui receives the specified message.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe number of the message to monitor.\n",
					"nome": "MsgNumber"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThe function, method or object to call when the message is received.\nIf the GUI has an event sink (that is, if Gui()'s EventObj parameter was specified), this parameter may be the name of a method belonging to the event sink.\nOtherwise, this parameter must be a function object.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (call the callback after any previously registered callbacks). Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"OnNotify": {
		"desc": "Registers a function or method to be called when a control notification is received via the WM_NOTIFY message.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe control-defined notification code to monitor.\n",
					"nome": "NotifyCode"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThe function, method or object to call when the event is raised.\nIf the GUI has an event sink (that is, if Gui()'s EventObj parameter was specified), this parameter may be the name of a method belonging to the event sink.\nOtherwise, this parameter must be a function object.\n",
					"nome": "Callback"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (call the callback after any previously registered callbacks). Otherwise, specify one of the following numbers:\n",
					"nome": "AddRemove"
				}
			]
		]
	},
	"Ord": {
		"desc": "Returns the ordinal value (numeric character code) of the first character in the specified string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose ordinal value is retrieved.\n",
					"nome": "String"
				}
			]
		]
	},
	"OutputDebug": {
		"desc": "Sends a string to the debugger (if any) for display.",
		"params": [
			[
				{
					"desc": "Type: String\nThe text to send to the debugger for display. This text may include linefeed characters (`n) to start new lines. In addition, a single long line can be broken up into several shorter ones by means of a continuation section.\n",
					"nome": "Text"
				}
			]
		]
	},
	"Pause": {
		"desc": "Pauses the script's current thread.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, the current thread is paused. Otherwise, specify one of the following values:\n1 or True: Marks the thread beneath the current thread as paused so that when it resumes, it will finish the function it was running (if any) and then enter a paused state. If there is no thread beneath the current thread, the script itself is paused, which prevents timers from running (this effect is the same as having used the menu item \"Pause Script\" while the script has no threads).\n0 or False: Unpauses the underlying thread.\n-1: Toggles the pause state of the underlying thread.\n",
					"nome": "NewState"
				}
			]
		]
	},
	"Persistent": {
		"desc": "Prevents the script from exiting automatically when its last thread completes, allowing it to stay running in an idle state.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nIf true or omitted, the script will be kept running after all threads have exited, even if none of the other conditions for keeping the script running are met.\nIf false, the default behaviour is restored.\n",
					"nome": "Persist"
				}
			]
		]
	},
	"PixelGetColor": {
		"desc": "Retrieves the color of the pixel at the specified X and Y coordinates.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of the pixel. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the pixel is retrieved using the normal method. Otherwise, specify one or more of the following words. If more than one word is present, separate each from the next with a space (e.g. \"Alt Slow\").\nAlt: Uses an alternate method to retrieve the color, which should be used when the normal method produces invalid or inaccurate colors for a particular type of window. This method is about 10 % slower than the normal method.\nSlow: Uses a more elaborate method to retrieve the color, which may work in certain full-screen applications when the other methods fail. This method is about three times slower than the normal method. Note: Slow takes precedence over Alt, so there is no need to specify Alt in this case.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"PixelSearch": {
		"desc": "Searches a region of the screen for a pixel of the specified color.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nReferences to the output variables in which to store the X and Y coordinates of the first pixel that matches ColorID (if no match is found, the variables are made blank). Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "&OutputVarX, &OutputVarY"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of the starting corner of the rectangle to search. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X1, Y1"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe X and Y coordinates of the ending corner of the rectangle to search. Coordinates are relative to the active window's client area unless CoordMode was used to change that.\n",
					"nome": "X2, Y2"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe color ID to search for. This is typically expressed as a hexadecimal number in Red-Green-Blue (RGB) format. For example: 0x9d6346. Color IDs can be determined using Window Spy (accessible from the tray menu) or via PixelGetColor.\n",
					"nome": "ColorID"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify a number between 0 and 255 (inclusive) to indicate the allowed number of shades of variation in either direction for the intensity of the red, green, and blue components of the color. For example, if 2 is specified and ColorID is 0x444444, any color from 0x424242 to 0x464646 will be considered a match. This parameter is helpful if the color sought is not always exactly the same shade. If you specify 255 shades of variation, all colors will match.\n",
					"nome": "Variation"
				}
			]
		]
	},
	"PostMessage": {
		"desc": "Places a message in the message queue of a window or control.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe message number to send. See the message list to determine the number.\n",
					"nome": "MsgNumber"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf either is omitted, 0 will be sent. Otherwise, specify the first and second component of the message.\nEach parameter must be an integer.\nIf AutoHotkey or the target window is 32-bit, only the parameter's low 32 bits are used; that is, values are truncated if outside the range -2147483648 to 2147483647 (-0x80000000 to 0x7FFFFFFF) for signed values, or 0 to 4294967295 (0xFFFFFFFF) for unsigned values. If AutoHotkey and the target window are both 64-bit, any integer value supported by AutoHotkey can be used.\n",
					"nome": "wParam, lParam"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf omitted, the message will be posted directly to the target window rather than one of its controls. Otherwise, specify the control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\nIf this parameter specifies a HWND (as an integer or object), it is not required to be the HWND of a control (child window). That is, it can also be the HWND of a top-level window.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"Process Functions": {
		"desc": "Functions for performing the following operations on a process: check if it exists; change its priority; close it; wait for it to exist; wait for it to close. Click on a function name for details.",
		"params": [

		]
	},
	"ProcessClose": {
		"desc": "Forces the first matching process to close.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nSpecify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID. ProcessExist can also be used to discover a PID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			]
		]
	},
	"ProcessExist": {
		"desc": "Checks if the specified process exists.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nIf omitted, the script's own process is used. Otherwise, specify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			]
		]
	},
	"ProcessGetName / ProcessGetPath": {
		"desc": "Returns the name or path of the specified process.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nIf omitted, the script's own process is used. Otherwise, specify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			]
		]
	},
	"ProcessGetParent": {
		"desc": "Returns the process ID (PID) of the process which created the specified process.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nIf omitted, the script's own process is used. Otherwise, specify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			]
		]
	},
	"ProcessSetPriority": {
		"desc": "Changes the priority level of the first matching process.",
		"params": [
			[
				{
					"desc": "Type: String\nSpecify one of the following words or letters:\nNote that any process not designed to run at Realtime priority might reduce system stability if set to that level.\n",
					"nome": "Level"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nIf omitted, the script's own process is used. Otherwise, specify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID. ProcessExist can also be used to discover a PID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			]
		]
	},
	"ProcessWait": {
		"desc": "Waits for the specified process to exist.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nSpecify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID. ProcessExist can also be used to discover a PID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, specify the number of seconds (can contain a decimal point) to wait before timing out.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"ProcessWaitClose": {
		"desc": "Waits for all matching processes to close.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nSpecify either a number (the PID) or a process name:\nPID: The Process ID, which is a number that uniquely identifies one specific process (this number is valid only during the lifetime of that process). The PID of a newly launched process can be determined via the Run function. Similarly, the PID of a window can be determined with WinGetPID. ProcessExist can also be used to discover a PID.\nName: The name of a process is usually the same as its executable (without path), e.g. notepad.exe or winword.exe. Since a name might match multiple running processes, only the first process will be operated upon. The name is not case-sensitive.\n",
					"nome": "PIDOrName"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, specify the number of seconds (can contain a decimal point) to wait before timing out.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"Random": {
		"desc": "Generates a pseudo-random number.",
		"params": [
			[
				{
					"desc": "Type: Integer or Float\nIf both are omitted, the default is 0.0 to 1.0. If only one parameter is specified, the other parameter defaults to 0. Otherwise, specify the minimum and maximum number to be generated, in either order.\nFor integers, the minimum value and maximum value are both included in the set of possible numbers that may be returned. The full range of 64-bit integers is supported.\nFor floating point numbers, the maximum value is generally excluded.\n",
					"nome": "A, B"
				}
			]
		]
	},
	"RegCreateKey": {
		"desc": "Creates a registry key without writing a value.",
		"params": [
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\nKeyName can be omitted only if a registry loop is running, in which case it defaults to the key of the current loop item (even if the key has been deleted during the loop). If the item is a subkey, the full name of that subkey is used by default.\n",
					"nome": "KeyName"
				}
			]
		]
	},
	"RegDelete": {
		"desc": "Deletes a value from the registry.",
		"params": [
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\nKeyName can be omitted only if a registry loop is running, in which case it defaults to the key of the current loop item. If the item is a subkey, the full name of that subkey is used by default. If the item is a value, ValueName defaults to the name of that value, but can be overridden.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the key's default value will be deleted (except as noted above), which is the value displayed as \"(Default)\" by RegEdit. Otherwise, specify the name of the value to delete.\n",
					"nome": "ValueName"
				}
			]
		]
	},
	"RegDeleteKey": {
		"desc": "Deletes a subkey from the registry.",
		"params": [
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\nKeyName can be omitted only if a registry loop is running, in which case it defaults to the key of the current loop item. If the item is a subkey, the full name of that subkey is used by default.\n",
					"nome": "KeyName"
				}
			]
		]
	},
	"RegExMatch": {
		"desc": "Determines whether a string contains a pattern (regular expression).",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose content is searched. This may contain binary zero.\n",
					"nome": "Haystack"
				}
			],
			[
				{
					"desc": "Type: String\nThe pattern to search for, which is a Perl-compatible regular expression (PCRE). The pattern's options (if any) must be included at the beginning of the string followed by a close-parenthesis. For example, the pattern i)abc.*123 would turn on the case-insensitive option and search for \"abc\", followed by zero or more occurrences of any character, followed by \"123\". If there are no options, the \")\" is optional; for example, )abc is equivalent to abc.\nAlthough NeedleRegEx cannot contain binary zero, the pattern \\x00 can be used to match a binary zero within Haystack.\n",
					"nome": "NeedleRegEx"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, no output variable will be used. Otherwise, specify a reference to the output variable in which to store a match object, which can be used to retrieve the position, length and value of the overall match and of each captured subpattern, if any are present.\nIf the pattern is not found (that is, if the function returns 0), this variable is made blank.\n",
					"nome": "&OutputVar"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the beginning of Haystack). Otherwise, specify 2 to start at the second character, 3 to start at the third, and so on. If StartingPos is beyond the length of Haystack, the search starts at the empty string that lies at the end of Haystack (which typically results in no match).\nSpecify a negative StartingPos to start at that position from the right. For example, -1 starts at the last character and -2 starts at the next-to-last character. If StartingPos tries to go beyond the left end of Haystack, all of Haystack is searched.\nSpecify 0 to start at the end of Haystack; i.e. the position to the right of the last character. This can be used with zero-width assertions such as (?<=a).\nRegardless of the value of StartingPos, the return value is always relative to the first character of Haystack. For example, the position of \"abc\" in \"123abc789\" is always 4.\n",
					"nome": "StartingPos"
				}
			]
		]
	},
	"RegExReplace": {
		"desc": "Replaces occurrences of a pattern (regular expression) inside a string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose content is searched and replaced. This may contain binary zero.\n",
					"nome": "Haystack"
				}
			],
			[
				{
					"desc": "Type: String\nThe pattern to search for, which is a Perl-compatible regular expression (PCRE). The pattern's options (if any) must be included at the beginning of the string followed by a close-parenthesis. For example, the pattern i)abc.*123 would turn on the case-insensitive option and search for \"abc\", followed by zero or more occurrences of any character, followed by \"123\". If there are no options, the \")\" is optional; for example, )abc is equivalent to abc.\nAlthough NeedleRegEx cannot contain binary zero, the pattern \\x00 can be used to match a binary zero within Haystack.\n",
					"nome": "NeedleRegEx"
				}
			],
			[
				{
					"desc": "Type: String or Function Object\nThis parameter can be either a replacement string or a callback function, as described below. If unset or omitted, it defaults to an empty string.\nString: The string to be substituted for each match, which is plain text (not a regular expression).\nThis parameter may include backreferences like $1, which brings in the substring from Haystack that matched the first subpattern. The simplest backreferences are $0 through $9, where $0 is the substring that matched the entire pattern, $1 is the substring that matched the first subpattern, $2 is the second, and so on. For backreferences greater than 9 (and optionally those less than or equal to 9), enclose the number in braces; e.g. ${10}, ${11}, and so on. For named subpatterns, enclose the name in braces; e.g. ${SubpatternName}. To specify a literal $, use $$ (this is the only character that needs such special treatment; backslashes are never needed to escape anything).\nTo convert the case of a subpattern, follow the $ with one of the following characters: U or u (uppercase), L or l (lowercase), T or t (title case, in which the first letter of each word is capitalized but all others are made lowercase). For example, both $U1 and $U{1} transcribe an uppercase version of the first subpattern.\nNonexistent backreferences and those that did not match anything in Haystack -- such as one of the subpatterns in (abc)|(xyz) -- are transcribed as empty strings.\nFunction [v2.1-alpha.1+]: The function object to call for each match in the string. The function accepts a single parameter (a Match object) and should return the replacement text.\n",
					"nome": "Replacement"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the number of replacements that occurred (0 if none).\n",
					"nome": "&OutputVarCount"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to -1, which replaces all occurrences of the pattern found in Haystack. Otherwise, specify the maximum number of replacements to allow. The part of Haystack to the right of the last replacement is left unchanged.\n",
					"nome": "Limit"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the beginning of Haystack). Otherwise, specify 2 to start at the second character, 3 to start at the third, and so on. If StartingPos is beyond the length of Haystack, the search starts at the empty string that lies at the end of Haystack (which typically results in no replacements).\nSpecify a negative StartingPos to start at that position from the right. For example, -1 starts at the last character and -2 starts at the next-to-last character. If StartingPos tries to go beyond the left end of Haystack, all of Haystack is searched.\nSpecify 0 to start at the end of Haystack; i.e. the position to the right of the last character. This can be used with zero-width assertions such as (?<=a).\nRegardless of the value of StartingPos, the return value is always a complete copy of Haystack -- the only difference is that more of its left side might be unaltered compared to what would have happened with a StartingPos of 1.\n",
					"nome": "StartingPos"
				}
			]
		]
	},
	"RegRead": {
		"desc": "Reads a value from the registry.",
		"params": [
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\nKeyName can be omitted only if a registry loop is running, in which case it defaults to the key of the current loop item. If the item is a subkey, the full name of that subkey is used by default. If the item is a value, ValueName defaults to the name of that value, but can be overridden.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the key's default value will be retrieved (except as noted above), which is the value displayed as \"(Default)\" by RegEdit. Otherwise, specify the name of the value to retrieve. If there is no default value (that is, if RegEdit displays \"value not set\"), an OSError is thrown.\n",
					"nome": "ValueName"
				}
			],
			[
				{
					"desc": "Type: Any\nIf omitted, an OSError is thrown instead of returning a default value. Otherwise, specify the value to return if the specified key or value does not exist.\n",
					"nome": "Default"
				}
			]
		]
	},
	"RegWrite": {
		"desc": "Writes a value to the registry.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nThe value to be written. Long text values can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String\nMust be either REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, or REG_BINARY.\nValueType can be omitted only if KeyName is omitted and the current registry loop item is a value, as noted below.\n",
					"nome": "ValueType"
				}
			],
			[
				{
					"desc": "Type: String\nThe full name of the registry key, e.g. \"HKLM\\Software\\SomeApplication\".\nThis must start with HKEY_LOCAL_MACHINE (or HKLM), HKEY_USERS (or HKU), HKEY_CURRENT_USER (or HKCU), HKEY_CLASSES_ROOT (or HKCR), or HKEY_CURRENT_CONFIG (or HKCC).\nTo access a remote registry, prepend the computer name and a backslash, e.g. \"\\\\workstation01\\HKLM\".\nKeyName can be omitted only if a registry loop is running, in which case it defaults to the key of the current loop item. If the item is a subkey, the full name of that subkey is used by default. If the item is a value, ValueType and ValueName default to the type and name of that value, but can be overridden.\n",
					"nome": "KeyName"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the key's default value will be used (except as noted above), which is the value displayed as \"(Default)\" by RegEdit. Otherwise, specify the name of the value that will be written to. \n",
					"nome": "ValueName"
				}
			]
		]
	},
	"Reload": {
		"desc": "Replaces the currently running instance of the script with a new one.",
		"params": [

		]
	},
	"Return": {
		"desc": "Returns from a function to which execution had previously jumped via function-call, Hotkey activation, or other means.",
		"params": [
			[
				{
					"desc": "This parameter can only be used within a function.\nIf omitted, it defaults to an empty string unless #DefaultReturn unset is in effect, in which case it defaults to unset.\nSince this parameter is an expression, all of the following lines are valid:\n",
					"nome": "Expression"
				}
			]
		]
	},
	"Run / RunWait": {
		"desc": "Runs an external program. Unlike Run, RunWait will wait until the program finishes before continuing.",
		"params": [
			[
				{
					"desc": "Type: String\nA document, URL, executable file (.exe, .com, .bat, etc.), shortcut (.lnk), CLSID, or system verb to launch (see remarks). If Target is a local file and no path was specified with it, A_WorkingDir will be searched first. If no matching file is found there, the system will search for and launch the file if it is integrated (\"known\"), e.g. by being contained in one of the PATH folders.\nTo pass parameters, add them immediately after the program or document name as follows:\nIf the program/document name or a parameter contains spaces, it is safest to enclose it in double quotes as follows (even though it may work without them in some cases):\n",
					"nome": "Target"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the script's own working directory (A_WorkingDir) will be used. Otherwise, specify the working directory for Target.\n",
					"nome": "WorkingDir"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, Target will be launched normally. Otherwise, specify one or more of the following options:\nMax: launch maximized\nMin: launch minimized\nHide: launch hidden (cannot be used in combination with either of the above)\nNote: Some applications (e.g. Calc.exe) do not obey the requested startup state and thus Max/Min/Hide will have no effect.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the newly launched program's unique Process ID (PID). The variable will be made blank if the PID could not be determined, which usually happens if a system verb, document, or shortcut is launched rather than a direct executable file. RunWait also supports this parameter, though its OutputVarPID must be checked in another thread (otherwise, the PID will be invalid because the process will have terminated by the time the line following RunWait executes).\nAfter the Run function retrieves a PID, any windows to be created by the process might not exist yet. To wait for at least one window to be created, use WinWait \"ahk_pid \" OutputVarPID.\n",
					"nome": "&OutputVarPID"
				}
			]
		]
	},
	"RunAs": {
		"desc": "Specifies a set of user credentials to use for all subsequent Run and RunWait functions.",
		"params": [
			[
				{
					"desc": "Type: String\nIf this and the other parameters are all omitted, the RunAs feature will be turned off, which restores Run and RunWait to their default behavior. Otherwise, specify the username under which new processes will be created.\n",
					"nome": "User"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to a blank password. Otherwise, specify the User's password. Note that passing blank passwords is not allowed by default, according to the OS policy \"Accounts: Limit local account use of blank passwords to console logon only\".\n",
					"nome": "Password"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, a local account will be used. Otherwise, specify User's domain. If that fails to work, try using @YourComputerName.\n",
					"nome": "Domain"
				}
			]
		]
	},
	"Send / SendText / SendInput / SendPlay / SendEvent": {
		"desc": "Sends simulated keystrokes and mouse clicks to the active window.",
		"params": [
			[
				{
					"desc": "Type: String\nThe sequence of keys to send.\nBy default (that is, if neither SendText nor the Raw mode or Text mode is used), the characters ^+!#{} have a special meaning. The characters ^+!# represent the modifier keys Ctrl, Shift, Alt and Win. They affect only the very next key. To send the corresponding modifier key on its own, enclose the key name in braces. To just press (hold down) or release the key, follow the key name with the word \"down\" or \"up\" as shown below.\nNote: As capital letters are produced by sending Shift, A produces a different effect in some programs than a. For example, !A presses Alt+Shift+A and !a presses Alt+A. If in doubt, use lowercase.\nThe characters {} are used to enclose key names and other options, and to send special characters literally. For example, {Tab} is Tab and {!} is a literal exclamation mark.\nEnclosing a plain ASCII letter (a-z or A-Z) in braces forces it to be sent as the corresponding virtual keycode, even if the character does not exist on the current keyboard layout. In other words, Send \"a\" produces the letter \"a\" while Send \"{a}\" may or may not produce \"a\", depending on the keyboard layout. For details, see the remarks below.\n",
					"nome": "Keys"
				}
			]
		]
	},
	"SendLevel": {
		"desc": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings.",
		"params": [
			[
				{
					"desc": "Type: Integer\nAn integer between 0 and 100.\n",
					"nome": "Level"
				}
			]
		]
	},
	"SendMessage": {
		"desc": "Sends a message to a window or control and waits for acknowledgement.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe message number to send. See the message list to determine the number.\n",
					"nome": "MsgNumber"
				}
			],
			[
				{
					"desc": "Type: Integer or Object\nIf either is omitted, 0 will be sent. Otherwise, specify the first and second component of the message.\nEach parameter must be an integer or an object with a Ptr property, such as a Buffer. For messages which require a pointer to a string, use a Buffer or the StrPtr function. If the string contained by a variable is changed by passing the variable's address to SendMessage, the variable's length must be updated afterward by calling VarSetStrCapacity(&MyVar, -1).\nIf AutoHotkey or the target window is 32-bit, only the parameter's low 32 bits are used; that is, values are truncated if outside the range -2147483648 to 2147483647 (-0x80000000 to 0x7FFFFFFF) for signed values, or 0 to 4294967295 (0xFFFFFFFF) for unsigned values. If AutoHotkey and the target window are both 64-bit, any integer value supported by AutoHotkey can be used.\n",
					"nome": "wParam, lParam"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf omitted, the message will be sent directly to the target window rather than one of its controls. Otherwise, specify the control's ClassNN, text or HWND, or an object with a Hwnd property. For details, see The Control Parameter.\nIf this parameter specifies a HWND (as an integer or object), it is not required to be the HWND of a control (child window). That is, it can also be the HWND of a top-level window.\n",
					"nome": "Control"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 5000. Otherwise, specify the maximum number of milliseconds to wait for the target window to process the message. If the message is not processed within this time, a TimeoutError is thrown.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"SendMode": {
		"desc": "Makes Send synonymous with SendEvent or SendPlay rather than the default (SendInput). Also makes Click and MouseMove/Click/Drag use the specified method.",
		"params": [
			[
				{
					"desc": "Type: String\nSpecify one of the following words:\nEvent: Switches to the SendEvent method for Send, SendText, Click, MouseMove, MouseClick, and MouseClickDrag.\nInput: This is the starting default used by all scripts. It uses the SendInput method for Send, SendText, Click, MouseMove, MouseClick, and MouseClickDrag. Known limitations:\nInputThenPlay: Same as above except that rather than falling back to Event mode when SendInput is unavailable, it reverts to Play mode (below). This also causes the SendInput function itself to revert to Play mode when SendInput is unavailable.\nPlay: Switches to the SendPlay method for Send, SendText, Click, MouseMove, MouseClick, and MouseClickDrag. Known limitations:\n",
					"nome": "Mode"
				}
			]
		]
	},
	"SetCapsLockState / SetNumLockState / SetScrollLockState": {
		"desc": "Sets the state of CapsLock/NumLock/ScrollLock. Can also force the key to stay on or off.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, the AlwaysOn/Off attribute of the key is removed (if present). Otherwise, specify one of the following values:\nOn or 1 (true): Turns on the key and removes the AlwaysOn/Off attribute of the key (if present).\nOff or 0 (false): Turns off the key and removes the AlwaysOn/Off attribute of the key (if present).\nAlwaysOn: Forces the key to stay on permanently.\nAlwaysOff: Forces the key to stay off permanently.\n",
					"nome": "State"
				}
			]
		]
	},
	"SetControlDelay": {
		"desc": "Sets the delay that will occur after each control-modifying function.",
		"params": [
			[
				{
					"desc": "Type: Integer\nTime in milliseconds. Specify -1 for no delay at all or 0 for the smallest possible delay.\n",
					"nome": "Delay"
				}
			]
		]
	},
	"SetDefaultMouseSpeed": {
		"desc": "Sets the mouse speed that will be used if unspecified in Click, MouseMove, MouseClick, and MouseClickDrag.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe speed to move the mouse in the range 0 (fastest) to 100 (slowest). A speed of 0 will move the mouse instantly.\n",
					"nome": "Speed"
				}
			]
		]
	},
	"SetKeyDelay": {
		"desc": "Sets the delay that will occur after each keystroke sent by Send or ControlSend.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, the current delay is retained. Otherwise, specify the time in milliseconds. Specify -1 for no delay at all or 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay).\n",
					"nome": "Delay"
				}
			],
			[
				{
					"desc": "Type: Integer\nCertain games and other specialized applications may require a delay inside each keystroke; that is, after the press of the key but before its release.\nIf omitted, the current press duration is retained. Otherwise, specify the time in milliseconds. Specify -1 for no delay at all or 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay).\nNote: PressDuration also produces a delay after any change to the modifier key state (Ctrl, Alt, Shift, and Win) needed to support the keys being sent.\n",
					"nome": "PressDuration"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the delay and press duration are applied to the traditional SendEvent mode. Otherwise, specify the word Play to apply both to the SendPlay mode. If a script never uses this parameter, both are always -1 for SendPlay.\n",
					"nome": "Play"
				}
			]
		]
	},
	"SetMouseDelay": {
		"desc": "Sets the delay that will occur after each mouse movement or click.",
		"params": [
			[
				{
					"desc": "Type: Integer\nTime in milliseconds. Specify -1 for no delay at all or 0 for the smallest possible delay (however, if the Play parameter is present, both 0 and -1 produce no delay).\n",
					"nome": "Delay"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the delay is applied to the traditional SendEvent mode. Otherwise, specify the word Play to apply the delay to the SendPlay mode. If a script never uses this parameter, the delay is always -1 for SendPlay.\n",
					"nome": "Play"
				}
			]
		]
	},
	"SetRegView": {
		"desc": "Sets the registry view used by RegRead, RegWrite, RegDelete, RegDeleteKey and Loop Reg, allowing them in a 32-bit script to access the 64-bit registry view and vice versa.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nSpecify 32 to view the registry as a 32-bit application would, or 64 to view the registry as a 64-bit application would.\nSpecify the word Default to restore normal behaviour.\n",
					"nome": "RegView"
				}
			]
		]
	},
	"SetStoreCapsLockMode": {
		"desc": "Whether to restore the state of CapsLock after a Send.",
		"params": [
			[
				{
					"desc": "Type: Boolean\nSpecify one of the following values:\n1 or True: This is the initial setting for all scripts: CapsLock will be restored to its former value if Send needed to change it temporarily for its operation.\n0 or False: The state of CapsLock is not changed at all. As a result, Send will invert the case of the characters if CapsLock happens to be ON during the operation.\n",
					"nome": "Mode"
				}
			]
		]
	},
	"SetTimer": {
		"desc": "Causes a function to be called automatically and repeatedly at a specified time interval.",
		"params": [
			[
				{
					"desc": "Type: Function Object\nThe function object to call.\nA reference to the function object is kept in the script's list of timers, and is not released unless the timer is deleted. This occurs automatically for run-once timers, but can also be done by calling SetTimer with a Period of 0.\nIf Function is omitted, SetTimer will operate on the timer which launched the current thread, if any. For example, SetTimer , 0 can be used inside a timer function to mark the timer for deletion, while SetTimer , 1000 would update the current timer's Period.\nNote: Passing an empty variable or an expression which results in an empty value is considered an error. This parameter must be either given a non-empty value or completely omitted.\n",
					"nome": "Function"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted and the timer does not exist, it will be created with a period of 250. If omitted and the timer already exists, it will be reset at its former period unless Priority is specified. Otherwise, the absolute value of this parameter is used as the approximate number of milliseconds that must pass before the timer is executed. The timer will be automatically reset. It can be set to repeat automatically or run only once:\nThe absolute value of Period must be no larger than 4294967295 ms (49.7 days).\n",
					"nome": "Period"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify an integer between -2147483648 and 2147483647 (or an expression) to indicate this timer's thread priority. See Threads for details.\nTo change the priority of an existing timer without affecting it in any other way, omit Period.\n",
					"nome": "Priority"
				}
			]
		]
	},
	"SetTitleMatchMode": {
		"desc": "Sets the matching behavior of the WinTitle parameter in built-in functions such as WinWait.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nSpecify one of the following values:\n1: A window's title must start with the specified WinTitle to be a match.\n2: Default behavior. A window's title can contain WinTitle anywhere inside it to be a match.\n3: A window's title must exactly match WinTitle to be a match.\nRegEx: Changes WinTitle, WinText, ExcludeTitle, and ExcludeText to accept regular expressions, e.g. WinActivate \"Untitled.*Notepad\". RegEx also applies to ahk_class and ahk_exe, e.g. \"ahk_class IEFrame\" searches for any window whose class name contains IEFrame anywhere (this is because by default, regular expressions find a match anywhere in the target string). For WinTitle, each component is separate, e.g. in \"i)^untitled ahk_class i)^notepad$ ahk_pid \" mypid, i)^untitled and i)^notepad$ are separate regex patterns and mypid is always compared numerically (it is not a regex pattern). For WinText, each text element (i.e. each control's text) is matched against the RegEx separately, so it is not possible to have a match span more than one text element.\nThe modes above also affect ExcludeTitle in the same way as WinTitle. For example, mode 3 requires that a window's title exactly match ExcludeTitle for that window to be excluded.\nOf the modes, only RegEx mode affects the non-title window matching criteria ahk_class and ahk_exe. Those matching criteria will operate identically in any of the numbered modes.\n",
					"nome": "MatchMode"
				}
			],
			[
				{
					"desc": "Type: String\nSpecify one of the following words to indicate how the WinText and ExcludeText parameters should be matched:\nFast: Default behavior. Performance may be substantially better than the slow mode, but certain types of controls are not detected. For instance, text is typically detected within Static and Button controls, but not Edit controls, unless they are owned by the script.\nSlow: Can be much slower, but works with all controls which respond to the WM_GETTEXT message.\n",
					"nome": "Speed"
				}
			]
		]
	},
	"SetWinDelay": {
		"desc": "Sets the delay that will occur after each windowing function, such as WinActivate.",
		"params": [
			[
				{
					"desc": "Type: Integer\nTime in milliseconds. Specify -1 for no delay at all or 0 for the smallest possible delay.\n",
					"nome": "Delay"
				}
			]
		]
	},
	"SetWorkingDir": {
		"desc": "Changes the script's current working directory.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the new working directory, which is assumed to be a subfolder of the current A_WorkingDir if an absolute path isn't specified.\n",
					"nome": "DirName"
				}
			]
		]
	},
	"Shutdown": {
		"desc": "Shuts down, restarts, or logs off the system.",
		"params": [
			[
				{
					"desc": "Type: Integer\nA combination (sum) of the following numbers:\nAdd the required values together. For example, to shutdown and power down the flag would be 9 (shutdown + power down = 1 + 8 = 9).\nThe \"Force\" value (4) forces all open applications to close. It should only be used in an emergency because it may cause any open applications to lose data.\nThe \"Power down\" value (8) shuts down the system and turns off the power.\n",
					"nome": "Flag"
				}
			]
		]
	},
	"Sleep": {
		"desc": "Waits the specified amount of time before continuing.",
		"params": [
			[
				{
					"desc": "Type: Integer\nThe amount of time to pause (in milliseconds) between 0 and 2147483647 (24 days).\n",
					"nome": "Delay"
				}
			]
		]
	},
	"Sort": {
		"desc": "Arranges a variable's contents in alphabetical, numerical, or random order (optionally removing duplicates).",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to sort.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, String will be sorted in ascending alphabetical order (case-insensitive), using a linefeed (`n) as separator. Otherwise, specify a string of one or more options from the Options section below (in any order, with optional spaces in between).\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: Function Object\nIf omitted, no custom sorting will be performed. Otherwise, specify the function to call that compares any two items in the list.\nThe callback accepts three parameters and can be defined as follows:\nAlthough the names you give the parameters do not matter, the following values are sequentially assigned to them:\nYou can omit one or more parameters from the end of the callback's parameter list if the corresponding information is not needed, but in this case an asterisk must be specified as the final parameter, e.g. MyCallback(Param1, *).\nWhen the callback deems the first parameter to be greater than the second, it should return a positive integer; when it deems the two parameters to be equal, it should return 0, \"\", or nothing; otherwise, it should return a negative integer. If a decimal point is present in the returned value, that part is ignored (i.e. 0.8 is the same as 0).\nThe callback uses the same global (or thread-specific) settings as the Sort function that called it.\nNote: All options except D, Z, and U are ignored when Callback is specified (though N, C, and CL still affect how duplicates are detected).\n",
					"nome": "Callback"
				}
			]
		]
	},
	"Sound Functions": {
		"desc": "Applies to:",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nOne of the following:\nIf only an index is specified, the display names are ignored. For example, 1, \"1\" and \":1\" use the first component regardless of name, whereas \"\" uses the master controls.\nIf the sound device lacks the specified Component, a TargetError is thrown.\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nOne of the following:\nThe soundcard analysis script may help determine which name and/or number to use.\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundBeep": {
		"desc": "Emits a tone from the PC speaker.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 523. Otherwise, specify the frequency of the sound, a number between 37 and 32767.\n",
					"nome": "Frequency"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 150. Otherwise, specify the duration of the sound, in milliseconds.\n",
					"nome": "Duration"
				}
			]
		]
	},
	"SoundGetInterface": {
		"desc": "Retrieves a native COM interface of a sound device or component.",
		"params": [
			[
				{
					"desc": "Type: String\nAn interface identifier (GUID) in the form \"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\".\n",
					"nome": "IID"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, an interface implemented by the device itself will be retrieved. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundGetMute": {
		"desc": "Retrieves a mute setting of a sound device.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the master mute setting. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundGetName": {
		"desc": "Retrieves the name of a sound device or component.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, the name of the device itself will be retrieved. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundGetVolume": {
		"desc": "Retrieves a volume setting of a sound device.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the master volume setting. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundPlay": {
		"desc": "Plays a sound, video, or other supported file type.",
		"params": [
			[
				{
					"desc": "Type: String\nThe name of the file to be played, which is assumed to be in A_WorkingDir if an absolute path isn't specified.\nTo produce standard system sounds, specify an asterisk followed by a number as shown below (note that the Wait parameter has no effect in this mode):\n",
					"nome": "Filename"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nIf blank or omitted, it defaults to 0 (false). Otherwise, specify one of the following values:\n0 or False: The current thread will move on to the next statement(s) while the file is playing.\n1, True or \"Wait\" (not case-sensitive): The current thread waits until the file is finished playing before continuing. Even while waiting, new threads can be launched via hotkey, custom menu item, or timer.\nKnown limitation: If the Wait parameter is not used, the system might consider the playing file to be \"in use\" until the script closes or until another file is played (even a nonexistent file).\n",
					"nome": "Wait"
				}
			]
		]
	},
	"SoundSetMute": {
		"desc": "Changes a mute setting of a sound device.",
		"params": [
			[
				{
					"desc": "Type: Integer\nOne of the following values:\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the master mute setting. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SoundSetVolume": {
		"desc": "Changes a volume setting of a sound device.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Float\nA string containing a percentage number between -100 and 100 inclusive. If the number begins with a plus or minus sign, the current setting will be adjusted up or down by the indicated amount. Otherwise, the setting will be set explicitly to the level indicated by NewSetting.\nIf the percentage number begins with a minus sign or is unsigned, it does not need to be enclosed in quotation marks.\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the master volume setting. Otherwise, specify the component's display name and/or index, e.g. 1, \"Line in\" or \"Line in:2\".\nFor further details, see Component (Sound Functions).\n",
					"nome": "Component"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to the system's default device for playback (which is not necessarily device 1). Otherwise, specify the device's display name and/or index, e.g. 1, \"Speakers\", \"Speakers:2\" or \"Speakers (Example HD Audio)\".\nFor further details, see Device (Sound Functions).\n",
					"nome": "Device"
				}
			]
		]
	},
	"SplitPath": {
		"desc": "Separates a file name or URL into its name, directory, extension, and drive.",
		"params": [
			[
				{
					"desc": "Type: String\nThe file name or URL to be analyzed.\nNote that this function expects filename paths to contain backslashes (\\) only and URLs to contain forward slashes (/) only.\n",
					"nome": "Path"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the file name without its path. The file's extension is included.\n",
					"nome": "&OutFileName"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the directory of the file, including drive letter or share name (if present). The final backslash is not included even if the file is located in a drive's root directory.\n",
					"nome": "&OutDir"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the file's extension (e.g. TXT, DOC, or EXE). The dot is not included.\n",
					"nome": "&OutExtension"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the file name without its path, dot and extension.\n",
					"nome": "&OutNameNoExt"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the drive letter or server name of the file. If the file is on a local or mapped drive, the variable will be set to the drive letter followed by a colon (no backslash). If the file is on a network path (UNC), the variable will be set to the share name, e.g. \\\\Workstation01\n",
					"nome": "&OutDrive"
				}
			]
		]
	},
	"StatusBarGetText": {
		"desc": "Retrieves the text from a standard status bar control.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1, which is usually the part that contains the text of interest. Otherwise, specify the part number of the bar to retrieve.\n",
					"nome": "Part#"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"StatusBarWait": {
		"desc": "Waits until a window's status bar contains the specified string.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the function waits for the status bar to become blank. Otherwise, specify the text or partial text for which the function will wait to appear. The text is case-sensitive and the matching behavior is determined by SetTitleMatchMode, similar to WinTitle below.\nTo instead wait for the bar's text to change, either use StatusBarGetText in a loop, or use the RegEx example at the bottom of this page.\n",
					"nome": "BarText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, it will wait no longer than this many seconds. To wait for a fraction of a second, specify a floating-point number, for example, 0.25 to wait for a maximum of 250 milliseconds.\n",
					"nome": "Timeout"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1, which is usually the part that contains the text of interest. Otherwise, specify the part number of the bar to retrieve.\n",
					"nome": "Part#"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 50. Otherwise, specify how often the status bar should be checked while the function is waiting (in milliseconds).\n",
					"nome": "Interval"
				}
			]
		]
	},
	"StrCompare": {
		"desc": "Compares two strings alphabetically.",
		"params": [
			[
				{
					"desc": "Type: String\nThe strings to be compared.\n",
					"nome": "String1, String2"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nOne of the following values (defaults to 0 if omitted):\n\"On\" or 1 (True): The comparison is case-sensitive.\n\"Off\" or 0 (False): The letters A-Z are considered identical to their lowercase counterparts.\n\"Locale\": The comparison is case-insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like Ä and Ü as identical to theirs. Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared.\n\"Logical\": Like Locale, but digits in the strings are considered as numerical content rather than text. For example, \"A2\" is considered less than \"A10\". However, if two numbers differ only by the presence of a leading zero, the string with leading zero may be considered less than the other string. The exact behavior may differ between OS versions.\n",
					"nome": "CaseSense"
				}
			]
		]
	},
	"StrGet": {
		"desc": "Copies a string from a memory address or buffer, optionally converting it from a given code page.",
		"params": [
			[
				{
					"desc": "Type: Object or Integer\nA Buffer-like object containing the string, or the memory address of the string.\nAny object which implements Ptr and Size properties may be used, but this function is optimized for the native Buffer object. Passing an object with these properties ensures that the function does not read memory from an invalid location; doing so could cause crashes or other unpredictable behaviour.\nThe string is not required to be null-terminated if a Buffer-like object is provided, or if Length is specified.\n",
					"nome": "Source"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted (or when using 2-parameter mode), it defaults to the current length of the string, provided the string is null-terminated. Otherwise, specify the maximum number of characters to read.\nBy default, StrGet only copies up to the first binary zero. If Length is negative, its absolute value indicates the exact number of characters to convert, including any binary zeros that the string might contain - in other words, the result is always a string of exactly that length.\nNote: Omitting Length when the string is not null-terminated may cause an access violation which terminates the program, or some other undesired result. Specifying an incorrect length may produce unexpected behaviour.\n",
					"nome": "Length"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf omitted, the string is simply copied without any conversion taking place. Otherwise, specify the source encoding; for example, \"UTF-8\", \"UTF-16\" or \"CP936\". For numeric identifiers, the prefix \"CP\" can be omitted only in 3-parameter mode. Specify an empty string or \"CP0\" to use the system default ANSI code page.\n",
					"nome": "Encoding"
				}
			]
		]
	},
	"StrLen": {
		"desc": "Retrieves the count of how many characters are in a string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose contents will be measured.\n",
					"nome": "String"
				}
			]
		]
	},
	"StrLower / StrUpper / StrTitle": {
		"desc": "Converts a string to lowercase, uppercase or title case.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string to convert.\n",
					"nome": "String"
				}
			]
		]
	},
	"StrPtr": {
		"desc": "Returns the current memory address of a string.",
		"params": [
			[
				{
					"desc": "Type: String\n",
					"nome": "Value"
				}
			]
		]
	},
	"StrPut": {
		"desc": "Copies a string to a memory address or buffer, optionally converting it to a given code page.",
		"params": [
			[
				{
					"desc": "Type: String\nAny string. If a number is given, it is automatically converted to a string.\nString is assumed to be in the native encoding.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: Object or Integer\nA Buffer-like object or memory address to which the string will be written.\nAny object which implements Ptr and Size properties may be used, but this function is optimized for the native Buffer object. Passing an object with these properties ensures that the function does not write memory to an invalid location; doing so could cause crashes or other unpredictable behaviour.\nNote: If conversion between code pages is necessary, the required buffer size may differ from the size of the source string. For such cases, call StrPut with two parameters to calculate the required size.\n",
					"nome": "Target"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe maximum number of characters to write, including the null-terminator if required.\nIf Length is zero or less than the projected length after conversion (or the length of the source string if conversion is not required), an exception is thrown.\nLength must not be omitted when Target is a plain memory address, unless the buffer size is known to be sufficient, such as if the buffer was allocated based on a previous call to StrPut with the same String and Encoding.\nIf Target is an object, specifying a Length that exceeds the buffer size calculated from Target.Size is considered an error, even if the converted string would fit within the buffer.\nNote: When Encoding is specified, Length should be the size of the buffer (in characters), not the length of String or a substring, as conversion may increase its length.\nNote: Length is measured in characters, whereas buffer sizes are usually measured in bytes, as is StrPut's return value. To specify the buffer size in bytes, use a Buffer-like object in the Target parameter.\n",
					"nome": "Length"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf omitted, the string is simply copied or measured without any conversion taking place. Otherwise, specify the target encoding; for example, \"UTF-8\", \"UTF-16\" or \"CP936\". For numeric identifiers, the prefix \"CP\" can be omitted only in 4-parameter mode. Specify an empty string or \"CP0\" to use the system default ANSI code page.\n",
					"nome": "Encoding"
				}
			]
		]
	},
	"StrReplace": {
		"desc": "Replaces the specified substring with a new string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose content is searched and replaced.\n",
					"nome": "Haystack"
				}
			],
			[
				{
					"desc": "Type: String\nThe string to search for.\n",
					"nome": "Needle"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, Needle will be replaced with blank (empty), meaning it will be omitted from the return value. Otherwise, specify the string to replace Needle with.\n",
					"nome": "ReplaceText"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nOne of the following values (defaults to 0 if omitted):\n\"On\" or 1 (True): The search is case-sensitive.\n\"Off\" or 0 (False): The letters A-Z are considered identical to their lowercase counterparts.\n\"Locale\": The search is case-insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like Ä and Ü as identical to theirs. Locale is 1 to 8 times slower than Off depending on the nature of the strings being compared.\n",
					"nome": "CaseSense"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify a reference to the output variable in which to store the number of replacements that occurred (0 if none).\n",
					"nome": "&OutputVarCount"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to -1, which replaces all occurrences of the pattern found in Haystack. Otherwise, specify the maximum number of replacements to allow. The part of Haystack to the right of the last replacement is left unchanged.\n",
					"nome": "Limit"
				}
			]
		]
	},
	"StrSplit": {
		"desc": "Separates a string into an array of substrings using the specified delimiters.",
		"params": [
			[
				{
					"desc": "Type: String\nA string to split.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String or Array of Strings\nIf blank or omitted, each character of the input string will be treated as a separate substring.\nOtherwise, specify either a single string or an array of strings (case-sensitive), each of which is used to determine where the boundaries between substrings occur. Since the delimiters are not considered to be part of the substrings themselves, they are never included in the returned array. Also, if there is nothing between a pair of delimiters within the input string, the corresponding array element will be blank.\nFor example: \",\" would divide the string based on every occurrence of a comma. Similarly, [A_Space, A_Tab] would create a new array element every time a space or tab is encountered in the input string.\n",
					"nome": "Delimiters"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, no characters will be excluded. Otherwise, specify a list of characters (case-sensitive) to exclude from the beginning and end of each array element. For example, if OmitChars is \" `t\", spaces and tabs will be removed from the beginning and end (but not the middle) of every element.\nIf Delimiters is blank, OmitChars indicates which characters should be excluded from the array.\n",
					"nome": "OmitChars"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to -1, which means \"no limit\". Otherwise, specify the maximum number of substrings to return. If non-zero, the string is split a maximum of MaxParts-1 times and the remainder of the string is returned in the last substring (excluding any leading or trailing OmitChars).\n",
					"nome": "MaxParts"
				}
			]
		]
	},
	"String": {
		"desc": "Converts a value to a string.",
		"params": [

		]
	},
	"SubStr": {
		"desc": "Retrieves one or more characters from the specified position in a string.",
		"params": [
			[
				{
					"desc": "Type: String\nThe string whose content is copied. This may contain binary zero.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: Integer\nSpecify 1 to start at the first character, 2 to start at the second, and so on. If StartingPos is 0 or beyond String's length, an empty string is returned.\nSpecify a negative StartingPos to start at that position from the right. For example, -1 extracts the last character and -2 extracts the two last characters. If StartingPos tries to go beyond the left end of the string, the extraction starts at the first character.\n",
					"nome": "StartingPos"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to \"all characters\". Otherwise, specify the maximum number of characters to retrieve (fewer than the maximum are retrieved whenever the remaining part of the string is too short).\nYou can also specify a negative Length to omit that many characters from the end of the returned string (an empty string is returned if all or too many characters are omitted).\n",
					"nome": "Length"
				}
			]
		]
	},
	"Suspend": {
		"desc": "Disables or enables all or selected hotkeys and hotstrings.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to -1. Otherwise, specify one of the following values:\n1 or True: Suspends all hotkeys and hotstrings except those explained the Remarks section.\n0 or False: Re-enables the hotkeys and hotstrings that were disable above.\n-1: Changes to the opposite of its previous state (On or Off).\n",
					"nome": "NewState"
				}
			]
		]
	},
	"Switch": {
		"desc": "Compares a value with multiple cases and executes the statements of the first match.",
		"params": [
			[
				{
					"desc": "If this and CaseSense are omitted, the first case which evaluates to true (non-zero and non-empty) is executed. Otherwise, SwitchValue is evaluated once and compared to each case value until a match is found, and then that case is executed.\nIf there is no matching case and Default is present, it is executed.\n",
					"nome": "SwitchValue"
				}
			],
			[
				{
					"desc": "Type: Integer or String\nOptionally specify one of the following values to force all values to be compared as strings:\n\"On\" or 1 (True): Each comparison is case-sensitive.\n\"Off\" or 0 (False): The letters A-Z are considered identical to their lowercase counterparts.\n\"Locale\": Each comparison is case-insensitive according to the rules of the current user's locale. For details, see StrCompare.\n",
					"nome": "CaseSense"
				}
			],
			[
				{
					"desc": "The value to check or compare depending on whether SwitchValue is present.\n",
					"nome": "CaseValueN"
				}
			]
		]
	},
	"SysGet": {
		"desc": "Retrieves dimensions of system objects, and other system properties.",
		"params": [
			[
				{
					"desc": "Type: Integer\nSpecify one of the numbers from the tables below to retrieve the corresponding value.\n",
					"nome": "Property"
				}
			]
		]
	},
	"SysGetIPAddresses": {
		"desc": "Returns an array of the system's IPv4 addresses.",
		"params": [

		]
	},
	"Thread": {
		"desc": "Sets the priority or interruptibility of threads. It can also temporarily disable all timers.",
		"params": [

		]
	},
	"Throw": {
		"desc": "Signals the occurrence of an error. This signal can be caught by a Try-Catch statement.",
		"params": [
			[
				{
					"desc": "A value to throw; typically an Error object. For example:\nValues of all kinds can be thrown, but if Catch is used without specifying a class (or Try is used without Catch or Finally), it will only catch instances of the Error class.\nWhile execution is within a Catch, Value can be omitted to re-throw the caught value (avoiding the need to specify an output variable just for that purpose). This is supported even within a nested Try-Finally, but not within a nested Try-Catch. The line with throw does not need to be physically contained by the Catch statement's body; it can be used by a called function.\n",
					"nome": "Value"
				}
			]
		]
	},
	"ToolTip": {
		"desc": "Shows an always-on-top window anywhere on the screen.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the existing tooltip (if any) will be hidden. Otherwise, specify the text to display in the tooltip. To create a multi-line tooltip, use the linefeed character (`n) in between each line, e.g. \"Line1`nLine2\".\nIf Text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Text"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the tooltip will be shown near the mouse cursor. Otherwise, specify the X and Y position of the tooltip relative to the active window's client area (use CoordMode \"ToolTip\" to change to screen coordinates).\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the first tooltip). Otherwise, specify a number between 1 and 20 to indicate which tooltip to operate upon when using multiple tooltips simultaneously.\n",
					"nome": "WhichToolTip"
				}
			]
		]
	},
	"TraySetIcon": {
		"desc": "Changes the script's tray icon (which is also used by GUI and dialog windows).",
		"params": [
			[
				{
					"desc": "Type: String\nIf omitted, the current tray icon is used, which is only meaningful for Freeze. Otherwise, specify the path to an icon or image file, or an asterisk (*) to restore the script's default icon.\nFor a list of supported formats, see the Picture control.\n",
					"nome": "FileName"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1 (the first icon group in the file). Otherwise, specify the number of the icon group to use. For example, 2 would load the default icon from the second icon group. If negative, the absolute value is assumed to be the resource ID of an icon within an executable file. If FileName is omitted, IconNumber is ignored.\n",
					"nome": "IconNumber"
				}
			],
			[
				{
					"desc": "Type: Boolean\nIf blank or omitted, the icon's frozen/unfrozen state remains unchanged. If true, the icon is frozen. If false, the icon is unfrozen. When the icon has been frozen, Pause and Suspend will not change it. To freeze (or unfreeze) the current icon, use the function as follows: TraySetIcon(,, true).\n",
					"nome": "Freeze"
				}
			]
		]
	},
	"TrayTip": {
		"desc": "Shows a balloon message window or, on Windows 10 and later, a toast notification near the tray icon.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the text will be entirely omitted from the traytip, making it vertically shorter. Otherwise, specify the message to display. Only the first 265 characters will be displayed.\nCarriage return (`r) or linefeed (`n) may be used to create multiple lines of text. For example: Line1`nLine2.\nIf Text is long, it can be broken up into several shorter lines by means of a continuation section, which might improve readability and maintainability.\n",
					"nome": "Text"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, the title line will be entirely omitted from the traytip, making it vertically shorter. Otherwise, specify the title of the traytip. Only the first 73 characters will be displayed.\n",
					"nome": "Title"
				}
			],
			[
				{
					"desc": "Type: String or Integer\nIf blank or omitted, it defaults to 0, which is no icon. Otherwise, specify either an integer value (a combination by addition or bitwise-OR) or a string of zero or more case-insensitive options separated by at least one space or tab. One or more numeric options may also be included in the string.\nThe icon is also not shown by the traytip if it lacks a title (this does not apply to the toast notifications on Windows 10 and later).\nOn Windows 10 and later, the small tray icon is generally displayed even if the \"tray icon\" option (4) is omitted, and specifying this option may cause the program's name to be shown in the notification.\n",
					"nome": "Options"
				}
			]
		]
	},
	"TreeView": {
		"desc": "A TreeView displays a hierarchy of items by indenting child items beneath their parents. The most common example is Explorer's tree of drives and folders.",
		"params": [
			[
				{
					"desc": "Type: String\nThe displayed text of the item, which can be text or numeric (including numeric expression results).\n",
					"nome": "Name"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0, meaning the item will be added at the top level. Otherwise, specify the ID number of the new item's parent.\n",
					"nome": "ParentItemID"
				}
			],
			[
				{
					"desc": "Type: String\nIf blank or omitted, it defaults to no options. Otherwise, specify one or more options from the list below (not case-sensitive). Separate each option from the next with a space or tab. To remove an option, precede it with a minus sign. To add an option, a plus sign is permitted but not required.\nBold: Displays the item's name in a bold font. To later un-bold the item, use TV.Modify(ItemID, \"-Bold\"). The word Bold may optionally be followed immediately by a 0 or 1 to indicate the starting state.\nCheck: Shows a checkmark to the left of the item (if the TreeView has checkboxes). To later uncheck it, use TV.Modify(ItemID, \"-Check\"). The word Check may optionally be followed immediately by a 0 or 1 to indicate the starting state. In other words, both \"Check\" and \"Check\" . VarContainingOne are the same (the period used here is the concatenation operator).\nExpand: Expands the item to reveal its children (if any). To later collapse the item, use TV.Modify(ItemID, \"-Expand\"). If there are no children, the Modify method returns 0 instead of the item's ID. By contrast, the Add method marks the item as expanded in case children are added to it later. Unlike the Select option below, expanding an item does not automatically expand its parent. Finally, the word Expand may optionally be followed immediately by a 0 or 1 to indicate the starting state. In other words, both \"Expand\" and \"Expand\" . VarContainingOne are the same.\nFirst | Sort | N: These options apply only to the Add method. They specify the new item's position relative to its siblings (a sibling is any other item on the same level). If none of these options is present, the new item is added as the last/bottom sibling. Otherwise, specify the word First to add the item as the first/top sibling, or specify the word Sort to insert it among its siblings in alphabetical order. If a plain integer N is specified, it is assumed to be ID number of the sibling after which to insert the new item (if N is the only option present, it does not have to be enclosed in quotes).\nIcon: Specify the word Icon followed immediately by the number of this item's icon, which is displayed to the left of the item's name. If this option is absent, the first icon in the ImageList is used. To display a blank icon, specify a number that is larger than the number of icons in the ImageList. If the control lacks an ImageList, no icon is displayed nor is any space reserved for one.\nSelect: Selects the item. Since only one item at a time can be selected, any previously selected item is automatically de-selected. In addition, this option reveals the newly selected item by expanding its parent(s), if necessary. To find out the current selection, call the GetSelection method.\nSort: For the Modify method, this option alphabetically sorts the children of the specified item. To instead sort all top-level items, use TV.Modify(0, \"Sort\"). If there are no children, 0 is returned instead of the ID of the modified item.\nVis: Ensures that the item is completely visible by scrolling the TreeView and/or expanding its parent, if necessary.\nVisFirst: Same as above except that the TreeView is also scrolled so that the item appears at the top, if possible. This option is typically more effective when used with the Modify method than with the Add method.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item to modify.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: String\nIf this and the NewName parameter is omitted, the item will be selected. Otherwise, specify one or more options from the list above.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the current name is left unchanged. Otherwise, specify the new name of the item.\n",
					"nome": "NewName"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, all items in the TreeView are deleted. Otherwise, specify the ID number of the item to delete.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item to check.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item to check. If 0, the ID number of the first/top item in the TreeView is returned.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item to check.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0, meaning the ID number of the first/top item in the TreeView is returned. Otherwise, specify the ID number of the item to check.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, the ID number of the sibling below the specified item will be retrieved. Otherwise, specify one of the following strings:\nFull or F: Retrieves the next item regardless of its relationship to the specified item. This allows the script to easily traverse the entire tree, item by item. See the example below.\nCheck, Checked or C: Gets only the next item with a checkmark.\n",
					"nome": "ItemType"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item whose text to be retrieved.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number of the item to check.\n",
					"nome": "ItemID"
				}
			],
			[
				{
					"desc": "Type: String\nSpecify one of the following strings:\nE, Expand or Expanded: The item is currently expanded (i.e. its children are being displayed).\nC, Check or Checked: The item has a checkmark.\nB or Bold: The item is currently bold in font.\n",
					"nome": "Attribute"
				}
			],
			[
				{
					"desc": "Type: Integer\nThe ID number returned from a previous call to IL_Create.\n",
					"nome": "ImageListID"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 0. Otherwise, specify 2 for state icons (state icons are not yet directly supported, but they could be used via SendMessage).\n",
					"nome": "IconType"
				}
			]
		]
	},
	"Trim / LTrim / RTrim": {
		"desc": "Trims characters from the beginning and/or end of a string.",
		"params": [
			[
				{
					"desc": "Type: String\nAny string value or variable. Numbers are not supported.\n",
					"nome": "String"
				}
			],
			[
				{
					"desc": "Type: String\nIf omitted, spaces and tabs will be removed. Otherwise, specify a list of characters (case-sensitive) to exclude from the beginning and/or end of String.\n",
					"nome": "OmitChars"
				}
			]
		]
	},
	"Try": {
		"desc": "Guards one or more statements against runtime errors and values thrown by the Throw statement.",
		"params": [

		]
	},
	"Type": {
		"desc": "Returns the class name of a value.",
		"params": [

		]
	},
	"Until": {
		"desc": "Applies a condition to the continuation of a Loop or For-loop.",
		"params": [
			[
				{
					"desc": "Any valid expression.\n",
					"nome": "Expression"
				}
			]
		]
	},
	"VarSetStrCapacity": {
		"desc": "Enlarges a variable's holding capacity or frees its memory. This is not normally needed, but may be used with DllCall or SendMessage or to optimize repeated concatenation.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nA reference to a variable. For example: VarSetStrCapacity(&MyVar, 1000). This can also be a dynamic variable such as Array%i% or a function's ByRef parameter.\n",
					"nome": "&TargetVar"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf omitted, the variable's current capacity will be returned and its contents will not be altered. Otherwise, anything currently in the variable is lost (the variable becomes blank).\nSpecify for RequestedCapacity the number of characters that the variable should be able to hold after the adjustment. RequestedCapacity does not include the internal zero terminator. For example, specifying 1 would allow the variable to hold up to one character in addition to its internal terminator. Note: the variable will auto-expand if the script assigns it a larger value later.\nSince this function is often called simply to ensure the variable has a certain minimum capacity, for performance reasons, it shrinks the variable only when RequestedCapacity is 0. In other words, if the variable's capacity is already greater than RequestedCapacity, it will not be reduced (but the variable will still made blank for consistency).\nTherefore, to explicitly shrink a variable, first free its memory with VarSetStrCapacity(&Var, 0) and then use VarSetStrCapacity(&Var, NewCapacity) -- or simply let it auto-expand from zero as needed.\nFor performance reasons, freeing a variable whose previous capacity was less than 64 characters might have no effect because its memory is of a permanent type. In this case, the current capacity will be returned rather than 0.\nFor performance reasons, the memory of a variable whose capacity is less than 4096 bytes is not freed by storing an empty string in it (e.g. Var := \"\"). However, VarSetStrCapacity(&Var, 0) does free it.\nSpecify -1 for RequestedCapacity to update the variable's internally-stored string length to the length of its current contents. This is useful in cases where the string has been altered indirectly, such as by passing its address via DllCall or SendMessage. In this mode, VarSetStrCapacity returns the length rather than the capacity.\n",
					"nome": "RequestedCapacity"
				}
			]
		]
	},
	"VerCompare": {
		"desc": "Compares two version strings.",
		"params": [
			[
				{
					"desc": "Type: String\nThe first version string to be compared.\n",
					"nome": "VersionA"
				}
			],
			[
				{
					"desc": "Type: String\nThe second version string to be compared, optionally prefixed with one of the following operators: <, <=, >, >= or =.\n",
					"nome": "VersionB"
				}
			]
		]
	},
	"While-loop": {
		"desc": "Performs one or more statements repeatedly until the specified expression evaluates to false.",
		"params": [
			[
				{
					"desc": "Any valid expression. For example: while x < y.\n",
					"nome": "Expression"
				}
			]
		]
	},
	"Win Functions": {
		"desc": "Functions to retrieve information about one or more windows, or make a variety of changes to a window. Click on a function name for details.",
		"params": [

		]
	},
	"WinActivate": {
		"desc": "Activates the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinActivateBottom": {
		"desc": "Same as WinActivate except that it activates the bottommost matching window rather than the topmost.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nAt least one of these is required. Specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinActive": {
		"desc": "Checks if the specified window is active and returns its unique ID (HWND).",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinClose": {
		"desc": "Closes the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will not wait at all. Otherwise, specify the number of seconds (can contain a decimal point) for the window to close. If the window does not close within that period, the script will continue.\n",
					"nome": "SecondsToWait"
				}
			]
		]
	},
	"WinExist": {
		"desc": "Checks if the specified window exists and returns the unique ID (HWND) of the first matching window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetAlwaysOnTop [v2.1-alpha.1+]": {
		"desc": "Returns true if the specified window is always-on-top, otherwise false.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nA window title or other criteria identifying the target window. See WinTitle.\n",
					"nome": "WinTitle"
				}
			],
			[
				{
					"desc": "Type: String\nIf present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.\n",
					"nome": "WinText"
				}
			],
			[
				{
					"desc": "Type: String\nWindows whose titles include this value will not be considered.\n",
					"nome": "ExcludeTitle"
				}
			],
			[
				{
					"desc": "Type: String\nWindows whose text include this value will not be considered.\n",
					"nome": "ExcludeText"
				}
			]
		]
	},
	"WinGetClass": {
		"desc": "Retrieves the specified window's class name.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetClientPos": {
		"desc": "Retrieves the position and size of the specified window's client area.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nReferences to output variables in which to store the X and Y coordinates of the client area's upper left corner. If omitted, the corresponding values will not be stored.\n",
					"nome": "&X, &Y"
				}
			],
			[
				{
					"desc": "Type: VarRef\nReferences to output variables in which to store the width and height of the client area. If omitted, the corresponding values will not be stored.\n",
					"nome": "&Width, &Height"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetControls": {
		"desc": "Returns the control names for all controls in the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetControlsHwnd": {
		"desc": "Returns the unique ID numbers for all controls in the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetCount": {
		"desc": "Returns the number of existing windows that match the specified criteria.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetEnabled [v2.1-alpha.1+]": {
		"desc": "Returns true if the specified window is enabled, otherwise false.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nA window title or other criteria identifying the target window. See WinTitle.\n",
					"nome": "WinTitle"
				}
			],
			[
				{
					"desc": "Type: String\nIf present, this parameter must be a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText is ON.\n",
					"nome": "WinText"
				}
			],
			[
				{
					"desc": "Type: String\nWindows whose titles include this value will not be considered.\n",
					"nome": "ExcludeTitle"
				}
			],
			[
				{
					"desc": "Type: String\nWindows whose text include this value will not be considered.\n",
					"nome": "ExcludeText"
				}
			]
		]
	},
	"WinGetID": {
		"desc": "Returns the unique ID number of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetIDLast": {
		"desc": "Returns the unique ID number of the last/bottommost window if there is more than one match.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetList": {
		"desc": "Returns the unique ID numbers of all existing windows that match the specified criteria.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetMinMax": {
		"desc": "Returns the state whether the specified window is maximized or minimized.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetPID": {
		"desc": "Returns the Process ID number of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetPos": {
		"desc": "Retrieves the position and size of the specified window.",
		"params": [
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the X and Y coordinates of the target window's upper left corner.\n",
					"nome": "&OutX, &OutY"
				}
			],
			[
				{
					"desc": "Type: VarRef\nIf omitted, the corresponding value will not be stored. Otherwise, specify references to the output variables in which to store the width and height of the target window.\n",
					"nome": "&OutWidth, &OutHeight"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetProcessName": {
		"desc": "Returns the name of the process that owns the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetProcessPath": {
		"desc": "Returns the full path and name of the process that owns the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetStyle / WinGetExStyle": {
		"desc": "Returns the style or extended style (respectively) of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetText": {
		"desc": "Retrieves the text from the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetTitle": {
		"desc": "Retrieves the title of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetTransColor": {
		"desc": "Returns the color that is marked transparent in the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinGetTransparent": {
		"desc": "Returns the degree of transparency of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinHide": {
		"desc": "Hides the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinKill": {
		"desc": "Forces the specified window to close.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will not wait at all. Otherwise, it will wait the indicated number of seconds (can contain a decimal point) for the window to close. If the window does not close within that period, the script will continue.\n",
					"nome": "SecondsToWait"
				}
			]
		]
	},
	"WinMaximize": {
		"desc": "Enlarges the specified window to its maximum size.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinMinimize": {
		"desc": "Collapses the specified window into a button on the task bar.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinMinimizeAll / WinMinimizeAllUndo": {
		"desc": "Minimizes or unminimizes all windows.",
		"params": [

		]
	},
	"WinMove": {
		"desc": "Changes the position and/or size of the specified window.",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf either is omitted, the position in that dimension will not be changed. Otherwise, specify the X and Y coordinates (in pixels) of the upper left corner of the target window's new location. The upper-left pixel of the screen is at 0, 0.\n",
					"nome": "X, Y"
				}
			],
			[
				{
					"desc": "Type: Integer\nIf either is omitted, the size in that dimension will not be changed. Otherwise, specify the new width and height of the window (in pixels).\n",
					"nome": "Width, Height"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinMoveBottom": {
		"desc": "Sends the specified window to the bottom of stack; that is, beneath all other windows.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinMoveTop": {
		"desc": "Brings the specified window to the top of the stack without explicitly activating it.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinRedraw": {
		"desc": "Redraws the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinRestore": {
		"desc": "Unminimizes or unmaximizes the specified window if it is minimized or maximized.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetAlwaysOnTop": {
		"desc": "Makes the specified window stay on top of all other windows (except other always-on-top windows).",
		"params": [
			[
				{
					"desc": "Type: Integer\nIf omitted, it defaults to 1. Otherwise, specify one of the following values:\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetEnabled": {
		"desc": "Enables or disables the specified window.",
		"params": [
			[
				{
					"desc": "Type: Integer\nOne of the following values:\n",
					"nome": "NewSetting"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetRegion": {
		"desc": "Changes the shape of the specified window to be the specified rectangle, ellipse, or polygon.",
		"params": [
			[
				{
					"desc": "Type: String\nIf blank or omitted, the window is restored to its original/default display area. Otherwise, specify one or more of the following options, each separated from the others with space(s):\nWn: Width of rectangle or ellipse. For example: w200.\nHn: Height of rectangle or ellipse. For example: h200.\nX-Y: Each of these is a pair of X/Y coordinates. For example, 200-0 would use 200 for the X coordinate and 0 for the Y.\nE: Makes the region an ellipse rather than a rectangle. This option is valid only when W and H are present.\nRw-h: Makes the region a rectangle with rounded corners. For example, r30-30 would use a 30x30 ellipse for each corner. If w-h is omitted, 30-30 is used. R is valid only when W and H are present.\nRectangle or ellipse: If the W and H options are present, the new display area will be a rectangle whose upper left corner is specified by the first (and only) pair of X-Y coordinates. However, if the E option is also present, the new display area will be an ellipse rather than a rectangle. For example: WinSetRegion \"50-0 w200 h250 E\", WinTitle.\nPolygon: When the W and H options are absent, the new display area will be a polygon determined by multiple pairs of X-Y coordinates (each pair of coordinates is a point inside the window relative to its upper left corner). For example, if three pairs of coordinates are specified, the new display area will be a triangle in most cases. The order of the coordinate pairs with respect to each other is sometimes important. In addition, the word Wind maybe be present in Options to use the winding method instead of the alternating method to determine the polygon's region.\n",
					"nome": "Options"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetStyle / WinSetExStyle": {
		"desc": "Changes the style or extended style of the specified window, respectively.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nPass a positive integer to completely overwrite the window's style; that is, to set it to Value.\nTo easily add, remove or toggle styles, pass a numeric string prefixed with a plus sign (+), minus sign (-) or caret (^), respectively. The new style value is calculated as shown below (where CurrentStyle could be retrieved with WinGetStyle or WinGetExStyle):\nIf Value is a negative integer, it is treated the same as the corresponding numeric string.\nTo use the + or ^ prefix literally in an expression, the prefix or value must be enclosed in quote marks. For example: WinSetStyle(\"+0x80\") or WinSetStyle(\"^\" StylesToToggle). This is because the expression +123 produces 123 (without a prefix) and ^123 is a syntax error.\n",
					"nome": "Value"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetTitle": {
		"desc": "Changes the title of the specified window.",
		"params": [
			[
				{
					"desc": "Type: String\nThe new title for the window. If this is the only parameter given, the Last Found Window will be used.\n",
					"nome": "NewTitle"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetTransColor": {
		"desc": "Makes all pixels of the chosen color invisible inside the specified window.",
		"params": [
			[
				{
					"desc": "Type: String or Integer\nSpecify a color name or RGB value (see the color chart for guidance, or use PixelGetColor in its RGB mode). To additionally make the visible part of the window partially transparent, append a space (not a comma) followed by the transparency level (0-255). For example: WinSetTransColor \"EEAA99 150\".\nIf the value is a string, any numeric color value must be in hexadecimal format. The color value can be omitted; for example, WinSetTransColor \" 150\" (with the leading space) is equivalent to WinSetTransparent 150.\n\"Off\" (case-insensitive) may be specified to completely turn off transparency for a window. This is functionally identical to WinSetTransparent \"Off\". Specifying Off is different than specifying 255 because it may improve performance and reduce usage of system resources (but probably only when desktop composition is disabled).\n",
					"nome": "Color"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinSetTransparent": {
		"desc": "Makes the specified window semi-transparent.",
		"params": [
			[
				{
					"desc": "Type: Integer or String\nTo enable transparency, specify a number between 0 and 255 indicating the degree of transparency: 0 makes the window invisible while 255 makes it opaque.\n\"Off\" (case-insensitive) may be specified to completely turn off transparency for a window. This is functionally identical to WinSetTransColor \"Off\". Specifying Off is different than specifying 255 because it may improve performance and reduce usage of system resources (but probably only when desktop composition is disabled).\n",
					"nome": "N"
				}
			],
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinShow": {
		"desc": "Unhides the specified window.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			]
		]
	},
	"WinWait": {
		"desc": "Waits until the specified window exists.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nAt least one of these is required. Specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, it will wait no longer than this many seconds. To wait for a fraction of a second, specify a floating-point number, for example, 0.25 to wait for a maximum of 250 milliseconds.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"WinWaitActive / WinWaitNotActive": {
		"desc": "Waits until the specified window is active or not active.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, it will wait no longer than this many seconds. To wait for a fraction of a second, specify a floating-point number, for example, 0.25 to wait for a maximum of 250 milliseconds.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"WinWaitClose": {
		"desc": "Waits until no matching windows can be found.",
		"params": [
			[
				{
					"desc": "Type: String, Integer or Object\nIf each of these is blank or omitted, the Last Found Window will be used. Otherwise, specify for WinTitle a window title or other criteria to identify the target window and/or for WinText a substring from a single text element of the target window (as revealed by the included Window Spy utility). Hidden text elements are detected if DetectHiddenText has been turned on. Windows whose title or text contains ExcludeTitle or ExcludeText will not be considered.\n",
					"nome": "WinTitle, WinText, ExcludeTitle, ExcludeText"
				}
			],
			[
				{
					"desc": "Type: Integer or Float\nIf omitted, the function will wait indefinitely. Otherwise, it will wait no longer than this many seconds. To wait for a fraction of a second, specify a floating-point number, for example, 0.25 to wait for a maximum of 250 milliseconds.\n",
					"nome": "Timeout"
				}
			]
		]
	},
	"{...} (block)": {
		"desc": "Blocks are one or more statements enclosed in braces. Typically used with function definitions and control flow statements.",
		"params": [

		]
	}
}